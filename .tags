!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS8_C	.\lib\FastLED\lib8tion.h	204;"	d
ADAFRUIT_NEOPIXEL_H	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	20;"	d
ADD8_C	.\lib\FastLED\lib8tion.h	207;"	d
ADDDE1	.\lib\FastLED\platforms\avr\clockless_trinket.h	269;"	d
ADJDITHER2	.\lib\FastLED\platforms\avr\clockless_trinket.h	268;"	d
ADJDITHER7	.\lib\FastLED\platforms\arm\common\m0clockless.h	223;"	d
ANIMATIONSPEED	.\src\LightEffects.h	8;"	d
APA102	.\lib\FastLED\FastLED.h	/^	APA102,$/;"	e	enum:ESPIChipsets
APA102Controller	.\lib\FastLED\chipsets.h	/^	APA102Controller() {}$/;"	f	class:APA102Controller
APA102Controller	.\lib\FastLED\chipsets.h	/^class APA102Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
APA104	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class APA104 : public WS2811Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
APA106	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class APA106 : public SK6822Controller<DATA_PIN, RGB_ORDER> {};$/;"	c
APPLY_DIMMING	.\lib\FastLED\hsv2rgb.cpp	67;"	d	file:
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	ARMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^class ARMHardwareSPIOutput {$/;"	c
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	ARMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^class ARMHardwareSPIOutput {$/;"	c
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  ARMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^class ARMHardwareSPIOutput {$/;"	c
ARM_HARDWARE_SPI	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	83;"	d
ASM_VARS	.\lib\FastLED\platforms\avr\clockless_trinket.h	172;"	d
AVG15	.\lib\FastLED\noise.cpp	26;"	d	file:
AVG15	.\lib\FastLED\noise.cpp	30;"	d	file:
AVG15	.\lib\FastLED\noise.cpp	51;"	d	file:
AVG15_C	.\lib\FastLED\lib8tion.h	213;"	d
AVG16_C	.\lib\FastLED\lib8tion.h	212;"	d
AVG7_C	.\lib\FastLED\lib8tion.h	211;"	d
AVG8_C	.\lib\FastLED\lib8tion.h	210;"	d
AVRHardwareSPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	AVRHardwareSPIOutput() { m_pSelect = NULL; mWait = false;}$/;"	f	class:AVRHardwareSPIOutput
AVRHardwareSPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	AVRHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRHardwareSPIOutput
AVRHardwareSPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^class AVRHardwareSPIOutput {$/;"	c
AVRSoftwareSPIOutput	.\lib\FastLED\fastspi_bitbang.h	/^	AVRSoftwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRSoftwareSPIOutput
AVRSoftwareSPIOutput	.\lib\FastLED\fastspi_bitbang.h	/^	AVRSoftwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRSoftwareSPIOutput
AVRSoftwareSPIOutput	.\lib\FastLED\fastspi_bitbang.h	/^class AVRSoftwareSPIOutput {$/;"	c
AVRUSART0SPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	AVRUSART0SPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRUSART0SPIOutput
AVRUSART0SPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	AVRUSART0SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART0SPIOutput
AVRUSART0SPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^class AVRUSART0SPIOutput {$/;"	c
AVRUSART1SPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	AVRUSART1SPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRUSART1SPIOutput
AVRUSART1SPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	AVRUSART1SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART1SPIOutput
AVRUSART1SPIOutput	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^class AVRUSART1SPIOutput {$/;"	c
Activate_Scroll_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	53;"	d
Adafruit_NeoPixel	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^Adafruit_NeoPixel::Adafruit_NeoPixel() :$/;"	f	class:Adafruit_NeoPixel
Adafruit_NeoPixel	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :$/;"	f	class:Adafruit_NeoPixel
Adafruit_NeoPixel	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^class Adafruit_NeoPixel {$/;"	c
AliceBlue	.\lib\FastLED\pixeltypes.h	/^        AliceBlue=0xF0F8FF,$/;"	e	enum:CRGB::__anon45
Amethyst	.\lib\FastLED\pixeltypes.h	/^        Amethyst=0x9966CC,$/;"	e	enum:CRGB::__anon45
AntiqueWhite	.\lib\FastLED\pixeltypes.h	/^        AntiqueWhite=0xFAEBD7,$/;"	e	enum:CRGB::__anon45
Aqua	.\lib\FastLED\pixeltypes.h	/^        Aqua=0x00FFFF,$/;"	e	enum:CRGB::__anon45
Aquamarine	.\lib\FastLED\pixeltypes.h	/^        Aquamarine=0x7FFFD4,$/;"	e	enum:CRGB::__anon45
AvrDequeBufferSize	.\lib\avr-stl\include\avr_config.h	/^	inline size_t AvrDequeBufferSize() { return 20; }$/;"	f	namespace:avrstl
AvrStringAllocAheadIncrement	.\lib\avr-stl\include\avr_config.h	/^	template<typename T> size_t AvrStringAllocAheadIncrement(size_t oldSize_) { return 20; }$/;"	f	namespace:avrstl
AvrVectorAllocAhead	.\lib\avr-stl\include\avr_config.h	/^	template<typename T> size_t AvrVectorAllocAhead(size_t oldSize_) { return 20+oldSize_; }$/;"	f	namespace:avrstl
Azure	.\lib\FastLED\pixeltypes.h	/^        Azure=0xF0FFFF,$/;"	e	enum:CRGB::__anon45
BACKWARD_HUES	.\lib\FastLED\colorutils.h	/^typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;$/;"	e	enum:__anon26
BGR	.\lib\FastLED\pixeltypes.h	/^	BGR=0210$/;"	e	enum:EOrder
BINARY_DITHER	.\lib\FastLED\controller.h	25;"	d
BLACK	.\lib\GOFi2cOLED\GOFi2cOLED.h	30;"	d
BLEND8_C	.\lib\FastLED\lib8tion.h	214;"	d
BLESerial	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^BLESerial::BLESerial(unsigned char req, unsigned char rdy, unsigned char rst) :$/;"	f	class:BLESerial
BLESerial	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^class BLESerial : public BLEPeripheral, public Stream$/;"	c
BRG	.\lib\FastLED\pixeltypes.h	/^	BRG=0201,$/;"	e	enum:EOrder
BRLOOP1	.\lib\FastLED\platforms\avr\clockless_trinket.h	314;"	d
Beige	.\lib\FastLED\pixeltypes.h	/^        Beige=0xF5F5DC,$/;"	e	enum:CRGB::__anon45
Bisque	.\lib\FastLED\pixeltypes.h	/^        Bisque=0xFFE4C4,$/;"	e	enum:CRGB::__anon45
BitWork	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^template<int VAL, int BIT> class BitWork {$/;"	c
BitWork	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^template<int VAL> class BitWork<VAL, 0> {$/;"	c
BitWork	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^template<int VAL, int BIT> class BitWork {$/;"	c
BitWork	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^template<int VAL> class BitWork<VAL, 0> {$/;"	c
Black	.\lib\FastLED\pixeltypes.h	/^        Black=0x000000,$/;"	e	enum:CRGB::__anon45
BlackLightFluorescent	.\lib\FastLED\color.h	/^   BlackLightFluorescent=0xA700FF \/* 0 K, 167, 0, 255 *\/,$/;"	e	enum:__anon25
BlanchedAlmond	.\lib\FastLED\pixeltypes.h	/^        BlanchedAlmond=0xFFEBCD,$/;"	e	enum:CRGB::__anon45
Blue	.\lib\FastLED\pixeltypes.h	/^        Blue=0x0000FF,$/;"	e	enum:CRGB::__anon45
BlueViolet	.\lib\FastLED\pixeltypes.h	/^        BlueViolet=0x8A2BE2,$/;"	e	enum:CRGB::__anon45
Brown	.\lib\FastLED\pixeltypes.h	/^        Brown=0xA52A2A,$/;"	e	enum:CRGB::__anon45
BurlyWood	.\lib\FastLED\pixeltypes.h	/^        BurlyWood=0xDEB887,$/;"	e	enum:CRGB::__anon45
CEveryNBSeconds	.\lib\FastLED\lib8tion.h	/^typedef CEveryNTimePeriods<uint16_t,bseconds16> CEveryNBSeconds;$/;"	t
CEveryNHours	.\lib\FastLED\lib8tion.h	/^typedef CEveryNTimePeriods<uint8_t,hours8> CEveryNHours;$/;"	t
CEveryNMillis	.\lib\FastLED\lib8tion.h	/^typedef CEveryNTimePeriods<uint32_t,millis> CEveryNMillis;$/;"	t
CEveryNMilliseconds	.\lib\FastLED\lib8tion.h	1118;"	d
CEveryNMinutes	.\lib\FastLED\lib8tion.h	/^typedef CEveryNTimePeriods<uint16_t,minutes16> CEveryNMinutes;$/;"	t
CEveryNSeconds	.\lib\FastLED\lib8tion.h	/^typedef CEveryNTimePeriods<uint16_t,seconds16> CEveryNSeconds;$/;"	t
CEveryNTimePeriods	.\lib\FastLED\lib8tion.h	/^    CEveryNTimePeriods() { reset(); mPeriod = 1; };$/;"	f	class:CEveryNTimePeriods
CEveryNTimePeriods	.\lib\FastLED\lib8tion.h	/^    CEveryNTimePeriods(timeType period) { reset(); setPeriod(period); };$/;"	f	class:CEveryNTimePeriods
CEveryNTimePeriods	.\lib\FastLED\lib8tion.h	/^class CEveryNTimePeriods {$/;"	c
CFastLED	.\lib\FastLED\FastLED.cpp	/^CFastLED::CFastLED() {$/;"	f	class:CFastLED
CFastLED	.\lib\FastLED\FastLED.h	/^class CFastLED {$/;"	c
CHIPSET	.\src\LightEffects.h	5;"	d
CHSV	.\lib\FastLED\pixeltypes.h	/^    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))$/;"	f	struct:CHSV
CHSV	.\lib\FastLED\pixeltypes.h	/^    inline CHSV() __attribute__((always_inline))$/;"	f	struct:CHSV
CHSV	.\lib\FastLED\pixeltypes.h	/^    inline CHSV(const CHSV& rhs) __attribute__((always_inline))$/;"	f	struct:CHSV
CHSV	.\lib\FastLED\pixeltypes.h	/^struct CHSV {$/;"	s
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const CHSV& c1)$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const CHSV& c1, const CHSV& c2)$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const CHSVPalette16& rhs)$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16( const TProgmemHSVPalette16& rhs)$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^    CHSVPalette16() {};$/;"	f	class:CHSVPalette16
CHSVPalette16	.\lib\FastLED\colorutils.h	/^class CHSVPalette16 {$/;"	c
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSV& c1)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSV& c1, const CHSV& c2)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSVPalette16& rhs16)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const CHSVPalette256& rhs)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256( const TProgmemRGBPalette16& rhs)$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^    CHSVPalette256() {};$/;"	f	class:CHSVPalette256
CHSVPalette256	.\lib\FastLED\colorutils.h	/^class CHSVPalette256 {$/;"	c
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const CHSV& c1)$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const CHSV& c1, const CHSV& c2)$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const CHSVPalette32& rhs)$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32( const TProgmemHSVPalette32& rhs)$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^    CHSVPalette32() {};$/;"	f	class:CHSVPalette32
CHSVPalette32	.\lib\FastLED\colorutils.h	/^class CHSVPalette32 {$/;"	c
CLC1	.\lib\FastLED\platforms\avr\clockless_trinket.h	246;"	d
CLEDController	.\lib\FastLED\controller.h	/^    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {$/;"	f	class:CLEDController
CLEDController	.\lib\FastLED\controller.h	/^class CLEDController {$/;"	c
CLI_CHK	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	11;"	d
CLI_CHK	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	15;"	d
CLKS_PER_US	.\lib\FastLED\led_sysdefs.h	46;"	d
CLKS_TO_MICROS	.\lib\FastLED\fastled_delay.h	126;"	d
CLK_DBL	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	21;"	d
CLK_DBL	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	21;"	d
CLK_DBL	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	24;"	d
CLOCK_HI_DELAY	.\lib\FastLED\fastspi_bitbang.h	118;"	d
CLOCK_LO_DELAY	.\lib\FastLED\fastspi_bitbang.h	119;"	d
CM	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	307;"	d
CM	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	309;"	d
CM	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	315;"	d
CM	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	317;"	d
CMPLOOP5	.\lib\FastLED\platforms\arm\common\m0clockless.h	225;"	d
CMinWait	.\lib\FastLED\fastled_delay.h	/^	CMinWait() { mLastMicros = 0; }$/;"	f	class:CMinWait
CMinWait	.\lib\FastLED\fastled_delay.h	/^template<int WAIT> class CMinWait {$/;"	c
COLORCODE	.\src\LightEffects.h	7;"	d
COM_Output_Normal_Scan_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	69;"	d
COM_Output_Remap_Scan_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	70;"	d
CONCAT_HELPER	.\lib\FastLED\lib8tion.h	1105;"	d
CONCAT_MACRO	.\lib\FastLED\lib8tion.h	1106;"	d
CONT	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
CONT	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
COctoWS2811Controller	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  COctoWS2811Controller() { pocto = NULL; }$/;"	f	class:COctoWS2811Controller
COctoWS2811Controller	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {$/;"	c
CPU_FREQ	.\lib\I2Cdev\I2Cdev.h	217;"	d
CPixelLEDController	.\lib\FastLED\controller.h	/^  CPixelLEDController() : CLEDController() {}$/;"	f	class:CPixelLEDController
CPixelLEDController	.\lib\FastLED\controller.h	/^template<EOrder RGB_ORDER, int LANES=1, uint32_t MASK=0xFFFFFFFF> class CPixelLEDController : public CLEDController {$/;"	c
CPixelView	.\lib\FastLED\pixelset.h	/^  inline CPixelView(PIXEL_TYPE *_leds, int _len) : dir(_len < 0 ? -1 : 1), len(_len), leds(_leds), end_pos(_leds + _len) {}$/;"	f	class:CPixelView
CPixelView	.\lib\FastLED\pixelset.h	/^  inline CPixelView(PIXEL_TYPE *_leds, int _start, int _end) : dir(((_end-_start)<0) ? -1 : 1), len((_end - _start) + dir), leds(_leds + _start), end_pos(_leds + _start + len) {}$/;"	f	class:CPixelView
CPixelView	.\lib\FastLED\pixelset.h	/^  inline CPixelView(const CPixelView & other) : dir(other.dir), len(other.len), leds(other.leds), end_pos(other.end_pos) {}$/;"	f	class:CPixelView
CPixelView	.\lib\FastLED\pixelset.h	/^class CPixelView {$/;"	c
CRGB	.\lib\FastLED\pixeltypes.h	/^	inline CRGB() __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^	inline CRGB(const CHSV& rhs) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^	inline CRGB(const CRGB& rhs) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	.\lib\FastLED\pixeltypes.h	/^struct CRGB {$/;"	s
CRGBArray	.\lib\FastLED\pixelset.h	/^  CRGBArray() : CPixelView<CRGB>(rawleds, SIZE) {}$/;"	f	class:CRGBArray
CRGBArray	.\lib\FastLED\pixelset.h	/^class CRGBArray : public CPixelView<CRGB> {$/;"	c
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CHSV rhs[16])$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CHSV& c1)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CHSV& c1, const CHSV& c2)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CHSVPalette16& rhs)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGB rhs[16])$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGB& c1)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGB& c1, const CRGB& c2)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const CRGBPalette16& rhs)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^    CRGBPalette16() {};$/;"	f	class:CRGBPalette16
CRGBPalette16	.\lib\FastLED\colorutils.h	/^class CRGBPalette16 {$/;"	c
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CHSV rhs[256])$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CHSV& c1)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CHSV& c1, const CHSV& c2)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CHSVPalette256& rhs)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGB rhs[256])$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGB& c1)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGB& c1, const CRGB& c2)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const CRGBPalette256& rhs)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^    CRGBPalette256() {};$/;"	f	class:CRGBPalette256
CRGBPalette256	.\lib\FastLED\colorutils.h	/^class CRGBPalette256 {$/;"	c
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CHSV rhs[32])$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CHSV& c1)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CHSV& c1, const CHSV& c2)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CHSVPalette32& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGB rhs[32])$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGB& c1)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGB& c1, const CRGB& c2)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const CRGBPalette32& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32( const TProgmemRGBPalette32& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^    CRGBPalette32() {};$/;"	f	class:CRGBPalette32
CRGBPalette32	.\lib\FastLED\colorutils.h	/^class CRGBPalette32 {$/;"	c
CRGBSet	.\lib\FastLED\pixelset.h	/^typedef CPixelView<CRGB> CRGBSet;$/;"	t
CSmartMatrixController	.\lib\FastLED\platforms\arm\k20\smartmatrix_t3.h	/^class CSmartMatrixController : public CPixelLEDController<RGB_ORDER> {$/;"	c
CWS2812SerialController	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  CWS2812SerialController() { pserial = NULL; }$/;"	f	class:CWS2812SerialController
CWS2812SerialController	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {$/;"	c
CYCLES_400	.\lib\Adafruit_NeoPixel\esp8266.c	32;"	d	file:
CYCLES_400_T0H	.\lib\Adafruit_NeoPixel\esp8266.c	30;"	d	file:
CYCLES_400_T1H	.\lib\Adafruit_NeoPixel\esp8266.c	31;"	d	file:
CYCLES_800	.\lib\Adafruit_NeoPixel\esp8266.c	29;"	d	file:
CYCLES_800_T0H	.\lib\Adafruit_NeoPixel\esp8266.c	27;"	d	file:
CYCLES_800_T1H	.\lib\Adafruit_NeoPixel\esp8266.c	28;"	d	file:
CadetBlue	.\lib\FastLED\pixeltypes.h	/^        CadetBlue=0x5F9EA0,$/;"	e	enum:CRGB::__anon45
Candle	.\lib\FastLED\color.h	/^   Candle=0xFF9329 \/* 1900 K, 255, 147, 41 *\/,$/;"	e	enum:__anon25
CarbonArc	.\lib\FastLED\color.h	/^   CarbonArc=0xFFFAF4 \/* 5200 K, 255, 250, 244 *\/,$/;"	e	enum:__anon25
Charge_Pump_Disable_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	82;"	d
Charge_Pump_Enable_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	81;"	d
Charge_Pump_Setting_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	80;"	d
Chartreuse	.\lib\FastLED\pixeltypes.h	/^        Chartreuse=0x7FFF00,$/;"	e	enum:CRGB::__anon45
Chocolate	.\lib\FastLED\pixeltypes.h	/^        Chocolate=0xD2691E,$/;"	e	enum:CRGB::__anon45
ClearBlueSky	.\lib\FastLED\color.h	/^   ClearBlueSky=0x409CFF \/* 20000 K, 64, 156, 255 *\/,$/;"	e	enum:__anon25
ClocklessController	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
Color	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {$/;"	f	class:Adafruit_NeoPixel
Color	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {$/;"	f	class:Adafruit_NeoPixel
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CHSV ColorFromPalette( const struct CHSVPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CHSV ColorFromPalette( const struct CHSVPalette256& pal, uint8_t index, uint8_t brightness, TBlendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CHSV ColorFromPalette( const struct CHSVPalette32& pal, uint8_t index, uint8_t brightness, TBlendType blendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CRGB ColorFromPalette( const CRGBPalette256& pal, uint8_t index, uint8_t brightness, TBlendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CRGB ColorFromPalette( const CRGBPalette32& pal, uint8_t index, uint8_t brightness, TBlendType blendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CRGB ColorFromPalette( const TProgmemRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)$/;"	f
ColorFromPalette	.\lib\FastLED\colorutils.cpp	/^CRGB ColorFromPalette( const TProgmemRGBPalette32& pal, uint8_t index, uint8_t brightness, TBlendType blendType)$/;"	f
ColorTemperature	.\lib\FastLED\color.h	/^} ColorTemperature;$/;"	t	typeref:enum:__anon25
CoolWhiteFluorescent	.\lib\FastLED\color.h	/^   CoolWhiteFluorescent=0xD4EBFF \/* 0 K, 212, 235, 255 *\/,$/;"	e	enum:__anon25
Coral	.\lib\FastLED\pixeltypes.h	/^        Coral=0xFF7F50,$/;"	e	enum:CRGB::__anon45
CornflowerBlue	.\lib\FastLED\pixeltypes.h	/^        CornflowerBlue=0x6495ED,$/;"	e	enum:CRGB::__anon45
Cornsilk	.\lib\FastLED\pixeltypes.h	/^        Cornsilk=0xFFF8DC,$/;"	e	enum:CRGB::__anon45
Crimson	.\lib\FastLED\pixeltypes.h	/^        Crimson=0xDC143C,$/;"	e	enum:CRGB::__anon45
CurrentProjectSetting	.\src\.vs\ProjectSettings.json	/^  "CurrentProjectSetting": "x86-Debug"$/;"	f
Cyan	.\lib\FastLED\pixeltypes.h	/^        Cyan=0x00FFFF,$/;"	e	enum:CRGB::__anon45
D1	.\lib\FastLED\platforms\arm\common\m0clockless.h	213;"	d
D1	.\lib\FastLED\platforms\avr\clockless_trinket.h	74;"	d
D2	.\lib\FastLED\platforms\arm\common\m0clockless.h	216;"	d
D2	.\lib\FastLED\platforms\avr\clockless_trinket.h	75;"	d
D3	.\lib\FastLED\platforms\arm\common\m0clockless.h	218;"	d
D3	.\lib\FastLED\platforms\avr\clockless_trinket.h	76;"	d
DADVANCE	.\lib\FastLED\platforms\avr\clockless_trinket.h	322;"	d
DATAPIN	.\src\LightEffects.h	6;"	d
DATA_NOP	.\lib\FastLED\fastspi_types.h	/^class DATA_NOP {$/;"	c
DATA_RATE_KHZ	.\lib\FastLED\fastspi.h	15;"	d
DATA_RATE_MHZ	.\lib\FastLED\fastspi.h	14;"	d
DCOUNT2	.\lib\FastLED\platforms\avr\clockless_trinket.h	310;"	d
DEBUG_PRINT	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	105;"	d
DEBUG_PRINT	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	110;"	d
DEBUG_PRINT	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	101;"	d
DEBUG_PRINT	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	96;"	d
DEBUG_PRINTF	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	106;"	d
DEBUG_PRINTF	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	111;"	d
DEBUG_PRINTF	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	102;"	d
DEBUG_PRINTF	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	97;"	d
DEBUG_PRINTLN	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	107;"	d
DEBUG_PRINTLN	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	112;"	d
DEBUG_PRINTLN	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	103;"	d
DEBUG_PRINTLN	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	98;"	d
DEBUG_PRINTLNF	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	108;"	d
DEBUG_PRINTLNF	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	113;"	d
DEBUG_PRINTLNF	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	104;"	d
DEBUG_PRINTLNF	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	99;"	d
DECLARE_GRADIENT_PALETTE	.\lib\FastLED\colorutils.h	1674;"	d
DECLARE_SPI0	.\lib\FastLED\fastspi.h	64;"	d
DECLARE_SPI1	.\lib\FastLED\fastspi.h	66;"	d
DEFINE_GRADIENT_PALETTE	.\lib\FastLED\colorpalettes.cpp	/^DEFINE_GRADIENT_PALETTE( Rainbow_gp ) {$/;"	f
DEFINE_GRADIENT_PALETTE	.\lib\FastLED\colorutils.h	1670;"	d
DINT	.\lib\FastLED\platforms\avr\clockless_trinket.h	73;"	d
DINTPIN	.\lib\FastLED\platforms\avr\clockless_trinket.h	72;"	d
DIR	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  DIR;                               \/*!< Direction of GPIO pins.                                               *\/$/;"	m	struct:__anon51
DIRCLR	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  DIRCLR;                            \/*!< DIR clear register.                                                   *\/$/;"	m	struct:__anon51
DIRSET	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  DIRSET;                            \/*!< DIR set register.                                                     *\/$/;"	m	struct:__anon51
DISABLE_DITHER	.\lib\FastLED\controller.h	24;"	d
DITHER	.\lib\FastLED\platforms\avr\clockless_trinket.h	16;"	d
DITHER5	.\lib\FastLED\platforms\arm\common\m0clockless.h	220;"	d
DMXSERIAL	.\lib\FastLED\FastLED.h	/^template<EOrder RGB_ORDER> class DMXSERIAL : public DMXSerialController<RGB_ORDER> {};$/;"	c
DMXSIMPLE	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class DMXSIMPLE : public DMXSimpleController<DATA_PIN, RGB_ORDER> {};$/;"	c
DMXSerialController	.\lib\FastLED\dmx.h	/^template <EOrder RGB_ORDER = RGB> class DMXSerialController : public CPixelLEDController<RGB_ORDER> {$/;"	c
DMXSimpleController	.\lib\FastLED\dmx.h	/^template <uint8_t DATA_PIN, EOrder RGB_ORDER = RGB> class DMXSimpleController : public CPixelLEDController<RGB_ORDER> {$/;"	c
DNOP	.\lib\FastLED\platforms\avr\clockless_trinket.h	320;"	d
DONE	.\lib\FastLED\platforms\avr\clockless_trinket.h	278;"	d
DOTSTAR	.\lib\FastLED\FastLED.h	/^	DOTSTAR$/;"	e	enum:ESPIChipsets
DUE_TIMER	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	16;"	d
DUE_TIMER_CHANNEL	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	13;"	d
DUE_TIMER_GROUP	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	9;"	d
DUE_TIMER_ID	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	17;"	d
DUE_TIMER_RUNNING	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	19;"	d
DUE_TIMER_VAL	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	18;"	d
DUSE	.\lib\FastLED\platforms\avr\clockless_trinket.h	323;"	d
DarkBlue	.\lib\FastLED\pixeltypes.h	/^        DarkBlue=0x00008B,$/;"	e	enum:CRGB::__anon45
DarkCyan	.\lib\FastLED\pixeltypes.h	/^        DarkCyan=0x008B8B,$/;"	e	enum:CRGB::__anon45
DarkGoldenrod	.\lib\FastLED\pixeltypes.h	/^        DarkGoldenrod=0xB8860B,$/;"	e	enum:CRGB::__anon45
DarkGray	.\lib\FastLED\pixeltypes.h	/^        DarkGray=0xA9A9A9,$/;"	e	enum:CRGB::__anon45
DarkGreen	.\lib\FastLED\pixeltypes.h	/^        DarkGreen=0x006400,$/;"	e	enum:CRGB::__anon45
DarkGrey	.\lib\FastLED\pixeltypes.h	/^        DarkGrey=0xA9A9A9,$/;"	e	enum:CRGB::__anon45
DarkKhaki	.\lib\FastLED\pixeltypes.h	/^        DarkKhaki=0xBDB76B,$/;"	e	enum:CRGB::__anon45
DarkMagenta	.\lib\FastLED\pixeltypes.h	/^        DarkMagenta=0x8B008B,$/;"	e	enum:CRGB::__anon45
DarkOliveGreen	.\lib\FastLED\pixeltypes.h	/^        DarkOliveGreen=0x556B2F,$/;"	e	enum:CRGB::__anon45
DarkOrange	.\lib\FastLED\pixeltypes.h	/^        DarkOrange=0xFF8C00,$/;"	e	enum:CRGB::__anon45
DarkOrchid	.\lib\FastLED\pixeltypes.h	/^        DarkOrchid=0x9932CC,$/;"	e	enum:CRGB::__anon45
DarkRed	.\lib\FastLED\pixeltypes.h	/^        DarkRed=0x8B0000,$/;"	e	enum:CRGB::__anon45
DarkSalmon	.\lib\FastLED\pixeltypes.h	/^        DarkSalmon=0xE9967A,$/;"	e	enum:CRGB::__anon45
DarkSeaGreen	.\lib\FastLED\pixeltypes.h	/^        DarkSeaGreen=0x8FBC8F,$/;"	e	enum:CRGB::__anon45
DarkSlateBlue	.\lib\FastLED\pixeltypes.h	/^        DarkSlateBlue=0x483D8B,$/;"	e	enum:CRGB::__anon45
DarkSlateGray	.\lib\FastLED\pixeltypes.h	/^        DarkSlateGray=0x2F4F4F,$/;"	e	enum:CRGB::__anon45
DarkSlateGrey	.\lib\FastLED\pixeltypes.h	/^        DarkSlateGrey=0x2F4F4F,$/;"	e	enum:CRGB::__anon45
DarkTurquoise	.\lib\FastLED\pixeltypes.h	/^        DarkTurquoise=0x00CED1,$/;"	e	enum:CRGB::__anon45
DarkViolet	.\lib\FastLED\pixeltypes.h	/^        DarkViolet=0x9400D3,$/;"	e	enum:CRGB::__anon45
Deactivate_Scroll_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	54;"	d
DeepPink	.\lib\FastLED\pixeltypes.h	/^        DeepPink=0xFF1493,$/;"	e	enum:CRGB::__anon45
DeepSkyBlue	.\lib\FastLED\pixeltypes.h	/^        DeepSkyBlue=0x00BFFF,$/;"	e	enum:CRGB::__anon45
DimGray	.\lib\FastLED\pixeltypes.h	/^        DimGray=0x696969,$/;"	e	enum:CRGB::__anon45
DimGrey	.\lib\FastLED\pixeltypes.h	/^        DimGrey=0x696969,$/;"	e	enum:CRGB::__anon45
DirectSunlight	.\lib\FastLED\color.h	/^   DirectSunlight=0xFFFFFF \/* 6000 K, 255, 255, 255 *\/,$/;"	e	enum:__anon25
DodgerBlue	.\lib\FastLED\pixeltypes.h	/^        DodgerBlue=0x1E90FF,$/;"	e	enum:CRGB::__anon45
Dummy_Byte_0x00	.\lib\GOFi2cOLED\GOFi2cOLED.h	96;"	d
Dummy_Byte_0xFF	.\lib\GOFi2cOLED\GOFi2cOLED.h	97;"	d
EASE8_C	.\lib\FastLED\lib8tion.h	209;"	d
EBlockChipsets	.\lib\FastLED\FastLED.h	/^enum EBlockChipsets {$/;"	g
ECont	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum ECont { CONT, NOCONT };$/;"	g	class:ARMHardwareSPIOutput
ECont	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum ECont { CONT, NOCONT };$/;"	g	class:ARMHardwareSPIOutput
EDitherMode	.\lib\FastLED\controller.h	/^typedef uint8_t EDitherMode;$/;"	t
ELast	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum ELast { NOTLAST, LAST };$/;"	g	class:ARMHardwareSPIOutput
ELast	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum ELast { NOTLAST, LAST };$/;"	g	class:ARMHardwareSPIOutput
ENDLOOP5	.\lib\FastLED\platforms\avr\clockless_trinket.h	317;"	d
EOrder	.\lib\FastLED\pixeltypes.h	/^enum EOrder {$/;"	g
ESM	.\lib\FastLED\FastLED.h	/^enum ESM { SMART_MATRIX };$/;"	g
ESP32	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	4;"	d
ESP8266	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	4;"	d
ESPIChipsets	.\lib\FastLED\FastLED.h	/^enum ESPIChipsets {$/;"	g
ESP_ADJUST	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	79;"	d
ESP_ADJUST	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	70;"	d
ESP_ADJUST2	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	80;"	d
ESP_ADJUST2	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	71;"	d
EVERY_N_BSECONDS	.\lib\FastLED\lib8tion.h	1111;"	d
EVERY_N_BSECONDS_I	.\lib\FastLED\lib8tion.h	1112;"	d
EVERY_N_HOURS	.\lib\FastLED\lib8tion.h	1115;"	d
EVERY_N_HOURS_I	.\lib\FastLED\lib8tion.h	1116;"	d
EVERY_N_MILLIS	.\lib\FastLED\lib8tion.h	1107;"	d
EVERY_N_MILLISECONDS	.\lib\FastLED\lib8tion.h	1119;"	d
EVERY_N_MILLISECONDS_I	.\lib\FastLED\lib8tion.h	1120;"	d
EVERY_N_MILLIS_I	.\lib\FastLED\lib8tion.h	1108;"	d
EVERY_N_MINUTES	.\lib\FastLED\lib8tion.h	1113;"	d
EVERY_N_MINUTES_I	.\lib\FastLED\lib8tion.h	1114;"	d
EVERY_N_SECONDS	.\lib\FastLED\lib8tion.h	1109;"	d
EVERY_N_SECONDS_I	.\lib\FastLED\lib8tion.h	1110;"	d
EWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	g	class:ARMHardwareSPIOutput
EWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	g	class:ARMHardwareSPIOutput
Enemy	.\src\Enemy.h	/^Enemy::Enemy(int position, CRGB::HTMLColorCode color, char* type) : Entity(position, color, type) {$/;"	f	class:Enemy
Enemy	.\src\Enemy.h	/^class Enemy: public Entity {$/;"	c
Entire_Display_On_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	42;"	d
Entire_Display_On_Resume_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	41;"	d
Entity	.\src\Entity.h	/^Entity::Entity() {$/;"	f	class:Entity
Entity	.\src\Entity.h	/^Entity::Entity(int position, CRGB::HTMLColorCode color, char* type) {$/;"	f	class:Entity
Entity	.\src\Entity.h	/^class Entity {$/;"	c
ExpandedNodes	.\src\.vs\VSWorkspaceState.json	/^  "ExpandedNodes": [$/;"	f
F	.\lib\FastLED\lib8tion.h	/^  T f:F;$/;"	m	class:q
F	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	57;"	d
F	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	57;"	d
FADE	.\lib\FastLED\noise.cpp	60;"	d	file:
FADE	.\lib\FastLED\noise.cpp	63;"	d	file:
FADE_16	.\lib\FastLED\noise.cpp	57;"	d	file:
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	18;"	d
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	17;"	d
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	17;"	d
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	20;"	d
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	31;"	d
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	22;"	d
FASTLED_ACCURATE_CLOCK	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	27;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	14;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	13;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	13;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	16;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	40;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	27;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	18;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	23;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	23;"	d
FASTLED_ALLOW_INTERRUPTS	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	23;"	d
FASTLED_ALL_PINS_HARDWARE_SPI	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	7;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	5;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	5;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	5;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	5;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	14;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	5;"	d
FASTLED_ARM	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	10;"	d
FASTLED_ARM_M0	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	15;"	d
FASTLED_ARM_M0_PLUS	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	6;"	d
FASTLED_ARM_M0_PLUS	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	6;"	d
FASTLED_AVR	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	4;"	d
FASTLED_BLEND_FIXED	.\lib\FastLED\fastled_config.h	46;"	d
FASTLED_ESP32	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	7;"	d
FASTLED_ESP32_RAW_PIN_ORDER	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	30;"	d
FASTLED_ESP8266	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	7;"	d
FASTLED_ESP8266_NODEMCU_PIN_ORDER	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	32;"	d
FASTLED_ESP8266_RAW_PIN_ORDER	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	34;"	d
FASTLED_ESP_IO	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^struct FASTLED_ESP_IO {$/;"	s
FASTLED_ESP_IO	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^struct FASTLED_ESP_IO {$/;"	s
FASTLED_HAS_BLOCKLESS	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	7;"	d
FASTLED_HAS_BLOCKLESS	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	7;"	d
FASTLED_HAS_BLOCKLESS	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	17;"	d
FASTLED_HAS_BLOCKLESS	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	4;"	d
FASTLED_HAS_BLOCKLESS	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	4;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	6;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	10;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	10;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	6;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	7;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	10;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	15;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	8;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\avr\clockless_trinket.h	90;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	17;"	d
FASTLED_HAS_CLOCKLESS	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	17;"	d
FASTLED_HAS_MILLIS	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	10;"	d
FASTLED_HAS_MILLIS	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	10;"	d
FASTLED_HAS_PRAGMA_MESSAGE	.\lib\FastLED\FastLED.h	11;"	d
FASTLED_INCLUDE_PGMSPACE	.\lib\FastLED\fastled_progmem.h	26;"	d
FASTLED_INTERNAL	.\lib\FastLED\FastLED.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\bitswap.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\colorpalettes.cpp	3;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\colorutils.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\hsv2rgb.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\lib8tion.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\noise.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\power_mgt.cpp	1;"	d	file:
FASTLED_INTERNAL	.\lib\FastLED\wiring.cpp	1;"	d	file:
FASTLED_INTERRUPT_RETRY_COUNT	.\lib\FastLED\fastled_config.h	52;"	d
FASTLED_NAMESPACE_BEGIN	.\lib\FastLED\led_sysdefs.h	36;"	d
FASTLED_NAMESPACE_BEGIN	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	6;"	d
FASTLED_NAMESPACE_END	.\lib\FastLED\led_sysdefs.h	37;"	d
FASTLED_NAMESPACE_END	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	7;"	d
FASTLED_NAMESPACE_END	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	101;"	d
FASTLED_NEEDS_YIELD	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	55;"	d
FASTLED_NEEDS_YIELD	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	61;"	d
FASTLED_NO_PINMAP	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	9;"	d
FASTLED_NO_PINMAP	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	43;"	d
FASTLED_RAND16_13849	.\lib\FastLED\lib8tion\random8.h	13;"	d
FASTLED_RAND16_2053	.\lib\FastLED\lib8tion\random8.h	12;"	d
FASTLED_SCALE8_FIXED	.\lib\FastLED\fastled_config.h	37;"	d
FASTLED_SLOW_CLOCK_ADJUST	.\lib\FastLED\platforms\avr\clockless_trinket.h	20;"	d
FASTLED_SPI_BYTE_ONLY	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	12;"	d
FASTLED_SPI_BYTE_ONLY	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	12;"	d
FASTLED_SPI_BYTE_ONLY	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	10;"	d
FASTLED_TEENSY3	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	4;"	d
FASTLED_TEENSY3	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	4;"	d
FASTLED_TEENSYLC	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	4;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	42;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	42;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	44;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	36;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	36;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\avr\fastled_avr.h	10;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	33;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	19;"	d
FASTLED_USE_PROGMEM	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	19;"	d
FASTLED_USING_NAMESPACE	.\lib\FastLED\led_sysdefs.h	38;"	d
FASTLED_USING_NAMESPACE	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	8;"	d
FASTLED_VERSION	.\lib\FastLED\FastLED.h	14;"	d
FIXFRAC8	.\lib\FastLED\hsv2rgb.cpp	518;"	d	file:
FIX_BITS	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	6;"	d
FLAG_START_BIT	.\lib\FastLED\fastspi_types.h	27;"	d
FL_ALIGN_PROGMEM	.\lib\FastLED\fastled_progmem.h	73;"	d
FL_NOP	.\lib\FastLED\fastled_delay.h	38;"	d
FL_NOP	.\lib\FastLED\fastled_delay.h	41;"	d
FL_NOP2	.\lib\FastLED\fastled_delay.h	39;"	d
FL_NOP2	.\lib\FastLED\fastled_delay.h	42;"	d
FL_NRF_GPIO	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	70;"	d
FL_NRF_GPIO_BASE	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	69;"	d
FL_NRF_GPIO_Type	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^} FL_NRF_GPIO_Type;$/;"	t	typeref:struct:__anon51
FL_PGM_READ_BYTE_NEAR	.\lib\FastLED\fastled_progmem.h	39;"	d
FL_PGM_READ_DWORD_NEAR	.\lib\FastLED\fastled_progmem.h	41;"	d
FL_PGM_READ_WORD_NEAR	.\lib\FastLED\fastled_progmem.h	40;"	d
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 CloudColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 ForestColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 HeatColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 LavaColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 OceanColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 PartyColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 RainbowColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\colorpalettes.cpp	/^extern const TProgmemRGBPalette16 RainbowStripeColors_p FL_PROGMEM =$/;"	v
FL_PROGMEM	.\lib\FastLED\fastled_progmem.h	33;"	d
FMUL	.\lib\FastLED\chipsets.h	371;"	d
FORCE_REFERENCE	.\lib\FastLED\hsv2rgb.cpp	270;"	d	file:
FORCE_REFERENCE	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	70;"	d
FORWARD_HUES	.\lib\FastLED\colorutils.h	/^typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;$/;"	e	enum:__anon26
F_CPU	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	18;"	d
F_CPU	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	45;"	d
F_CPU_MHZ	.\lib\FastLED\fastled_delay.h	122;"	d
FairyLight	.\lib\FastLED\pixeltypes.h	/^        FairyLight=0xFFE42D,$/;"	e	enum:CRGB::__anon45
FairyLightNCC	.\lib\FastLED\pixeltypes.h	/^        FairyLightNCC=0xFF9D2A$/;"	e	enum:CRGB::__anon45
FastLED	.\lib\FastLED\FastLED.cpp	/^CFastLED FastLED;$/;"	v
FastPin	.\lib\FastLED\fastpin.h	/^template<uint8_t PIN> class FastPin {$/;"	c
FastPinBB	.\lib\FastLED\fastpin.h	/^template<uint8_t PIN> class FastPinBB : public FastPin<PIN> {};$/;"	c
FastSPI_LED	.\lib\FastLED\FastLED.h	563;"	d
FastSPI_LED2	.\lib\FastLED\FastLED.h	564;"	d
Fastwire	.\lib\I2Cdev\I2Cdev.h	/^    class Fastwire {$/;"	c
FireBrick	.\lib\FastLED\pixeltypes.h	/^        FireBrick=0xB22222,$/;"	e	enum:CRGB::__anon45
FloralWhite	.\lib\FastLED\pixeltypes.h	/^        FloralWhite=0xFFFAF0,$/;"	e	enum:CRGB::__anon45
ForestGreen	.\lib\FastLED\pixeltypes.h	/^        ForestGreen=0x228B22,$/;"	e	enum:CRGB::__anon45
Fuchsia	.\lib\FastLED\pixeltypes.h	/^        Fuchsia=0xFF00FF,$/;"	e	enum:CRGB::__anon45
FullSpectrumFluorescent	.\lib\FastLED\color.h	/^   FullSpectrumFluorescent=0xFFF4F2 \/* 0 K, 255, 244, 242 *\/,$/;"	e	enum:__anon25
GBR	.\lib\FastLED\pixeltypes.h	/^	GBR=0120,$/;"	e	enum:EOrder
GET_MILLIS	.\lib\FastLED\lib8tion.h	875;"	d
GET_MILLIS	.\lib\FastLED\lib8tion.h	878;"	d
GOFi2cOLED	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^class GOFi2cOLED : public  Print{$/;"	c
GOFi2cOLED_Command_Mode	.\lib\GOFi2cOLED\GOFi2cOLED.h	36;"	d
GOFi2cOLED_Data_Mode	.\lib\GOFi2cOLED\GOFi2cOLED.h	37;"	d
GOFi2cOLED_Display_Off_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	45;"	d
GOFi2cOLED_Display_On_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	46;"	d
GOFi2cOLED_HEIGHT	.\lib\GOFi2cOLED\GOFi2cOLED.h	34;"	d
GOFi2cOLED_Inverse_Display_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	44;"	d
GOFi2cOLED_Normal_Display_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	43;"	d
GOFi2cOLED_WIDTH	.\lib\GOFi2cOLED\GOFi2cOLED.h	33;"	d
GOFi2cOLED_data_H	.\lib\GOFi2cOLED\GOFi2cOLED.h	19;"	d
GRB	.\lib\FastLED\pixeltypes.h	/^	GRB=0102,$/;"	e	enum:EOrder
GW6205	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GW6205 : public GW6205Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
GW6205Controller400Khz	.\lib\FastLED\chipsets.h	/^class GW6205Controller400Khz : public ClocklessController<DATA_PIN, 6 * FMUL, 7 * FMUL, 6 * FMUL, RGB_ORDER, 4> {};$/;"	c
GW6205Controller400Khz	.\lib\FastLED\chipsets.h	/^class GW6205Controller400Khz : public ClocklessController<DATA_PIN, NS(800), NS(800), NS(800), RGB_ORDER, 4> {};$/;"	c
GW6205Controller800Khz	.\lib\FastLED\chipsets.h	/^class GW6205Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 4 * FMUL, 4 * FMUL, RGB_ORDER, 4> {};$/;"	c
GW6205Controller800Khz	.\lib\FastLED\chipsets.h	/^class GW6205Controller800Khz : public ClocklessController<DATA_PIN, NS(400), NS(400), NS(400), RGB_ORDER, 4> {};$/;"	c
GW6205_400	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GW6205_400 : public GW6205Controller400Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
Gainsboro	.\lib\FastLED\pixeltypes.h	/^        Gainsboro=0xDCDCDC,$/;"	e	enum:CRGB::__anon45
GhostWhite	.\lib\FastLED\pixeltypes.h	/^        GhostWhite=0xF8F8FF,$/;"	e	enum:CRGB::__anon45
Gold	.\lib\FastLED\pixeltypes.h	/^        Gold=0xFFD700,$/;"	e	enum:CRGB::__anon45
Goldenrod	.\lib\FastLED\pixeltypes.h	/^        Goldenrod=0xDAA520,$/;"	e	enum:CRGB::__anon45
Gray	.\lib\FastLED\pixeltypes.h	/^        Gray=0x808080,$/;"	e	enum:CRGB::__anon45
Green	.\lib\FastLED\pixeltypes.h	/^        Green=0x008000,$/;"	e	enum:CRGB::__anon45
GreenYellow	.\lib\FastLED\pixeltypes.h	/^        GreenYellow=0xADFF2F,$/;"	e	enum:CRGB::__anon45
Grey	.\lib\FastLED\pixeltypes.h	/^        Grey=0x808080,$/;"	e	enum:CRGB::__anon45
GrowLightFluorescent	.\lib\FastLED\color.h	/^   GrowLightFluorescent=0xFFEFF7 \/* 0 K, 255, 239, 247 *\/,$/;"	e	enum:__anon25
HAS_DMX_SERIAL	.\lib\FastLED\dmx.h	62;"	d
HAS_DMX_SIMPLE	.\lib\FastLED\dmx.h	8;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\d21\fastpin_arm_d21.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\k20\fastpin_arm_k20.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\k66\fastpin_arm_k66.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\kl26\fastpin_arm_kl26.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	115;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\sam\fastpin_arm_sam.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\stm32\fastpin_arm_stm32.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\avr\fastpin_avr.h	9;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	90;"	d
HAS_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	99;"	d
HAS_PIXIE	.\lib\FastLED\chipsets.h	22;"	d
HAS_PORTDC	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	11;"	d
HAS_PORTDC	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	12;"	d
HEIGHT	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  WIDTH, HEIGHT;   \/\/ this is the 'raw' display w\/h - never changes$/;"	m	class:GOFi2cOLED
HI1	.\lib\FastLED\platforms\avr\clockless_trinket.h	201;"	d
HI2	.\lib\FastLED\platforms\arm\common\m0clockless.h	212;"	d
HORIZONTAL_MODE	.\lib\GOFi2cOLED\GOFi2cOLED.h	59;"	d
HSVHue	.\lib\FastLED\pixeltypes.h	/^} HSVHue;$/;"	t	typeref:enum:__anon39
HSV_SECTION_3	.\lib\FastLED\hsv2rgb.cpp	69;"	d	file:
HSV_SECTION_6	.\lib\FastLED\hsv2rgb.cpp	68;"	d	file:
HTMLColorCode	.\lib\FastLED\pixeltypes.h	/^    } HTMLColorCode;$/;"	t	struct:CRGB	typeref:enum:CRGB::__anon45
HUE_AQUA	.\lib\FastLED\pixeltypes.h	/^    HUE_AQUA = 128,$/;"	e	enum:__anon39
HUE_BLUE	.\lib\FastLED\pixeltypes.h	/^    HUE_BLUE = 160,$/;"	e	enum:__anon39
HUE_GREEN	.\lib\FastLED\pixeltypes.h	/^    HUE_GREEN = 96,$/;"	e	enum:__anon39
HUE_MAX	.\lib\FastLED\hsv2rgb.h	49;"	d
HUE_MAX_RAINBOW	.\lib\FastLED\hsv2rgb.h	20;"	d
HUE_MAX_SPECTRUM	.\lib\FastLED\hsv2rgb.h	33;"	d
HUE_ORANGE	.\lib\FastLED\pixeltypes.h	/^    HUE_ORANGE = 32,$/;"	e	enum:__anon39
HUE_PINK	.\lib\FastLED\pixeltypes.h	/^    HUE_PINK = 224$/;"	e	enum:__anon39
HUE_PURPLE	.\lib\FastLED\pixeltypes.h	/^    HUE_PURPLE = 192,$/;"	e	enum:__anon39
HUE_RED	.\lib\FastLED\pixeltypes.h	/^    HUE_RED = 0,$/;"	e	enum:__anon39
HUE_YELLOW	.\lib\FastLED\pixeltypes.h	/^    HUE_YELLOW = 64,$/;"	e	enum:__anon39
Halogen	.\lib\FastLED\color.h	/^   Halogen=0xFFF1E0 \/* 3200 K, 255, 241, 224 *\/,$/;"	e	enum:__anon25
HeatColor	.\lib\FastLED\colorutils.cpp	/^CRGB HeatColor( uint8_t temperature)$/;"	f
HighNoonSun	.\lib\FastLED\color.h	/^   HighNoonSun=0xFFFFFB \/* 5400 K, 255, 255, 251 *\/,$/;"	e	enum:__anon25
HighPressureSodium	.\lib\FastLED\color.h	/^   HighPressureSodium=0xFFB74C \/* 0 K, 255, 183, 76 *\/,$/;"	e	enum:__anon25
Honeydew	.\lib\FastLED\pixeltypes.h	/^        Honeydew=0xF0FFF0,$/;"	e	enum:CRGB::__anon45
HotPink	.\lib\FastLED\pixeltypes.h	/^        HotPink=0xFF69B4,$/;"	e	enum:CRGB::__anon45
I	.\lib\FastLED\lib8tion.h	/^  T i:I;$/;"	m	class:q
I2CDEV_ARDUINO_WIRE	.\lib\I2Cdev\I2Cdev.h	62;"	d
I2CDEV_BUILTIN_FASTWIRE	.\lib\I2Cdev\I2Cdev.h	65;"	d
I2CDEV_BUILTIN_NBWIRE	.\lib\I2Cdev\I2Cdev.h	63;"	d
I2CDEV_DEFAULT_READ_TIMEOUT	.\lib\I2Cdev\I2Cdev.h	88;"	d
I2CDEV_I2CMASTER_LIBRARY	.\lib\I2Cdev\I2Cdev.h	66;"	d
I2CDEV_IMPLEMENTATION	.\lib\I2Cdev\I2Cdev.h	52;"	d
I2CDEV_IMPLEMENTATION_WARNINGS	.\lib\I2Cdev\I2Cdev.h	57;"	d
I2Cdev	.\lib\I2Cdev\I2Cdev.cpp	/^I2Cdev::I2Cdev() {$/;"	f	class:I2Cdev
I2Cdev	.\lib\I2Cdev\I2Cdev.h	/^class I2Cdev {$/;"	c
IDATA2	.\lib\FastLED\platforms\avr\clockless_trinket.h	281;"	d
IDATACLC3	.\lib\FastLED\platforms\avr\clockless_trinket.h	282;"	d
IEEE754binary32_t	.\lib\FastLED\lib8tion.h	/^} IEEE754binary32_t;$/;"	t	typeref:union:__anon30
IN	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __I  uint32_t  IN;                                \/*!< Read GPIO port.                                                       *\/$/;"	m	struct:__anon51
INCLEDS3	.\lib\FastLED\platforms\arm\common\m0clockless.h	224;"	d
INNER_SEI	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	12;"	d
INNER_SEI	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	16;"	d
INSTANTIATE_EVERY_N_TIME_PERIODS	.\lib\FastLED\lib8tion.h	1035;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	9;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	8;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	8;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	9;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	22;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	13;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	7;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	24;"	d
INTERRUPT_THRESHOLD	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	24;"	d
ISR	.\lib\toneAC\toneAC.cpp	/^ISR(TIMER1_COMPA_vect) { \/\/ Timer interrupt vector.$/;"	f
IndianRed	.\lib\FastLED\pixeltypes.h	/^        IndianRed=0xCD5C5C,$/;"	e	enum:CRGB::__anon45
Indigo	.\lib\FastLED\pixeltypes.h	/^        Indigo=0x4B0082,$/;"	e	enum:CRGB::__anon45
InlineBlockClocklessController	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InlineBlockClocklessController	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, LANE_MASK> {$/;"	c
InlineBlockClocklessController	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InlineBlockClocklessController	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InlineBlockClocklessController	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InputPin	.\lib\FastLED\fastpin.h	/^	InputPin(int pin) : Pin(pin) { setInput(); }$/;"	f	class:InputPin
InputPin	.\lib\FastLED\fastpin.h	/^class InputPin : public Pin {$/;"	c
Ivory	.\lib\FastLED\pixeltypes.h	/^        Ivory=0xFFFFF0,$/;"	e	enum:CRGB::__anon45
JMPLOOP2	.\lib\FastLED\platforms\avr\clockless_trinket.h	312;"	d
K170	.\lib\FastLED\hsv2rgb.cpp	275;"	d	file:
K171	.\lib\FastLED\hsv2rgb.cpp	274;"	d	file:
K255	.\lib\FastLED\hsv2rgb.cpp	273;"	d	file:
K85	.\lib\FastLED\hsv2rgb.cpp	276;"	d	file:
KINETISK_SPI0	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	14;"	d
KINETISK_SPI0	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	22;"	d
Khaki	.\lib\FastLED\pixeltypes.h	/^        Khaki=0xF0E68C,$/;"	e	enum:CRGB::__anon45
LANE_MASK	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	14;"	d
LAST	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
LAST	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
LAST_PIN	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	10;"	d
LD2	.\lib\FastLED\platforms\avr\clockless_trinket.h	208;"	d
LDSCL4	.\lib\FastLED\platforms\avr\clockless_trinket.h	210;"	d
LEDColorCorrection	.\lib\FastLED\color.h	/^} LEDColorCorrection;$/;"	t	typeref:enum:__anon24
LEDS	.\lib\FastLED\FastLED.h	566;"	d
LED_NUM	.\src\Player.h	4;"	d
LED_TIMER	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	8;"	d
LERP	.\lib\FastLED\noise.cpp	61;"	d	file:
LERP	.\lib\FastLED\noise.cpp	64;"	d	file:
LIB8STATIC	.\lib\FastLED\lib8tion.h	178;"	d
LIB8STATIC_ALWAYS_INLINE	.\lib\FastLED\lib8tion.h	179;"	d
LIB8_ATTINY	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	54;"	d
LIGHTEFFECTS_H	.\src\LightEffects.h	2;"	d
LINEARBLEND	.\lib\FastLED\colorutils.h	/^typedef enum { NOBLEND=0, LINEARBLEND=1 } TBlendType;$/;"	e	enum:__anon29
LO1	.\lib\FastLED\platforms\avr\clockless_trinket.h	203;"	d
LO2	.\lib\FastLED\platforms\arm\common\m0clockless.h	217;"	d
LOADDITHER7	.\lib\FastLED\platforms\arm\common\m0clockless.h	219;"	d
LOADLEDS3	.\lib\FastLED\platforms\arm\common\m0clockless.h	215;"	d
LONGEST_HUES	.\lib\FastLED\colorutils.h	/^typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;$/;"	e	enum:__anon26
LOOP	.\lib\FastLED\platforms\arm\common\m0clockless.h	211;"	d
LOOP	.\lib\FastLED\platforms\avr\clockless_trinket.h	276;"	d
LPD1886	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class LPD1886 : public LPD1886Controller1250Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
LPD1886Controller1250Khz	.\lib\FastLED\chipsets.h	/^class LPD1886Controller1250Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 3 * FMUL, 2 * FMUL, RGB_ORDER, 4> {};$/;"	c
LPD1886Controller1250Khz	.\lib\FastLED\chipsets.h	/^class LPD1886Controller1250Khz : public ClocklessController<DATA_PIN, NS(200), NS(400), NS(200), RGB_ORDER, 4> {};$/;"	c
LPD1886Controller1250Khz_8bit	.\lib\FastLED\chipsets.h	/^class LPD1886Controller1250Khz_8bit : public ClocklessController<DATA_PIN, 2 * FMUL, 3 * FMUL, 2 * FMUL, RGB_ORDER> {};$/;"	c
LPD1886Controller1250Khz_8bit	.\lib\FastLED\chipsets.h	/^class LPD1886Controller1250Khz_8bit : public ClocklessController<DATA_PIN, NS(200), NS(400), NS(200), RGB_ORDER> {};$/;"	c
LPD1886_8BIT	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class LPD1886_8BIT : public LPD1886Controller1250Khz_8bit<DATA_PIN, RGB_ORDER> {};$/;"	c
LPD8806	.\lib\FastLED\FastLED.h	/^	LPD8806,$/;"	e	enum:ESPIChipsets
LPD8806Controller	.\lib\FastLED\chipsets.h	/^	LPD8806Controller()  {}$/;"	f	class:LPD8806Controller
LPD8806Controller	.\lib\FastLED\chipsets.h	/^class LPD8806Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
LPD8806_ADJUST	.\lib\FastLED\chipsets.h	/^	class LPD8806_ADJUST {$/;"	c	class:LPD8806Controller
Lavender	.\lib\FastLED\pixeltypes.h	/^        Lavender=0xE6E6FA,$/;"	e	enum:CRGB::__anon45
LavenderBlush	.\lib\FastLED\pixeltypes.h	/^        LavenderBlush=0xFFF0F5,$/;"	e	enum:CRGB::__anon45
LawnGreen	.\lib\FastLED\pixeltypes.h	/^        LawnGreen=0x7CFC00,$/;"	e	enum:CRGB::__anon45
Left_Horizontal_Scroll_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	50;"	d
LemonChiffon	.\lib\FastLED\pixeltypes.h	/^        LemonChiffon=0xFFFACD,$/;"	e	enum:CRGB::__anon45
LightBlue	.\lib\FastLED\pixeltypes.h	/^        LightBlue=0xADD8E6,$/;"	e	enum:CRGB::__anon45
LightCoral	.\lib\FastLED\pixeltypes.h	/^        LightCoral=0xF08080,$/;"	e	enum:CRGB::__anon45
LightCyan	.\lib\FastLED\pixeltypes.h	/^        LightCyan=0xE0FFFF,$/;"	e	enum:CRGB::__anon45
LightEffects	.\src\LightEffects.cpp	/^LightEffects::LightEffects() {$/;"	f	class:LightEffects
LightEffects	.\src\LightEffects.h	/^class LightEffects {$/;"	c
LightGoldenrodYellow	.\lib\FastLED\pixeltypes.h	/^        LightGoldenrodYellow=0xFAFAD2,$/;"	e	enum:CRGB::__anon45
LightGreen	.\lib\FastLED\pixeltypes.h	/^        LightGreen=0x90EE90,$/;"	e	enum:CRGB::__anon45
LightGrey	.\lib\FastLED\pixeltypes.h	/^        LightGrey=0xD3D3D3,$/;"	e	enum:CRGB::__anon45
LightPink	.\lib\FastLED\pixeltypes.h	/^        LightPink=0xFFB6C1,$/;"	e	enum:CRGB::__anon45
LightSalmon	.\lib\FastLED\pixeltypes.h	/^        LightSalmon=0xFFA07A,$/;"	e	enum:CRGB::__anon45
LightSeaGreen	.\lib\FastLED\pixeltypes.h	/^        LightSeaGreen=0x20B2AA,$/;"	e	enum:CRGB::__anon45
LightSkyBlue	.\lib\FastLED\pixeltypes.h	/^        LightSkyBlue=0x87CEFA,$/;"	e	enum:CRGB::__anon45
LightSlateGray	.\lib\FastLED\pixeltypes.h	/^        LightSlateGray=0x778899,$/;"	e	enum:CRGB::__anon45
LightSlateGrey	.\lib\FastLED\pixeltypes.h	/^        LightSlateGrey=0x778899,$/;"	e	enum:CRGB::__anon45
LightSteelBlue	.\lib\FastLED\pixeltypes.h	/^        LightSteelBlue=0xB0C4DE,$/;"	e	enum:CRGB::__anon45
LightYellow	.\lib\FastLED\pixeltypes.h	/^        LightYellow=0xFFFFE0,$/;"	e	enum:CRGB::__anon45
Lime	.\lib\FastLED\pixeltypes.h	/^        Lime=0x00FF00,$/;"	e	enum:CRGB::__anon45
LimeGreen	.\lib\FastLED\pixeltypes.h	/^        LimeGreen=0x32CD32,$/;"	e	enum:CRGB::__anon45
Linen	.\lib\FastLED\pixeltypes.h	/^        Linen=0xFAF0E6,$/;"	e	enum:CRGB::__anon45
Lines	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	} Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anon46
Lines	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	} Lines;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:union:SixteenWayInlineBlockClocklessController::__anon47
Lines	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  } Lines;$/;"	t	class:COctoWS2811Controller	typeref:union:COctoWS2811Controller::__anon48
Lines	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	} Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anon49
Lines	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	} Lines;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:union:SixteenWayInlineBlockClocklessController::__anon50
Lines	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^} Lines;$/;"	t	typeref:union:__anon52
Lines	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    } Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anon53
Lines	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^	} Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anon54
M0ClocklessData	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^struct M0ClocklessData {$/;"	s
M0_ASM_ARGS	.\lib\FastLED\platforms\arm\common\m0clockless.h	182;"	d
MASK_SKIP_BITS	.\lib\FastLED\fastspi_types.h	28;"	d
MAX	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	37;"	d
MAX	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	45;"	d
MAX_DATA_RATE	.\lib\FastLED\fastspi_types.h	39;"	d
MAX_LIKELY_UPDATE_RATE_HZ	.\lib\FastLED\controller.h	244;"	d
MAX_PIN	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	105;"	d
MAX_PIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	49;"	d
MAX_PIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	62;"	d
MAX_PIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	83;"	d
MEDIAN_MAX_SIZE	.\lib\RunningMedian\RunningMedian.h	38;"	d
MEDIAN_MIN_SIZE	.\lib\RunningMedian\RunningMedian.h	37;"	d
MIN	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	15;"	d
MIN	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	18;"	d
MIN	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	7;"	d
MIN	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	8;"	d
MIN_ACCEPTABLE_DITHER_RATE_HZ	.\lib\FastLED\controller.h	245;"	d
MIN_DELAY	.\lib\FastLED\fastspi_bitbang.h	116;"	d
MOV1	.\lib\FastLED\platforms\avr\clockless_trinket.h	287;"	d
MOVEMENTSPEED	.\src\Player.h	7;"	d
MOV_ADDDE04	.\lib\FastLED\platforms\avr\clockless_trinket.h	304;"	d
MOV_ADDDE14	.\lib\FastLED\platforms\avr\clockless_trinket.h	306;"	d
MOV_NEGD04	.\lib\FastLED\platforms\avr\clockless_trinket.h	303;"	d
MOV_NEGD14	.\lib\FastLED\platforms\avr\clockless_trinket.h	305;"	d
MOV_NEGD24	.\lib\FastLED\platforms\avr\clockless_trinket.h	307;"	d
MPU6050	.\lib\MPU6050\MPU6050.cpp	/^MPU6050::MPU6050() {$/;"	f	class:MPU6050
MPU6050	.\lib\MPU6050\MPU6050.cpp	/^MPU6050::MPU6050(uint8_t address) {$/;"	f	class:MPU6050
MPU6050	.\lib\MPU6050\MPU6050.h	/^class MPU6050 {$/;"	c
MPU6050_ACCEL_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	222;"	d
MPU6050_ACCEL_FS_16	.\lib\MPU6050\MPU6050.h	209;"	d
MPU6050_ACCEL_FS_2	.\lib\MPU6050\MPU6050.h	206;"	d
MPU6050_ACCEL_FS_4	.\lib\MPU6050\MPU6050.h	207;"	d
MPU6050_ACCEL_FS_8	.\lib\MPU6050\MPU6050.h	208;"	d
MPU6050_ACONFIG_ACCEL_HPF_BIT	.\lib\MPU6050\MPU6050.h	203;"	d
MPU6050_ACONFIG_ACCEL_HPF_LENGTH	.\lib\MPU6050\MPU6050.h	204;"	d
MPU6050_ACONFIG_AFS_SEL_BIT	.\lib\MPU6050\MPU6050.h	201;"	d
MPU6050_ACONFIG_AFS_SEL_LENGTH	.\lib\MPU6050\MPU6050.h	202;"	d
MPU6050_ACONFIG_XA_ST_BIT	.\lib\MPU6050\MPU6050.h	198;"	d
MPU6050_ACONFIG_YA_ST_BIT	.\lib\MPU6050\MPU6050.h	199;"	d
MPU6050_ACONFIG_ZA_ST_BIT	.\lib\MPU6050\MPU6050.h	200;"	d
MPU6050_ADDRESS_AD0_HIGH	.\lib\MPU6050\MPU6050.h	46;"	d
MPU6050_ADDRESS_AD0_LOW	.\lib\MPU6050\MPU6050.h	45;"	d
MPU6050_BANKSEL_CFG_USER_BANK_BIT	.\lib\MPU6050\MPU6050.h	388;"	d
MPU6050_BANKSEL_MEM_SEL_BIT	.\lib\MPU6050\MPU6050.h	389;"	d
MPU6050_BANKSEL_MEM_SEL_LENGTH	.\lib\MPU6050\MPU6050.h	390;"	d
MPU6050_BANKSEL_PRFTCH_EN_BIT	.\lib\MPU6050\MPU6050.h	387;"	d
MPU6050_CFG_DLPF_CFG_BIT	.\lib\MPU6050\MPU6050.h	170;"	d
MPU6050_CFG_DLPF_CFG_LENGTH	.\lib\MPU6050\MPU6050.h	171;"	d
MPU6050_CFG_EXT_SYNC_SET_BIT	.\lib\MPU6050\MPU6050.h	168;"	d
MPU6050_CFG_EXT_SYNC_SET_LENGTH	.\lib\MPU6050\MPU6050.h	169;"	d
MPU6050_CLOCK_DIV_258	.\lib\MPU6050\MPU6050.h	242;"	d
MPU6050_CLOCK_DIV_267	.\lib\MPU6050\MPU6050.h	241;"	d
MPU6050_CLOCK_DIV_276	.\lib\MPU6050\MPU6050.h	240;"	d
MPU6050_CLOCK_DIV_286	.\lib\MPU6050\MPU6050.h	239;"	d
MPU6050_CLOCK_DIV_296	.\lib\MPU6050\MPU6050.h	238;"	d
MPU6050_CLOCK_DIV_308	.\lib\MPU6050\MPU6050.h	237;"	d
MPU6050_CLOCK_DIV_320	.\lib\MPU6050\MPU6050.h	236;"	d
MPU6050_CLOCK_DIV_333	.\lib\MPU6050\MPU6050.h	235;"	d
MPU6050_CLOCK_DIV_348	.\lib\MPU6050\MPU6050.h	234;"	d
MPU6050_CLOCK_DIV_364	.\lib\MPU6050\MPU6050.h	249;"	d
MPU6050_CLOCK_DIV_381	.\lib\MPU6050\MPU6050.h	248;"	d
MPU6050_CLOCK_DIV_400	.\lib\MPU6050\MPU6050.h	247;"	d
MPU6050_CLOCK_DIV_421	.\lib\MPU6050\MPU6050.h	246;"	d
MPU6050_CLOCK_DIV_444	.\lib\MPU6050\MPU6050.h	245;"	d
MPU6050_CLOCK_DIV_471	.\lib\MPU6050\MPU6050.h	244;"	d
MPU6050_CLOCK_DIV_500	.\lib\MPU6050\MPU6050.h	243;"	d
MPU6050_CLOCK_INTERNAL	.\lib\MPU6050\MPU6050.h	365;"	d
MPU6050_CLOCK_KEEP_RESET	.\lib\MPU6050\MPU6050.h	371;"	d
MPU6050_CLOCK_PLL_EXT19M	.\lib\MPU6050\MPU6050.h	370;"	d
MPU6050_CLOCK_PLL_EXT32K	.\lib\MPU6050\MPU6050.h	369;"	d
MPU6050_CLOCK_PLL_XGYRO	.\lib\MPU6050\MPU6050.h	366;"	d
MPU6050_CLOCK_PLL_YGYRO	.\lib\MPU6050\MPU6050.h	367;"	d
MPU6050_CLOCK_PLL_ZGYRO	.\lib\MPU6050\MPU6050.h	368;"	d
MPU6050_DEFAULT_ADDRESS	.\lib\MPU6050\MPU6050.h	47;"	d
MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT	.\lib\MPU6050\MPU6050.h	326;"	d
MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT	.\lib\MPU6050\MPU6050.h	331;"	d
MPU6050_DELAYCTRL_I2C_SLV1_DLY_EN_BIT	.\lib\MPU6050\MPU6050.h	330;"	d
MPU6050_DELAYCTRL_I2C_SLV2_DLY_EN_BIT	.\lib\MPU6050\MPU6050.h	329;"	d
MPU6050_DELAYCTRL_I2C_SLV3_DLY_EN_BIT	.\lib\MPU6050\MPU6050.h	328;"	d
MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT	.\lib\MPU6050\MPU6050.h	327;"	d
MPU6050_DETECT_ACCEL_ON_DELAY_BIT	.\lib\MPU6050\MPU6050.h	337;"	d
MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH	.\lib\MPU6050\MPU6050.h	338;"	d
MPU6050_DETECT_DECREMENT_1	.\lib\MPU6050\MPU6050.h	345;"	d
MPU6050_DETECT_DECREMENT_2	.\lib\MPU6050\MPU6050.h	346;"	d
MPU6050_DETECT_DECREMENT_4	.\lib\MPU6050\MPU6050.h	347;"	d
MPU6050_DETECT_DECREMENT_RESET	.\lib\MPU6050\MPU6050.h	344;"	d
MPU6050_DETECT_FF_COUNT_BIT	.\lib\MPU6050\MPU6050.h	339;"	d
MPU6050_DETECT_FF_COUNT_LENGTH	.\lib\MPU6050\MPU6050.h	340;"	d
MPU6050_DETECT_MOT_COUNT_BIT	.\lib\MPU6050\MPU6050.h	341;"	d
MPU6050_DETECT_MOT_COUNT_LENGTH	.\lib\MPU6050\MPU6050.h	342;"	d
MPU6050_DHPF_0P63	.\lib\MPU6050\MPU6050.h	215;"	d
MPU6050_DHPF_1P25	.\lib\MPU6050\MPU6050.h	214;"	d
MPU6050_DHPF_2P5	.\lib\MPU6050\MPU6050.h	213;"	d
MPU6050_DHPF_5	.\lib\MPU6050\MPU6050.h	212;"	d
MPU6050_DHPF_HOLD	.\lib\MPU6050\MPU6050.h	216;"	d
MPU6050_DHPF_RESET	.\lib\MPU6050\MPU6050.h	211;"	d
MPU6050_DLPF_BW_10	.\lib\MPU6050\MPU6050.h	187;"	d
MPU6050_DLPF_BW_188	.\lib\MPU6050\MPU6050.h	183;"	d
MPU6050_DLPF_BW_20	.\lib\MPU6050\MPU6050.h	186;"	d
MPU6050_DLPF_BW_256	.\lib\MPU6050\MPU6050.h	182;"	d
MPU6050_DLPF_BW_42	.\lib\MPU6050\MPU6050.h	185;"	d
MPU6050_DLPF_BW_5	.\lib\MPU6050\MPU6050.h	188;"	d
MPU6050_DLPF_BW_98	.\lib\MPU6050\MPU6050.h	184;"	d
MPU6050_DMPINT_0_BIT	.\lib\MPU6050\MPU6050.h	316;"	d
MPU6050_DMPINT_1_BIT	.\lib\MPU6050\MPU6050.h	315;"	d
MPU6050_DMPINT_2_BIT	.\lib\MPU6050\MPU6050.h	314;"	d
MPU6050_DMPINT_3_BIT	.\lib\MPU6050\MPU6050.h	313;"	d
MPU6050_DMPINT_4_BIT	.\lib\MPU6050\MPU6050.h	312;"	d
MPU6050_DMPINT_5_BIT	.\lib\MPU6050\MPU6050.h	311;"	d
MPU6050_DMP_CODE_SIZE	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	116;"	d
MPU6050_DMP_CODE_SIZE	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	107;"	d
MPU6050_DMP_CONFIG_SIZE	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	117;"	d
MPU6050_DMP_CONFIG_SIZE	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	108;"	d
MPU6050_DMP_MEMORY_BANKS	.\lib\MPU6050\MPU6050.h	395;"	d
MPU6050_DMP_MEMORY_BANK_SIZE	.\lib\MPU6050\MPU6050.h	396;"	d
MPU6050_DMP_MEMORY_CHUNK_SIZE	.\lib\MPU6050\MPU6050.h	397;"	d
MPU6050_DMP_UPDATES_SIZE	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	118;"	d
MPU6050_DMP_UPDATES_SIZE	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	109;"	d
MPU6050_EXT_SYNC_ACCEL_XOUT_L	.\lib\MPU6050\MPU6050.h	178;"	d
MPU6050_EXT_SYNC_ACCEL_YOUT_L	.\lib\MPU6050\MPU6050.h	179;"	d
MPU6050_EXT_SYNC_ACCEL_ZOUT_L	.\lib\MPU6050\MPU6050.h	180;"	d
MPU6050_EXT_SYNC_DISABLED	.\lib\MPU6050\MPU6050.h	173;"	d
MPU6050_EXT_SYNC_GYRO_XOUT_L	.\lib\MPU6050\MPU6050.h	175;"	d
MPU6050_EXT_SYNC_GYRO_YOUT_L	.\lib\MPU6050\MPU6050.h	176;"	d
MPU6050_EXT_SYNC_GYRO_ZOUT_L	.\lib\MPU6050\MPU6050.h	177;"	d
MPU6050_EXT_SYNC_TEMP_OUT_L	.\lib\MPU6050\MPU6050.h	174;"	d
MPU6050_GCONFIG_FS_SEL_BIT	.\lib\MPU6050\MPU6050.h	190;"	d
MPU6050_GCONFIG_FS_SEL_LENGTH	.\lib\MPU6050\MPU6050.h	191;"	d
MPU6050_GYRO_FS_1000	.\lib\MPU6050\MPU6050.h	195;"	d
MPU6050_GYRO_FS_2000	.\lib\MPU6050\MPU6050.h	196;"	d
MPU6050_GYRO_FS_250	.\lib\MPU6050\MPU6050.h	193;"	d
MPU6050_GYRO_FS_500	.\lib\MPU6050\MPU6050.h	194;"	d
MPU6050_I2C_MST_CLK_BIT	.\lib\MPU6050\MPU6050.h	231;"	d
MPU6050_I2C_MST_CLK_LENGTH	.\lib\MPU6050\MPU6050.h	232;"	d
MPU6050_I2C_MST_P_NSR_BIT	.\lib\MPU6050\MPU6050.h	230;"	d
MPU6050_I2C_SLV4_ADDR_BIT	.\lib\MPU6050\MPU6050.h	262;"	d
MPU6050_I2C_SLV4_ADDR_LENGTH	.\lib\MPU6050\MPU6050.h	263;"	d
MPU6050_I2C_SLV4_EN_BIT	.\lib\MPU6050\MPU6050.h	264;"	d
MPU6050_I2C_SLV4_INT_EN_BIT	.\lib\MPU6050\MPU6050.h	265;"	d
MPU6050_I2C_SLV4_MST_DLY_BIT	.\lib\MPU6050\MPU6050.h	267;"	d
MPU6050_I2C_SLV4_MST_DLY_LENGTH	.\lib\MPU6050\MPU6050.h	268;"	d
MPU6050_I2C_SLV4_REG_DIS_BIT	.\lib\MPU6050\MPU6050.h	266;"	d
MPU6050_I2C_SLV4_RW_BIT	.\lib\MPU6050\MPU6050.h	261;"	d
MPU6050_I2C_SLV_ADDR_BIT	.\lib\MPU6050\MPU6050.h	252;"	d
MPU6050_I2C_SLV_ADDR_LENGTH	.\lib\MPU6050\MPU6050.h	253;"	d
MPU6050_I2C_SLV_BYTE_SW_BIT	.\lib\MPU6050\MPU6050.h	255;"	d
MPU6050_I2C_SLV_EN_BIT	.\lib\MPU6050\MPU6050.h	254;"	d
MPU6050_I2C_SLV_GRP_BIT	.\lib\MPU6050\MPU6050.h	257;"	d
MPU6050_I2C_SLV_LEN_BIT	.\lib\MPU6050\MPU6050.h	258;"	d
MPU6050_I2C_SLV_LEN_LENGTH	.\lib\MPU6050\MPU6050.h	259;"	d
MPU6050_I2C_SLV_REG_DIS_BIT	.\lib\MPU6050\MPU6050.h	256;"	d
MPU6050_I2C_SLV_RW_BIT	.\lib\MPU6050\MPU6050.h	251;"	d
MPU6050_INCLUDE_DMP_MOTIONAPPS20	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	40;"	d
MPU6050_INCLUDE_DMP_MOTIONAPPS41	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	40;"	d
MPU6050_INTCFG_CLKOUT_EN_BIT	.\lib\MPU6050\MPU6050.h	286;"	d
MPU6050_INTCFG_FSYNC_INT_EN_BIT	.\lib\MPU6050\MPU6050.h	284;"	d
MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT	.\lib\MPU6050\MPU6050.h	283;"	d
MPU6050_INTCFG_I2C_BYPASS_EN_BIT	.\lib\MPU6050\MPU6050.h	285;"	d
MPU6050_INTCFG_INT_LEVEL_BIT	.\lib\MPU6050\MPU6050.h	279;"	d
MPU6050_INTCFG_INT_OPEN_BIT	.\lib\MPU6050\MPU6050.h	280;"	d
MPU6050_INTCFG_INT_RD_CLEAR_BIT	.\lib\MPU6050\MPU6050.h	282;"	d
MPU6050_INTCFG_LATCH_INT_EN_BIT	.\lib\MPU6050\MPU6050.h	281;"	d
MPU6050_INTCLEAR_ANYREAD	.\lib\MPU6050\MPU6050.h	298;"	d
MPU6050_INTCLEAR_STATUSREAD	.\lib\MPU6050\MPU6050.h	297;"	d
MPU6050_INTDRV_OPENDRAIN	.\lib\MPU6050\MPU6050.h	292;"	d
MPU6050_INTDRV_PUSHPULL	.\lib\MPU6050\MPU6050.h	291;"	d
MPU6050_INTERRUPT_DATA_RDY_BIT	.\lib\MPU6050\MPU6050.h	307;"	d
MPU6050_INTERRUPT_DMP_INT_BIT	.\lib\MPU6050\MPU6050.h	306;"	d
MPU6050_INTERRUPT_FF_BIT	.\lib\MPU6050\MPU6050.h	300;"	d
MPU6050_INTERRUPT_FIFO_OFLOW_BIT	.\lib\MPU6050\MPU6050.h	303;"	d
MPU6050_INTERRUPT_I2C_MST_INT_BIT	.\lib\MPU6050\MPU6050.h	304;"	d
MPU6050_INTERRUPT_MOT_BIT	.\lib\MPU6050\MPU6050.h	301;"	d
MPU6050_INTERRUPT_PLL_RDY_INT_BIT	.\lib\MPU6050\MPU6050.h	305;"	d
MPU6050_INTERRUPT_ZMOT_BIT	.\lib\MPU6050\MPU6050.h	302;"	d
MPU6050_INTLATCH_50USPULSE	.\lib\MPU6050\MPU6050.h	294;"	d
MPU6050_INTLATCH_WAITCLEAR	.\lib\MPU6050\MPU6050.h	295;"	d
MPU6050_INTMODE_ACTIVEHIGH	.\lib\MPU6050\MPU6050.h	288;"	d
MPU6050_INTMODE_ACTIVELOW	.\lib\MPU6050\MPU6050.h	289;"	d
MPU6050_MOTION_MOT_XNEG_BIT	.\lib\MPU6050\MPU6050.h	318;"	d
MPU6050_MOTION_MOT_XPOS_BIT	.\lib\MPU6050\MPU6050.h	319;"	d
MPU6050_MOTION_MOT_YNEG_BIT	.\lib\MPU6050\MPU6050.h	320;"	d
MPU6050_MOTION_MOT_YPOS_BIT	.\lib\MPU6050\MPU6050.h	321;"	d
MPU6050_MOTION_MOT_ZNEG_BIT	.\lib\MPU6050\MPU6050.h	322;"	d
MPU6050_MOTION_MOT_ZPOS_BIT	.\lib\MPU6050\MPU6050.h	323;"	d
MPU6050_MOTION_MOT_ZRMOT_BIT	.\lib\MPU6050\MPU6050.h	324;"	d
MPU6050_MST_I2C_LOST_ARB_BIT	.\lib\MPU6050\MPU6050.h	272;"	d
MPU6050_MST_I2C_SLV0_NACK_BIT	.\lib\MPU6050\MPU6050.h	277;"	d
MPU6050_MST_I2C_SLV1_NACK_BIT	.\lib\MPU6050\MPU6050.h	276;"	d
MPU6050_MST_I2C_SLV2_NACK_BIT	.\lib\MPU6050\MPU6050.h	275;"	d
MPU6050_MST_I2C_SLV3_NACK_BIT	.\lib\MPU6050\MPU6050.h	274;"	d
MPU6050_MST_I2C_SLV4_DONE_BIT	.\lib\MPU6050\MPU6050.h	271;"	d
MPU6050_MST_I2C_SLV4_NACK_BIT	.\lib\MPU6050\MPU6050.h	273;"	d
MPU6050_MST_PASS_THROUGH_BIT	.\lib\MPU6050\MPU6050.h	270;"	d
MPU6050_MULT_MST_EN_BIT	.\lib\MPU6050\MPU6050.h	227;"	d
MPU6050_PATHRESET_ACCEL_RESET_BIT	.\lib\MPU6050\MPU6050.h	334;"	d
MPU6050_PATHRESET_GYRO_RESET_BIT	.\lib\MPU6050\MPU6050.h	333;"	d
MPU6050_PATHRESET_TEMP_RESET_BIT	.\lib\MPU6050\MPU6050.h	335;"	d
MPU6050_PWR1_CLKSEL_BIT	.\lib\MPU6050\MPU6050.h	362;"	d
MPU6050_PWR1_CLKSEL_LENGTH	.\lib\MPU6050\MPU6050.h	363;"	d
MPU6050_PWR1_CYCLE_BIT	.\lib\MPU6050\MPU6050.h	360;"	d
MPU6050_PWR1_DEVICE_RESET_BIT	.\lib\MPU6050\MPU6050.h	358;"	d
MPU6050_PWR1_SLEEP_BIT	.\lib\MPU6050\MPU6050.h	359;"	d
MPU6050_PWR1_TEMP_DIS_BIT	.\lib\MPU6050\MPU6050.h	361;"	d
MPU6050_PWR2_LP_WAKE_CTRL_BIT	.\lib\MPU6050\MPU6050.h	373;"	d
MPU6050_PWR2_LP_WAKE_CTRL_LENGTH	.\lib\MPU6050\MPU6050.h	374;"	d
MPU6050_PWR2_STBY_XA_BIT	.\lib\MPU6050\MPU6050.h	375;"	d
MPU6050_PWR2_STBY_XG_BIT	.\lib\MPU6050\MPU6050.h	378;"	d
MPU6050_PWR2_STBY_YA_BIT	.\lib\MPU6050\MPU6050.h	376;"	d
MPU6050_PWR2_STBY_YG_BIT	.\lib\MPU6050\MPU6050.h	379;"	d
MPU6050_PWR2_STBY_ZA_BIT	.\lib\MPU6050\MPU6050.h	377;"	d
MPU6050_PWR2_STBY_ZG_BIT	.\lib\MPU6050\MPU6050.h	380;"	d
MPU6050_RA_ACCEL_CONFIG	.\lib\MPU6050\MPU6050.h	70;"	d
MPU6050_RA_ACCEL_XOUT_H	.\lib\MPU6050\MPU6050.h	101;"	d
MPU6050_RA_ACCEL_XOUT_L	.\lib\MPU6050\MPU6050.h	102;"	d
MPU6050_RA_ACCEL_YOUT_H	.\lib\MPU6050\MPU6050.h	103;"	d
MPU6050_RA_ACCEL_YOUT_L	.\lib\MPU6050\MPU6050.h	104;"	d
MPU6050_RA_ACCEL_ZOUT_H	.\lib\MPU6050\MPU6050.h	105;"	d
MPU6050_RA_ACCEL_ZOUT_L	.\lib\MPU6050\MPU6050.h	106;"	d
MPU6050_RA_BANK_SEL	.\lib\MPU6050\MPU6050.h	150;"	d
MPU6050_RA_CONFIG	.\lib\MPU6050\MPU6050.h	68;"	d
MPU6050_RA_DMP_CFG_1	.\lib\MPU6050\MPU6050.h	153;"	d
MPU6050_RA_DMP_CFG_2	.\lib\MPU6050\MPU6050.h	154;"	d
MPU6050_RA_DMP_INT_STATUS	.\lib\MPU6050\MPU6050.h	99;"	d
MPU6050_RA_EXT_SENS_DATA_00	.\lib\MPU6050\MPU6050.h	115;"	d
MPU6050_RA_EXT_SENS_DATA_01	.\lib\MPU6050\MPU6050.h	116;"	d
MPU6050_RA_EXT_SENS_DATA_02	.\lib\MPU6050\MPU6050.h	117;"	d
MPU6050_RA_EXT_SENS_DATA_03	.\lib\MPU6050\MPU6050.h	118;"	d
MPU6050_RA_EXT_SENS_DATA_04	.\lib\MPU6050\MPU6050.h	119;"	d
MPU6050_RA_EXT_SENS_DATA_05	.\lib\MPU6050\MPU6050.h	120;"	d
MPU6050_RA_EXT_SENS_DATA_06	.\lib\MPU6050\MPU6050.h	121;"	d
MPU6050_RA_EXT_SENS_DATA_07	.\lib\MPU6050\MPU6050.h	122;"	d
MPU6050_RA_EXT_SENS_DATA_08	.\lib\MPU6050\MPU6050.h	123;"	d
MPU6050_RA_EXT_SENS_DATA_09	.\lib\MPU6050\MPU6050.h	124;"	d
MPU6050_RA_EXT_SENS_DATA_10	.\lib\MPU6050\MPU6050.h	125;"	d
MPU6050_RA_EXT_SENS_DATA_11	.\lib\MPU6050\MPU6050.h	126;"	d
MPU6050_RA_EXT_SENS_DATA_12	.\lib\MPU6050\MPU6050.h	127;"	d
MPU6050_RA_EXT_SENS_DATA_13	.\lib\MPU6050\MPU6050.h	128;"	d
MPU6050_RA_EXT_SENS_DATA_14	.\lib\MPU6050\MPU6050.h	129;"	d
MPU6050_RA_EXT_SENS_DATA_15	.\lib\MPU6050\MPU6050.h	130;"	d
MPU6050_RA_EXT_SENS_DATA_16	.\lib\MPU6050\MPU6050.h	131;"	d
MPU6050_RA_EXT_SENS_DATA_17	.\lib\MPU6050\MPU6050.h	132;"	d
MPU6050_RA_EXT_SENS_DATA_18	.\lib\MPU6050\MPU6050.h	133;"	d
MPU6050_RA_EXT_SENS_DATA_19	.\lib\MPU6050\MPU6050.h	134;"	d
MPU6050_RA_EXT_SENS_DATA_20	.\lib\MPU6050\MPU6050.h	135;"	d
MPU6050_RA_EXT_SENS_DATA_21	.\lib\MPU6050\MPU6050.h	136;"	d
MPU6050_RA_EXT_SENS_DATA_22	.\lib\MPU6050\MPU6050.h	137;"	d
MPU6050_RA_EXT_SENS_DATA_23	.\lib\MPU6050\MPU6050.h	138;"	d
MPU6050_RA_FF_DUR	.\lib\MPU6050\MPU6050.h	72;"	d
MPU6050_RA_FF_THR	.\lib\MPU6050\MPU6050.h	71;"	d
MPU6050_RA_FIFO_COUNTH	.\lib\MPU6050\MPU6050.h	155;"	d
MPU6050_RA_FIFO_COUNTL	.\lib\MPU6050\MPU6050.h	156;"	d
MPU6050_RA_FIFO_EN	.\lib\MPU6050\MPU6050.h	77;"	d
MPU6050_RA_FIFO_R_W	.\lib\MPU6050\MPU6050.h	157;"	d
MPU6050_RA_GYRO_CONFIG	.\lib\MPU6050\MPU6050.h	69;"	d
MPU6050_RA_GYRO_XOUT_H	.\lib\MPU6050\MPU6050.h	109;"	d
MPU6050_RA_GYRO_XOUT_L	.\lib\MPU6050\MPU6050.h	110;"	d
MPU6050_RA_GYRO_YOUT_H	.\lib\MPU6050\MPU6050.h	111;"	d
MPU6050_RA_GYRO_YOUT_L	.\lib\MPU6050\MPU6050.h	112;"	d
MPU6050_RA_GYRO_ZOUT_H	.\lib\MPU6050\MPU6050.h	113;"	d
MPU6050_RA_GYRO_ZOUT_L	.\lib\MPU6050\MPU6050.h	114;"	d
MPU6050_RA_I2C_MST_CTRL	.\lib\MPU6050\MPU6050.h	78;"	d
MPU6050_RA_I2C_MST_DELAY_CTRL	.\lib\MPU6050\MPU6050.h	144;"	d
MPU6050_RA_I2C_MST_STATUS	.\lib\MPU6050\MPU6050.h	96;"	d
MPU6050_RA_I2C_SLV0_ADDR	.\lib\MPU6050\MPU6050.h	79;"	d
MPU6050_RA_I2C_SLV0_CTRL	.\lib\MPU6050\MPU6050.h	81;"	d
MPU6050_RA_I2C_SLV0_DO	.\lib\MPU6050\MPU6050.h	140;"	d
MPU6050_RA_I2C_SLV0_REG	.\lib\MPU6050\MPU6050.h	80;"	d
MPU6050_RA_I2C_SLV1_ADDR	.\lib\MPU6050\MPU6050.h	82;"	d
MPU6050_RA_I2C_SLV1_CTRL	.\lib\MPU6050\MPU6050.h	84;"	d
MPU6050_RA_I2C_SLV1_DO	.\lib\MPU6050\MPU6050.h	141;"	d
MPU6050_RA_I2C_SLV1_REG	.\lib\MPU6050\MPU6050.h	83;"	d
MPU6050_RA_I2C_SLV2_ADDR	.\lib\MPU6050\MPU6050.h	85;"	d
MPU6050_RA_I2C_SLV2_CTRL	.\lib\MPU6050\MPU6050.h	87;"	d
MPU6050_RA_I2C_SLV2_DO	.\lib\MPU6050\MPU6050.h	142;"	d
MPU6050_RA_I2C_SLV2_REG	.\lib\MPU6050\MPU6050.h	86;"	d
MPU6050_RA_I2C_SLV3_ADDR	.\lib\MPU6050\MPU6050.h	88;"	d
MPU6050_RA_I2C_SLV3_CTRL	.\lib\MPU6050\MPU6050.h	90;"	d
MPU6050_RA_I2C_SLV3_DO	.\lib\MPU6050\MPU6050.h	143;"	d
MPU6050_RA_I2C_SLV3_REG	.\lib\MPU6050\MPU6050.h	89;"	d
MPU6050_RA_I2C_SLV4_ADDR	.\lib\MPU6050\MPU6050.h	91;"	d
MPU6050_RA_I2C_SLV4_CTRL	.\lib\MPU6050\MPU6050.h	94;"	d
MPU6050_RA_I2C_SLV4_DI	.\lib\MPU6050\MPU6050.h	95;"	d
MPU6050_RA_I2C_SLV4_DO	.\lib\MPU6050\MPU6050.h	93;"	d
MPU6050_RA_I2C_SLV4_REG	.\lib\MPU6050\MPU6050.h	92;"	d
MPU6050_RA_INT_ENABLE	.\lib\MPU6050\MPU6050.h	98;"	d
MPU6050_RA_INT_PIN_CFG	.\lib\MPU6050\MPU6050.h	97;"	d
MPU6050_RA_INT_STATUS	.\lib\MPU6050\MPU6050.h	100;"	d
MPU6050_RA_MEM_R_W	.\lib\MPU6050\MPU6050.h	152;"	d
MPU6050_RA_MEM_START_ADDR	.\lib\MPU6050\MPU6050.h	151;"	d
MPU6050_RA_MOT_DETECT_CTRL	.\lib\MPU6050\MPU6050.h	146;"	d
MPU6050_RA_MOT_DETECT_STATUS	.\lib\MPU6050\MPU6050.h	139;"	d
MPU6050_RA_MOT_DUR	.\lib\MPU6050\MPU6050.h	74;"	d
MPU6050_RA_MOT_THR	.\lib\MPU6050\MPU6050.h	73;"	d
MPU6050_RA_PWR_MGMT_1	.\lib\MPU6050\MPU6050.h	148;"	d
MPU6050_RA_PWR_MGMT_2	.\lib\MPU6050\MPU6050.h	149;"	d
MPU6050_RA_SIGNAL_PATH_RESET	.\lib\MPU6050\MPU6050.h	145;"	d
MPU6050_RA_SMPLRT_DIV	.\lib\MPU6050\MPU6050.h	67;"	d
MPU6050_RA_TEMP_OUT_H	.\lib\MPU6050\MPU6050.h	107;"	d
MPU6050_RA_TEMP_OUT_L	.\lib\MPU6050\MPU6050.h	108;"	d
MPU6050_RA_USER_CTRL	.\lib\MPU6050\MPU6050.h	147;"	d
MPU6050_RA_WHO_AM_I	.\lib\MPU6050\MPU6050.h	158;"	d
MPU6050_RA_XA_OFFS_H	.\lib\MPU6050\MPU6050.h	55;"	d
MPU6050_RA_XA_OFFS_L_TC	.\lib\MPU6050\MPU6050.h	56;"	d
MPU6050_RA_XG_OFFS_TC	.\lib\MPU6050\MPU6050.h	49;"	d
MPU6050_RA_XG_OFFS_USRH	.\lib\MPU6050\MPU6050.h	61;"	d
MPU6050_RA_XG_OFFS_USRL	.\lib\MPU6050\MPU6050.h	62;"	d
MPU6050_RA_X_FINE_GAIN	.\lib\MPU6050\MPU6050.h	52;"	d
MPU6050_RA_YA_OFFS_H	.\lib\MPU6050\MPU6050.h	57;"	d
MPU6050_RA_YA_OFFS_L_TC	.\lib\MPU6050\MPU6050.h	58;"	d
MPU6050_RA_YG_OFFS_TC	.\lib\MPU6050\MPU6050.h	50;"	d
MPU6050_RA_YG_OFFS_USRH	.\lib\MPU6050\MPU6050.h	63;"	d
MPU6050_RA_YG_OFFS_USRL	.\lib\MPU6050\MPU6050.h	64;"	d
MPU6050_RA_Y_FINE_GAIN	.\lib\MPU6050\MPU6050.h	53;"	d
MPU6050_RA_ZA_OFFS_H	.\lib\MPU6050\MPU6050.h	59;"	d
MPU6050_RA_ZA_OFFS_L_TC	.\lib\MPU6050\MPU6050.h	60;"	d
MPU6050_RA_ZG_OFFS_TC	.\lib\MPU6050\MPU6050.h	51;"	d
MPU6050_RA_ZG_OFFS_USRH	.\lib\MPU6050\MPU6050.h	65;"	d
MPU6050_RA_ZG_OFFS_USRL	.\lib\MPU6050\MPU6050.h	66;"	d
MPU6050_RA_ZRMOT_DUR	.\lib\MPU6050\MPU6050.h	76;"	d
MPU6050_RA_ZRMOT_THR	.\lib\MPU6050\MPU6050.h	75;"	d
MPU6050_RA_Z_FINE_GAIN	.\lib\MPU6050\MPU6050.h	54;"	d
MPU6050_SLV0_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	225;"	d
MPU6050_SLV1_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	224;"	d
MPU6050_SLV2_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	223;"	d
MPU6050_SLV_3_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	229;"	d
MPU6050_TC_OFFSET_BIT	.\lib\MPU6050\MPU6050.h	161;"	d
MPU6050_TC_OFFSET_LENGTH	.\lib\MPU6050\MPU6050.h	162;"	d
MPU6050_TC_OTP_BNK_VLD_BIT	.\lib\MPU6050\MPU6050.h	163;"	d
MPU6050_TC_PWR_MODE_BIT	.\lib\MPU6050\MPU6050.h	160;"	d
MPU6050_TEMP_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	218;"	d
MPU6050_USERCTRL_DMP_EN_BIT	.\lib\MPU6050\MPU6050.h	349;"	d
MPU6050_USERCTRL_DMP_RESET_BIT	.\lib\MPU6050\MPU6050.h	353;"	d
MPU6050_USERCTRL_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	350;"	d
MPU6050_USERCTRL_FIFO_RESET_BIT	.\lib\MPU6050\MPU6050.h	354;"	d
MPU6050_USERCTRL_I2C_IF_DIS_BIT	.\lib\MPU6050\MPU6050.h	352;"	d
MPU6050_USERCTRL_I2C_MST_EN_BIT	.\lib\MPU6050\MPU6050.h	351;"	d
MPU6050_USERCTRL_I2C_MST_RESET_BIT	.\lib\MPU6050\MPU6050.h	355;"	d
MPU6050_USERCTRL_SIG_COND_RESET_BIT	.\lib\MPU6050\MPU6050.h	356;"	d
MPU6050_VDDIO_LEVEL_VDD	.\lib\MPU6050\MPU6050.h	166;"	d
MPU6050_VDDIO_LEVEL_VLOGIC	.\lib\MPU6050\MPU6050.h	165;"	d
MPU6050_WAIT_FOR_ES_BIT	.\lib\MPU6050\MPU6050.h	228;"	d
MPU6050_WAKE_FREQ_10	.\lib\MPU6050\MPU6050.h	385;"	d
MPU6050_WAKE_FREQ_1P25	.\lib\MPU6050\MPU6050.h	382;"	d
MPU6050_WAKE_FREQ_2P5	.\lib\MPU6050\MPU6050.h	383;"	d
MPU6050_WAKE_FREQ_5	.\lib\MPU6050\MPU6050.h	384;"	d
MPU6050_WHO_AM_I_BIT	.\lib\MPU6050\MPU6050.h	392;"	d
MPU6050_WHO_AM_I_LENGTH	.\lib\MPU6050\MPU6050.h	393;"	d
MPU6050_XG_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	219;"	d
MPU6050_YG_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	220;"	d
MPU6050_ZG_FIFO_EN_BIT	.\lib\MPU6050\MPU6050.h	221;"	d
MS_COUNTER	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	35;"	d
MS_COUNTER	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	35;"	d
MS_COUNTER	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	38;"	d
MS_COUNTER	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	45;"	d
MS_COUNTER	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	48;"	d
MUL8_C	.\lib\FastLED\lib8tion.h	205;"	d
Magenta	.\lib\FastLED\pixeltypes.h	/^        Magenta=0xFF00FF,$/;"	e	enum:CRGB::__anon45
Maroon	.\lib\FastLED\pixeltypes.h	/^        Maroon=0x800000,$/;"	e	enum:CRGB::__anon45
MediumAquamarine	.\lib\FastLED\pixeltypes.h	/^        MediumAquamarine=0x66CDAA,$/;"	e	enum:CRGB::__anon45
MediumBlue	.\lib\FastLED\pixeltypes.h	/^        MediumBlue=0x0000CD,$/;"	e	enum:CRGB::__anon45
MediumOrchid	.\lib\FastLED\pixeltypes.h	/^        MediumOrchid=0xBA55D3,$/;"	e	enum:CRGB::__anon45
MediumPurple	.\lib\FastLED\pixeltypes.h	/^        MediumPurple=0x9370DB,$/;"	e	enum:CRGB::__anon45
MediumSeaGreen	.\lib\FastLED\pixeltypes.h	/^        MediumSeaGreen=0x3CB371,$/;"	e	enum:CRGB::__anon45
MediumSlateBlue	.\lib\FastLED\pixeltypes.h	/^        MediumSlateBlue=0x7B68EE,$/;"	e	enum:CRGB::__anon45
MediumSpringGreen	.\lib\FastLED\pixeltypes.h	/^        MediumSpringGreen=0x00FA9A,$/;"	e	enum:CRGB::__anon45
MediumTurquoise	.\lib\FastLED\pixeltypes.h	/^        MediumTurquoise=0x48D1CC,$/;"	e	enum:CRGB::__anon45
MediumVioletRed	.\lib\FastLED\pixeltypes.h	/^        MediumVioletRed=0xC71585,$/;"	e	enum:CRGB::__anon45
MercuryVapor	.\lib\FastLED\color.h	/^   MercuryVapor=0xD8F7FF \/* 0 K, 216, 247, 255 *\/,$/;"	e	enum:__anon25
MetalHalide	.\lib\FastLED\color.h	/^   MetalHalide=0xF2FCFF \/* 0 K, 242, 252, 255 *\/,$/;"	e	enum:__anon25
MidnightBlue	.\lib\FastLED\pixeltypes.h	/^        MidnightBlue=0x191970,$/;"	e	enum:CRGB::__anon45
MintCream	.\lib\FastLED\pixeltypes.h	/^        MintCream=0xF5FFFA,$/;"	e	enum:CRGB::__anon45
MistyRose	.\lib\FastLED\pixeltypes.h	/^        MistyRose=0xFFE4E1,$/;"	e	enum:CRGB::__anon45
Moccasin	.\lib\FastLED\pixeltypes.h	/^        Moccasin=0xFFE4B5,$/;"	e	enum:CRGB::__anon45
NBWIRE_BUFFER_LENGTH	.\lib\I2Cdev\I2Cdev.h	164;"	d
NEED_CXX_BITS	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	32;"	d
NEED_CXX_BITS	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	27;"	d
NEED_CXX_BITS	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	27;"	d
NEOPIXEL	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};$/;"	c
NEO_BGR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	59;"	d
NEO_BGRW	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	89;"	d
NEO_BGWR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	88;"	d
NEO_BRG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	58;"	d
NEO_BRGW	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	87;"	d
NEO_BRWG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	86;"	d
NEO_BWGR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	85;"	d
NEO_BWRG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	84;"	d
NEO_GBR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	57;"	d
NEO_GBRW	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	82;"	d
NEO_GBWR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	81;"	d
NEO_GRB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	56;"	d
NEO_GRBW	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	80;"	d
NEO_GRWB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	79;"	d
NEO_GWBR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	78;"	d
NEO_GWRB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	77;"	d
NEO_KHZ400	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	102;"	d
NEO_KHZ800	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	100;"	d
NEO_RBG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	55;"	d
NEO_RBGW	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	75;"	d
NEO_RBWG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	74;"	d
NEO_RGB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	54;"	d
NEO_RGBW	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	73;"	d
NEO_RGWB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	72;"	d
NEO_RWBG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	71;"	d
NEO_RWGB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	70;"	d
NEO_WBGR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	68;"	d
NEO_WBRG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	67;"	d
NEO_WGBR	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	66;"	d
NEO_WGRB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	65;"	d
NEO_WRBG	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	64;"	d
NEO_WRGB	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	63;"	d
NOBLEND	.\lib\FastLED\colorutils.h	/^typedef enum { NOBLEND=0, LINEARBLEND=1 } TBlendType;$/;"	e	enum:__anon29
NOCONT	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
NOCONT	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
NOMINMAX	.\lib\avr-stl\include\stl_config.h	408;"	d
NONE	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
NONE	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
NOPSPIOutput	.\lib\FastLED\fastspi_nop.h	/^	NOPSPIOutput() { m_pSelect = NULL; }$/;"	f	class:NOPSPIOutput
NOPSPIOutput	.\lib\FastLED\fastspi_nop.h	/^	NOPSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:NOPSPIOutput
NOPSPIOutput	.\lib\FastLED\fastspi_nop.h	/^class NOPSPIOutput {$/;"	c
NOTHING	.\lib\FastLED\platforms\arm\common\m0clockless.h	226;"	d
NOTLAST	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
NOTLAST	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
NO_CORRECTION	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	38;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\FastLED.h	574;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\d21\fastpin_arm_d21.h	8;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\k20\fastpin_arm_k20.h	8;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\k66\fastpin_arm_k66.h	8;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\kl26\fastpin_arm_kl26.h	8;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\sam\fastpin_arm_sam.h	8;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\arm\stm32\fastpin_arm_stm32.h	8;"	d
NO_HARDWARE_PIN_SUPPORT	.\lib\FastLED\platforms\avr\fastpin_avr.h	8;"	d
NO_PIN	.\lib\FastLED\fastpin.h	17;"	d
NO_PROGMEM	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	31;"	d
NO_TIME	.\lib\FastLED\fastled_delay.h	129;"	d
NRF51	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	5;"	d
NRF51SPIOutput	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  NRF51SPIOutput() { FastPin<_DATA_PIN>::setOutput(); FastPin<_CLOCK_PIN>::setOutput(); }$/;"	f	class:NRF51SPIOutput
NRF51SPIOutput	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  NRF51SPIOutput(Selectable *pSelect) {  FastPin<_DATA_PIN>::setOutput(); FastPin<_CLOCK_PIN>::setOutput();  }$/;"	f	class:NRF51SPIOutput
NRF51SPIOutput	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^class NRF51SPIOutput {$/;"	c
NS	.\lib\FastLED\fastled_delay.h	125;"	d
NUM_CONTROLLERS	.\lib\FastLED\FastLED.h	166;"	d
NUM_CONTROLLERS	.\lib\FastLED\FastLED.h	168;"	d
NUM_LED	.\src\LightEffects.h	4;"	d
NavajoWhite	.\lib\FastLED\pixeltypes.h	/^        NavajoWhite=0xFFDEAD,$/;"	e	enum:CRGB::__anon45
Navy	.\lib\FastLED\pixeltypes.h	/^        Navy=0x000080,$/;"	e	enum:CRGB::__anon45
No_Operation_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	78;"	d
OCTOWS2811	.\lib\FastLED\FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	e	enum:OWS2811
OCTOWS2811_400	.\lib\FastLED\FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	e	enum:OWS2811
OCTOWS2813	.\lib\FastLED\FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	e	enum:OWS2811
OUT	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  OUT;                               \/*!< Write GPIO port.                                                      *\/$/;"	m	struct:__anon51
OUTCLR	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  OUTCLR;                            \/*!< Clear individual bits in GPIO port.                                   *\/$/;"	m	struct:__anon51
OUTPUT_PIN_LIMIT	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	15;"	d
OUTSET	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  OUTSET;                            \/*!< Set individual bits in GPIO port.                                     *\/$/;"	m	struct:__anon51
OWS2811	.\lib\FastLED\FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	g
OldLace	.\lib\FastLED\pixeltypes.h	/^        OldLace=0xFDF5E6,$/;"	e	enum:CRGB::__anon45
Olive	.\lib\FastLED\pixeltypes.h	/^        Olive=0x808000,$/;"	e	enum:CRGB::__anon45
OliveDrab	.\lib\FastLED\pixeltypes.h	/^        OliveDrab=0x6B8E23,$/;"	e	enum:CRGB::__anon45
Orange	.\lib\FastLED\pixeltypes.h	/^        Orange=0xFFA500,$/;"	e	enum:CRGB::__anon45
OrangeRed	.\lib\FastLED\pixeltypes.h	/^        OrangeRed=0xFF4500,$/;"	e	enum:CRGB::__anon45
Orchid	.\lib\FastLED\pixeltypes.h	/^        Orchid=0xDA70D6,$/;"	e	enum:CRGB::__anon45
OutputPin	.\lib\FastLED\fastpin.h	/^	OutputPin(int pin) : Pin(pin) { setOutput(); }$/;"	f	class:OutputPin
OutputPin	.\lib\FastLED\fastpin.h	/^class OutputPin : public Pin {$/;"	c
OvercastSky	.\lib\FastLED\color.h	/^   OvercastSky=0xC9E2FF \/* 7000 K, 201, 226, 255 *\/,$/;"	e	enum:__anon25
P	.\lib\FastLED\noise.cpp	7;"	d	file:
P9813	.\lib\FastLED\FastLED.h	/^	P9813,$/;"	e	enum:ESPIChipsets
P9813Controller	.\lib\FastLED\chipsets.h	/^	P9813Controller() {}$/;"	f	class:P9813Controller
P9813Controller	.\lib\FastLED\chipsets.h	/^class P9813Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
PAGE_MODE	.\lib\GOFi2cOLED\GOFi2cOLED.h	61;"	d
PGM_P	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	55;"	d
PGM_P	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	55;"	d
PIN_CNF	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __IO uint32_t  PIN_CNF[32];                       \/*!< Configuration of GPIO pins.                                           *\/$/;"	m	struct:__anon51
PIN_MASK	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	11;"	d
PIXIE	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};$/;"	c
PL9823	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PL9823 : public PL9823Controller<DATA_PIN, RGB_ORDER> {};$/;"	c
PL9823Controller	.\lib\FastLED\chipsets.h	/^class PL9823Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 8 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
PL9823Controller	.\lib\FastLED\chipsets.h	/^class PL9823Controller : public ClocklessController<DATA_PIN, NS(350), NS(1010), NS(350), RGB_ORDER> {};$/;"	c
PMASK	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	188;"	d
PMASK	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	202;"	d
PMASK_HI	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	189;"	d
PMASK_HI	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	203;"	d
PMASK_LO	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	190;"	d
PMASK_LO	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	204;"	d
PORTA_FIRST_PIN	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	20;"	d
PORTA_FIRST_PIN	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	82;"	d
PORTA_FIRST_PIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	60;"	d
PORTA_FIRST_PIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	80;"	d
PORTA_FIRST_PIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	90;"	d
PORTB_FIRST_PIN	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	9;"	d
PORTB_FIRST_PIN	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	21;"	d
PORTC_FIRST_PIN	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	9;"	d
PORTC_FIRST_PIN	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	10;"	d
PORTD_FIRST_PIN	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	10;"	d
PORTD_FIRST_PIN	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	11;"	d
PORTD_FIRST_PIN	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	19;"	d
PORT_MASK	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	13;"	d
PORT_MASK	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	16;"	d
PORT_MASK	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	15;"	d
PORT_MASK	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	6;"	d
PORT_MASK	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	10;"	d
PORT_SHIFT	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	15;"	d
POST	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
POST	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
POWER_DEBUG_PRINT	.\lib\FastLED\power_mgt.cpp	41;"	d	file:
POWER_LED	.\lib\FastLED\power_mgt.cpp	40;"	d	file:
POWER_MGT_H	.\lib\FastLED\power_mgt.h	2;"	d
PRE	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
PRE	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
PRESCALE4	.\lib\FastLED\platforms\avr\clockless_trinket.h	214;"	d
PRESCALE4	.\lib\FastLED\platforms\avr\clockless_trinket.h	226;"	d
PRESCALEA2	.\lib\FastLED\platforms\avr\clockless_trinket.h	217;"	d
PRESCALEA2	.\lib\FastLED\platforms\avr\clockless_trinket.h	227;"	d
PRESCALEB4	.\lib\FastLED\platforms\avr\clockless_trinket.h	220;"	d
PRESCALEB4	.\lib\FastLED\platforms\avr\clockless_trinket.h	228;"	d
PROGMEM	.\lib\FastLED\fastled_progmem.h	47;"	d
PROGMEM	.\lib\FastLED\fastled_progmem.h	48;"	d
PROGMEM	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	30;"	d
PROGMEM	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	30;"	d
PROGMEM	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^const unsigned char  BasicFont[] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^const unsigned char dmpConfig[MPU6050_DMP_CONFIG_SIZE] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^const unsigned char dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^const unsigned char dmpUpdates[MPU6050_DMP_UPDATES_SIZE] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	54;"	d
PROGMEM	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^const prog_uchar dmpConfig[MPU6050_DMP_CONFIG_SIZE] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^const prog_uchar dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^const prog_uchar dmpUpdates[MPU6050_DMP_UPDATES_SIZE] PROGMEM = {$/;"	v
PROGMEM	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	54;"	d
PSBIDATA4	.\lib\FastLED\platforms\avr\clockless_trinket.h	223;"	d
PSBIDATA4	.\lib\FastLED\platforms\avr\clockless_trinket.h	229;"	d
PSTR	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	56;"	d
PSTR	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	56;"	d
PWMT1AMASK	.\lib\toneAC\toneAC.h	85;"	d
PWMT1AMASK	.\lib\toneAC\toneAC.h	90;"	d
PWMT1AMASK	.\lib\toneAC\toneAC.h	95;"	d
PWMT1BMASK	.\lib\toneAC\toneAC.h	86;"	d
PWMT1BMASK	.\lib\toneAC\toneAC.h	91;"	d
PWMT1BMASK	.\lib\toneAC\toneAC.h	96;"	d
PWMT1DREG	.\lib\toneAC\toneAC.h	87;"	d
PWMT1DREG	.\lib\toneAC\toneAC.h	92;"	d
PWMT1DREG	.\lib\toneAC\toneAC.h	97;"	d
PWMT1PORT	.\lib\toneAC\toneAC.h	88;"	d
PWMT1PORT	.\lib\toneAC\toneAC.h	93;"	d
PWMT1PORT	.\lib\toneAC\toneAC.h	98;"	d
PaleGoldenrod	.\lib\FastLED\pixeltypes.h	/^        PaleGoldenrod=0xEEE8AA,$/;"	e	enum:CRGB::__anon45
PaleGreen	.\lib\FastLED\pixeltypes.h	/^        PaleGreen=0x98FB98,$/;"	e	enum:CRGB::__anon45
PaleTurquoise	.\lib\FastLED\pixeltypes.h	/^        PaleTurquoise=0xAFEEEE,$/;"	e	enum:CRGB::__anon45
PaleVioletRed	.\lib\FastLED\pixeltypes.h	/^        PaleVioletRed=0xDB7093,$/;"	e	enum:CRGB::__anon45
PapayaWhip	.\lib\FastLED\pixeltypes.h	/^        PapayaWhip=0xFFEFD5,$/;"	e	enum:CRGB::__anon45
PeachPuff	.\lib\FastLED\pixeltypes.h	/^        PeachPuff=0xFFDAB9,$/;"	e	enum:CRGB::__anon45
Peru	.\lib\FastLED\pixeltypes.h	/^        Peru=0xCD853F,$/;"	e	enum:CRGB::__anon45
Pin	.\lib\FastLED\fastpin.h	/^	Pin(int pin) : mPin(pin) { _init(); }$/;"	f	class:Pin
Pin	.\lib\FastLED\fastpin.h	/^class Pin : public Selectable {$/;"	c
Pink	.\lib\FastLED\pixeltypes.h	/^        Pink=0xFFC0CB,$/;"	e	enum:CRGB::__anon45
PixelController	.\lib\FastLED\controller.h	/^        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {$/;"	f	struct:PixelController
PixelController	.\lib\FastLED\controller.h	/^        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {$/;"	f	struct:PixelController
PixelController	.\lib\FastLED\controller.h	/^        PixelController(const PixelController & other) {$/;"	f	struct:PixelController
PixelController	.\lib\FastLED\controller.h	/^        PixelController(const uint8_t *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER, bool advance=true, uint8_t skip=0) : mData(d), mLen(len), mLenRemaining(len), mScale(s) {$/;"	f	struct:PixelController
PixelController	.\lib\FastLED\controller.h	/^struct PixelController {$/;"	s
PixieController	.\lib\FastLED\chipsets.h	/^	PixieController() : Serial(-1, DATA_PIN) {}$/;"	f	class:PixieController
PixieController	.\lib\FastLED\chipsets.h	/^class PixieController : public CPixelLEDController<RGB_ORDER> {$/;"	c
Plaid	.\lib\FastLED\pixeltypes.h	/^        Plaid=0xCC5533,$/;"	e	enum:CRGB::__anon45
Player	.\src\Player.h	/^class Player: public Entity {$/;"	c
Plum	.\lib\FastLED\pixeltypes.h	/^        Plum=0xDDA0DD,$/;"	e	enum:CRGB::__anon45
PowderBlue	.\lib\FastLED\pixeltypes.h	/^        PowderBlue=0xB0E0E6,$/;"	e	enum:CRGB::__anon45
PreviewInSolutionExplorer	.\src\.vs\VSWorkspaceState.json	/^  "PreviewInSolutionExplorer": false$/;"	f
Purple	.\lib\FastLED\pixeltypes.h	/^        Purple=0x800080,$/;"	e	enum:CRGB::__anon45
QADD7_ARM_DSP_ASM	.\lib\FastLED\lib8tion.h	193;"	d
QADD7_C	.\lib\FastLED\lib8tion.h	191;"	d
QADD8_ARM_DSP_ASM	.\lib\FastLED\lib8tion.h	192;"	d
QADD8_C	.\lib\FastLED\lib8tion.h	190;"	d
QLO2	.\lib\FastLED\platforms\avr\clockless_trinket.h	206;"	d
QLO4	.\lib\FastLED\platforms\arm\common\m0clockless.h	214;"	d
QMUL8_C	.\lib\FastLED\lib8tion.h	206;"	d
QSUB8_C	.\lib\FastLED\lib8tion.h	200;"	d
Quaternion	.\lib\MPU6050\helper_3dmath.h	/^        Quaternion() {$/;"	f	class:Quaternion
Quaternion	.\lib\MPU6050\helper_3dmath.h	/^        Quaternion(float nw, float nx, float ny, float nz) {$/;"	f	class:Quaternion
Quaternion	.\lib\MPU6050\helper_3dmath.h	/^class Quaternion {$/;"	c
RAND16_SEED	.\lib\FastLED\lib8tion.cpp	7;"	d	file:
RBG	.\lib\FastLED\pixeltypes.h	/^	RBG=0021,$/;"	e	enum:EOrder
REAL_FIRST_PIN	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	9;"	d
RECOMMENDED_VIRTUAL_BITS	.\lib\FastLED\controller.h	247;"	d
REFHardwareSPIOutput	.\lib\FastLED\fastspi_ref.h	/^class REFHardwareSPIOutput {$/;"	c
RESERVED1	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  __I  uint32_t  RESERVED1[120];$/;"	m	struct:__anon51
RGB	.\lib\FastLED\pixeltypes.h	/^	RGB=0012,$/;"	e	enum:EOrder
RGB_BYTE	.\lib\FastLED\controller.h	16;"	d
RGB_BYTE0	.\lib\FastLED\controller.h	18;"	d
RGB_BYTE1	.\lib\FastLED\controller.h	19;"	d
RGB_BYTE2	.\lib\FastLED\controller.h	20;"	d
RO	.\lib\FastLED\controller.h	15;"	d
ROR1	.\lib\FastLED\platforms\avr\clockless_trinket.h	242;"	d
RORCLC2	.\lib\FastLED\platforms\avr\clockless_trinket.h	249;"	d
RORSC04	.\lib\FastLED\platforms\avr\clockless_trinket.h	252;"	d
RORSC14	.\lib\FastLED\platforms\avr\clockless_trinket.h	253;"	d
RORSC24	.\lib\FastLED\platforms\avr\clockless_trinket.h	254;"	d
RUNNING_MEDIAN_ALL	.\lib\RunningMedian\RunningMedian.h	31;"	d
RUNNING_MEDIAN_VERSION	.\lib\RunningMedian\RunningMedian.h	23;"	d
RainbowStripesColors_p	.\lib\FastLED\colorpalettes.cpp	122;"	d	file:
RainbowStripesColors_p	.\lib\FastLED\colorpalettes.h	33;"	d
Rainbow_gp	.\lib\FastLED\colorpalettes.h	/^DECLARE_GRADIENT_PALETTE( Rainbow_gp);$/;"	v
Red	.\lib\FastLED\pixeltypes.h	/^        Red=0xFF0000,$/;"	e	enum:CRGB::__anon45
Right_Horizontal_Scroll_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	49;"	d
RoReg	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned int) *\/$/;"	t
RoReg	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned int) *\/$/;"	t
RoReg	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned int) *\/$/;"	t
RoReg	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	/^typedef volatile uint32_t RoReg;$/;"	t
RoReg	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned int) *\/$/;"	t
RoReg	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned int) *\/$/;"	t
RoReg	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	/^typedef volatile uint32_t RoReg;$/;"	t
RoReg	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	/^typedef volatile uint32_t RoReg;$/;"	t
RosyBrown	.\lib\FastLED\pixeltypes.h	/^        RosyBrown=0xBC8F8F,$/;"	e	enum:CRGB::__anon45
RoyalBlue	.\lib\FastLED\pixeltypes.h	/^        RoyalBlue=0x4169E1,$/;"	e	enum:CRGB::__anon45
RunningMedian	.\lib\RunningMedian\RunningMedian.cpp	/^RunningMedian::RunningMedian(const uint8_t size)$/;"	f	class:RunningMedian
RunningMedian	.\lib\RunningMedian\RunningMedian.h	/^class RunningMedian$/;"	c
RunningMedian_h	.\lib\RunningMedian\RunningMedian.h	13;"	d
RwReg	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t
RwReg	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t
RwReg	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t
RwReg	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	/^typedef volatile uint32_t RwReg;$/;"	t
RwReg	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t
RwReg	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t
RwReg	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	/^typedef volatile uint32_t RwReg;$/;"	t
RwReg	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	/^typedef volatile uint32_t RwReg;$/;"	t
SAMHArdwareSPIOutput	.\lib\FastLED\fastspi_ref.h	/^	SAMHArdwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:REFHardwareSPIOutput
SAMHardwareSPIOutput	.\lib\FastLED\fastspi_ref.h	/^	SAMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:REFHardwareSPIOutput
SAMHardwareSPIOutput	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	SAMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:SAMHardwareSPIOutput
SAMHardwareSPIOutput	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	SAMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:SAMHardwareSPIOutput
SAMHardwareSPIOutput	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^class SAMHardwareSPIOutput {$/;"	c
SCALE02	.\lib\FastLED\platforms\avr\clockless_trinket.h	236;"	d
SCALE12	.\lib\FastLED\platforms\avr\clockless_trinket.h	237;"	d
SCALE16BY8_C	.\lib\FastLED\lib8tion.h	202;"	d
SCALE16_C	.\lib\FastLED\lib8tion.h	203;"	d
SCALE22	.\lib\FastLED\platforms\avr\clockless_trinket.h	238;"	d
SCALE4	.\lib\FastLED\platforms\arm\common\m0clockless.h	221;"	d
SCALE8_C	.\lib\FastLED\lib8tion.h	201;"	d
SCROR04	.\lib\FastLED\platforms\avr\clockless_trinket.h	257;"	d
SCROR14	.\lib\FastLED\platforms\avr\clockless_trinket.h	258;"	d
SCROR24	.\lib\FastLED\platforms\avr\clockless_trinket.h	259;"	d
SEI_CHK	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	10;"	d
SEI_CHK	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	14;"	d
SHORTEST_HUES	.\lib\FastLED\colorutils.h	/^typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;$/;"	e	enum:__anon26
SIGNAL	.\lib\I2Cdev\I2Cdev.cpp	/^    SIGNAL(TWI_vect) {$/;"	f
SK6812	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6812 : public SK6812Controller<DATA_PIN, RGB_ORDER> {};$/;"	c
SK6812Controller	.\lib\FastLED\chipsets.h	/^class SK6812Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 3 * FMUL, 4 * FMUL, RGB_ORDER> {};$/;"	c
SK6812Controller	.\lib\FastLED\chipsets.h	/^class SK6812Controller : public ClocklessController<DATA_PIN, NS(300), NS(300), NS(600), RGB_ORDER> {};$/;"	c
SK6822	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6822 : public SK6822Controller<DATA_PIN, RGB_ORDER> {};$/;"	c
SK6822Controller	.\lib\FastLED\chipsets.h	/^class SK6822Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 8 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
SK6822Controller	.\lib\FastLED\chipsets.h	/^class SK6822Controller : public ClocklessController<DATA_PIN, NS(375), NS(1000), NS(375), RGB_ORDER> {};$/;"	c
SK9822	.\lib\FastLED\FastLED.h	/^	SK9822,$/;"	e	enum:ESPIChipsets
SK9822Controller	.\lib\FastLED\chipsets.h	/^	SK9822Controller() {}$/;"	f	class:SK9822Controller
SK9822Controller	.\lib\FastLED\chipsets.h	/^class SK9822Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
SM16716	.\lib\FastLED\FastLED.h	/^	SM16716,$/;"	e	enum:ESPIChipsets
SM16716Controller	.\lib\FastLED\chipsets.h	/^	SM16716Controller() {}$/;"	f	class:SM16716Controller
SM16716Controller	.\lib\FastLED\chipsets.h	/^class SM16716Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
SMART_MATRIX	.\lib\FastLED\FastLED.h	/^enum ESM { SMART_MATRIX };$/;"	e	enum:ESM
SPEED_DIV_128	.\lib\FastLED\fastspi_types.h	37;"	d
SPEED_DIV_16	.\lib\FastLED\fastspi_types.h	34;"	d
SPEED_DIV_2	.\lib\FastLED\fastspi_types.h	31;"	d
SPEED_DIV_32	.\lib\FastLED\fastspi_types.h	35;"	d
SPEED_DIV_4	.\lib\FastLED\fastspi_types.h	32;"	d
SPEED_DIV_64	.\lib\FastLED\fastspi_types.h	36;"	d
SPEED_DIV_8	.\lib\FastLED\fastspi_types.h	33;"	d
SPI	.\lib\FastLED\chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:APA102Controller
SPI	.\lib\FastLED\chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:LPD8806Controller
SPI	.\lib\FastLED\chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:P9813Controller
SPI	.\lib\FastLED\chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:SK9822Controller
SPI	.\lib\FastLED\chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:SM16716Controller
SPI	.\lib\FastLED\chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:WS2801Controller
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput : public NRF51SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED, 0x4002C000> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI2_DATA, SPI_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI2_DATA, SPI_CLOCK, SPI_SPEED, 0x4002C000> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI_DATA, SPI2_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI_DATA, SPI2_CLOCK, SPI_SPEED, 0x4002C000> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED, 0x4002C000> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public AVRHardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public SAMHardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI_UART0_DATA, SPI_UART0_CLOCK, SPI_SPEED> : public AVRUSART0SPIOutput<SPI_UART0_DATA, SPI_UART0_CLOCK, SPI_SPEED> {};$/;"	c
SPIOutput	.\lib\FastLED\fastspi.h	/^class SPIOutput<SPI_UART1_DATA, SPI_UART1_CLOCK, SPI_SPEED> : public AVRUSART1SPIOutput<SPI_UART1_DATA, SPI_UART1_CLOCK, SPI_SPEED> {};$/;"	c
SPIState	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^struct SPIState {$/;"	s
SPIState	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^struct SPIState {$/;"	s
SPIX	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	95;"	d
SPIX	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	103;"	d
SPIX	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	82;"	d
SPI_ADVANCE	.\lib\FastLED\fastspi_types.h	12;"	d
SPI_B0	.\lib\FastLED\fastspi_types.h	9;"	d
SPI_B1	.\lib\FastLED\fastspi_types.h	10;"	d
SPI_B2	.\lib\FastLED\fastspi_types.h	11;"	d
SPI_PUSHR_CONT	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	18;"	d
SPI_PUSHR_CONT	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	26;"	d
SPI_PUSHR_CTAS	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	19;"	d
SPI_PUSHR_CTAS	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	27;"	d
SPI_PUSHR_CTCNT	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	21;"	d
SPI_PUSHR_CTCNT	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	29;"	d
SPI_PUSHR_EOQ	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	20;"	d
SPI_PUSHR_EOQ	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	28;"	d
SPI_PUSHR_PCS	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	22;"	d
SPI_PUSHR_PCS	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	30;"	d
SPI_t	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	10;"	d
SPI_t	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	18;"	d
STL_SEQUENCE_CONCEPTS_H	.\lib\avr-stl\include\sequence_concepts.h	15;"	d
SUB8_C	.\lib\FastLED\lib8tion.h	208;"	d
SWAPBBN1	.\lib\FastLED\platforms\arm\common\m0clockless.h	222;"	d
SWAPS	.\lib\FastLED\bitswap.h	87;"	d
SWAPSA	.\lib\FastLED\bitswap.h	77;"	d
SWAPSB	.\lib\FastLED\bitswap.h	82;"	d
SWS2812	.\lib\FastLED\FastLED.h	/^enum SWS2812 { WS2812SERIAL };$/;"	g
SaddleBrown	.\lib\FastLED\pixeltypes.h	/^        SaddleBrown=0x8B4513,$/;"	e	enum:CRGB::__anon45
Salmon	.\lib\FastLED\pixeltypes.h	/^        Salmon=0xFA8072,$/;"	e	enum:CRGB::__anon45
SandyBrown	.\lib\FastLED\pixeltypes.h	/^        SandyBrown=0xF4A460,$/;"	e	enum:CRGB::__anon45
Scroll_128Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	93;"	d
Scroll_256Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	94;"	d
Scroll_25Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	91;"	d
Scroll_2Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	87;"	d
Scroll_3Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	88;"	d
Scroll_4Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	89;"	d
Scroll_5Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	90;"	d
Scroll_64Frames	.\lib\GOFi2cOLED\GOFi2cOLED.h	92;"	d
Scroll_Left	.\lib\GOFi2cOLED\GOFi2cOLED.h	84;"	d
Scroll_Right	.\lib\GOFi2cOLED\GOFi2cOLED.h	85;"	d
SeaGreen	.\lib\FastLED\pixeltypes.h	/^        SeaGreen=0x2E8B57,$/;"	e	enum:CRGB::__anon45
Seashell	.\lib\FastLED\pixeltypes.h	/^        Seashell=0xFFF5EE,$/;"	e	enum:CRGB::__anon45
Segment_Normal_map_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	67;"	d
Segment_Remap_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	66;"	d
Selectable	.\lib\FastLED\fastpin.h	/^class Selectable {$/;"	c
Serial	.\lib\FastLED\chipsets.h	/^	SoftwareSerial Serial;$/;"	m	class:PixieController
Set_COM_Pins_Hardware_Config_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	72;"	d
Set_Column_Address_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	62;"	d
Set_Contrast_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	40;"	d
Set_Display_Clock_Divide_Ratio_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	75;"	d
Set_Display_Offset_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	71;"	d
Set_Memory_Addressing_Mode_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	58;"	d
Set_Multiplex_Ratio_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	68;"	d
Set_Page_Address_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	63;"	d
Set_Precharge_Period_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	76;"	d
Set_VCOMH_Deselect_Level_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	77;"	d
Set_Vertical_Scroll_Area_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	55;"	d
Sienna	.\lib\FastLED\pixeltypes.h	/^        Sienna=0xA0522D,$/;"	e	enum:CRGB::__anon45
Silver	.\lib\FastLED\pixeltypes.h	/^        Silver=0xC0C0C0,$/;"	e	enum:CRGB::__anon45
SixteenWayInlineBlockClocklessController	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^class SixteenWayInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PMASK> {$/;"	c
SixteenWayInlineBlockClocklessController	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^class SixteenWayInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PMASK> {$/;"	c
SkyBlue	.\lib\FastLED\pixeltypes.h	/^        SkyBlue=0x87CEEB,$/;"	e	enum:CRGB::__anon45
SlateBlue	.\lib\FastLED\pixeltypes.h	/^        SlateBlue=0x6A5ACD,$/;"	e	enum:CRGB::__anon45
SlateGray	.\lib\FastLED\pixeltypes.h	/^        SlateGray=0x708090,$/;"	e	enum:CRGB::__anon45
SlateGrey	.\lib\FastLED\pixeltypes.h	/^        SlateGrey=0x708090,$/;"	e	enum:CRGB::__anon45
SlaveAddress	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t SlaveAddress;                  \/\/011110+SA0+RW$/;"	m	class:GOFi2cOLED
Snow	.\lib\FastLED\pixeltypes.h	/^        Snow=0xFFFAFA,$/;"	e	enum:CRGB::__anon45
SodiumVapor	.\lib\FastLED\color.h	/^   SodiumVapor=0xFFD1B2 \/* 0 K, 255, 209, 178 *\/,$/;"	e	enum:__anon25
SoftwareSPIOutput	.\lib\FastLED\fastspi.h	/^class SoftwareSPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SpawnPoint	.\src\SpawnPoint.h	/^SpawnPoint::SpawnPoint(int position, CRGB::HTMLColorCode color, char* type) : Entity(position, color, type) {$/;"	f	class:SpawnPoint
SpawnPoint	.\src\SpawnPoint.h	/^class SpawnPoint: public Entity {$/;"	c
SpringGreen	.\lib\FastLED\pixeltypes.h	/^        SpringGreen=0x00FF7F,$/;"	e	enum:CRGB::__anon45
StandardFluorescent	.\lib\FastLED\color.h	/^   StandardFluorescent=0xF4FFFA \/* 0 K, 244, 255, 250 *\/,$/;"	e	enum:__anon25
SteelBlue	.\lib\FastLED\pixeltypes.h	/^        SteelBlue=0x4682B4,$/;"	e	enum:CRGB::__anon45
T1_MARK	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	30;"	d
T2_MARK	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	31;"	d
TADJUST	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	12;"	d
TADJUST	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	28;"	d
TBlendType	.\lib\FastLED\colorutils.h	/^typedef enum { NOBLEND=0, LINEARBLEND=1 } TBlendType;$/;"	t	typeref:enum:__anon29
TDynamicRGBGradientPalettePtr	.\lib\FastLED\colorutils.h	/^typedef TDynamicRGBGradientPalette_bytes TDynamicRGBGradientPalettePtr;$/;"	t
TDynamicRGBGradientPalette_byte	.\lib\FastLED\colorutils.h	/^typedef uint8_t TDynamicRGBGradientPalette_byte ;$/;"	t
TDynamicRGBGradientPalette_bytes	.\lib\FastLED\colorutils.h	/^typedef const TDynamicRGBGradientPalette_byte *TDynamicRGBGradientPalette_bytes;$/;"	t
TGradientDirectionCode	.\lib\FastLED\colorutils.h	/^typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;$/;"	t	typeref:enum:__anon26
TIMSK1	.\lib\toneAC\toneAC.h	102;"	d
TM1803	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1803 : public TM1803Controller400Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
TM1803Controller400Khz	.\lib\FastLED\chipsets.h	/^class TM1803Controller400Khz : public ClocklessController<DATA_PIN, 6 * FMUL, 9 * FMUL, 6 * FMUL, RGB_ORDER> {};$/;"	c
TM1803Controller400Khz	.\lib\FastLED\chipsets.h	/^class TM1803Controller400Khz : public ClocklessController<DATA_PIN, NS(700), NS(1100), NS(700), RGB_ORDER> {};$/;"	c
TM1803_PORTA	.\lib\FastLED\FastLED.h	/^	TM1803_PORTA,$/;"	e	enum:EBlockChipsets
TM1803_PORTB	.\lib\FastLED\FastLED.h	/^	TM1803_PORTB,$/;"	e	enum:EBlockChipsets
TM1803_PORTC	.\lib\FastLED\FastLED.h	/^	TM1803_PORTC,$/;"	e	enum:EBlockChipsets
TM1803_PORTD	.\lib\FastLED\FastLED.h	/^	TM1803_PORTD,$/;"	e	enum:EBlockChipsets
TM1803_PORTDC	.\lib\FastLED\FastLED.h	/^	TM1803_PORTDC,$/;"	e	enum:EBlockChipsets
TM1804	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1804 : public TM1809Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
TM1809	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1809 : public TM1809Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
TM1809Controller800Khz	.\lib\FastLED\chipsets.h	/^class TM1809Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
TM1809Controller800Khz	.\lib\FastLED\chipsets.h	/^class TM1809Controller800Khz : public ClocklessController<DATA_PIN, NS(350), NS(350), NS(450), RGB_ORDER> {};$/;"	c
TM1812	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1812 : public TM1809Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
TM1829	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1829 : public TM1829Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
TM1829Controller1600Khz	.\lib\FastLED\chipsets.h	/^class TM1829Controller1600Khz : public ClocklessController<DATA_PIN, NS(100), NS(300), NS(200), RGB_ORDER, 0, true, 500> {};$/;"	c
TM1829Controller800Khz	.\lib\FastLED\chipsets.h	/^class TM1829Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
TM1829Controller800Khz	.\lib\FastLED\chipsets.h	/^class TM1829Controller800Khz : public ClocklessController<DATA_PIN, NS(340), NS(340), NS(550), RGB_ORDER, 0, true, 500> {};$/;"	c
TOTAL	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	13;"	d
TOTAL	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	29;"	d
TProgmemHSVPalette16	.\lib\FastLED\colorutils.h	/^typedef uint32_t TProgmemHSVPalette16[16];$/;"	t
TProgmemHSVPalette32	.\lib\FastLED\colorutils.h	/^typedef uint32_t TProgmemHSVPalette32[32];$/;"	t
TProgmemPalette16	.\lib\FastLED\colorutils.h	402;"	d
TProgmemPalette32	.\lib\FastLED\colorutils.h	405;"	d
TProgmemRGBGradientPalettePtr	.\lib\FastLED\colorutils.h	/^typedef TProgmemRGBGradientPalette_bytes TProgmemRGBGradientPalettePtr;$/;"	t
TProgmemRGBGradientPalette_byte	.\lib\FastLED\colorutils.h	/^typedef const uint8_t TProgmemRGBGradientPalette_byte ;$/;"	t
TProgmemRGBGradientPalette_bytes	.\lib\FastLED\colorutils.h	/^typedef const TProgmemRGBGradientPalette_byte *TProgmemRGBGradientPalette_bytes;$/;"	t
TProgmemRGBPalette16	.\lib\FastLED\colorutils.h	/^typedef uint32_t TProgmemRGBPalette16[16];$/;"	t
TProgmemRGBPalette32	.\lib\FastLED\colorutils.h	/^typedef uint32_t TProgmemRGBPalette32[32];$/;"	t
TRGBGradientPaletteEntryUnion	.\lib\FastLED\colorutils.h	/^} TRGBGradientPaletteEntryUnion;$/;"	t	typeref:union:__anon27
TRINKET_SCALE	.\lib\FastLED\platforms\avr\clockless_trinket.h	14;"	d
TWI_BUFFER_LENGTH	.\lib\I2Cdev\I2Cdev.h	219;"	d
TWI_FREQ	.\lib\I2Cdev\I2Cdev.h	218;"	d
TWI_MRX	.\lib\I2Cdev\I2Cdev.h	206;"	d
TWI_MTX	.\lib\I2Cdev\I2Cdev.h	207;"	d
TWI_READY	.\lib\I2Cdev\I2Cdev.h	205;"	d
TWI_SRX	.\lib\I2Cdev\I2Cdev.h	208;"	d
TWI_STX	.\lib\I2Cdev\I2Cdev.h	209;"	d
TW_BUS_ERROR	.\lib\I2Cdev\I2Cdev.h	252;"	d
TW_ERROR	.\lib\I2Cdev\I2Cdev.h	142;"	d
TW_MR_ARB_LOST	.\lib\I2Cdev\I2Cdev.h	135;"	d
TW_MR_ARB_LOST	.\lib\I2Cdev\I2Cdev.h	232;"	d
TW_MR_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	138;"	d
TW_MR_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	235;"	d
TW_MR_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	139;"	d
TW_MR_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	236;"	d
TW_MR_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	136;"	d
TW_MR_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	233;"	d
TW_MR_SLA_NACK	.\lib\I2Cdev\I2Cdev.h	137;"	d
TW_MR_SLA_NACK	.\lib\I2Cdev\I2Cdev.h	234;"	d
TW_MT_ARB_LOST	.\lib\I2Cdev\I2Cdev.h	132;"	d
TW_MT_ARB_LOST	.\lib\I2Cdev\I2Cdev.h	231;"	d
TW_MT_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	130;"	d
TW_MT_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	229;"	d
TW_MT_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	131;"	d
TW_MT_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	215;"	d
TW_MT_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	230;"	d
TW_MT_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	128;"	d
TW_MT_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	227;"	d
TW_MT_SLA_NACK	.\lib\I2Cdev\I2Cdev.h	129;"	d
TW_MT_SLA_NACK	.\lib\I2Cdev\I2Cdev.h	214;"	d
TW_MT_SLA_NACK	.\lib\I2Cdev\I2Cdev.h	228;"	d
TW_NO_INFO	.\lib\I2Cdev\I2Cdev.h	251;"	d
TW_OK	.\lib\I2Cdev\I2Cdev.h	141;"	d
TW_READ	.\lib\I2Cdev\I2Cdev.h	212;"	d
TW_REP_START	.\lib\I2Cdev\I2Cdev.h	125;"	d
TW_REP_START	.\lib\I2Cdev\I2Cdev.h	226;"	d
TW_SR_ARB_LOST_GCALL_ACK	.\lib\I2Cdev\I2Cdev.h	245;"	d
TW_SR_ARB_LOST_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	243;"	d
TW_SR_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	246;"	d
TW_SR_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	247;"	d
TW_SR_GCALL_ACK	.\lib\I2Cdev\I2Cdev.h	244;"	d
TW_SR_GCALL_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	248;"	d
TW_SR_GCALL_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	249;"	d
TW_SR_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	242;"	d
TW_SR_STOP	.\lib\I2Cdev\I2Cdev.h	250;"	d
TW_START	.\lib\I2Cdev\I2Cdev.h	124;"	d
TW_START	.\lib\I2Cdev\I2Cdev.h	225;"	d
TW_STATUS	.\lib\I2Cdev\I2Cdev.h	224;"	d
TW_STATUS_MASK	.\lib\I2Cdev\I2Cdev.h	223;"	d
TW_ST_ARB_LOST_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	238;"	d
TW_ST_DATA_ACK	.\lib\I2Cdev\I2Cdev.h	239;"	d
TW_ST_DATA_NACK	.\lib\I2Cdev\I2Cdev.h	240;"	d
TW_ST_LAST_DATA	.\lib\I2Cdev\I2Cdev.h	241;"	d
TW_ST_SLA_ACK	.\lib\I2Cdev\I2Cdev.h	237;"	d
TW_WRITE	.\lib\I2Cdev\I2Cdev.h	211;"	d
Tan	.\lib\FastLED\pixeltypes.h	/^        Tan=0xD2B48C,$/;"	e	enum:CRGB::__anon45
Teal	.\lib\FastLED\pixeltypes.h	/^        Teal=0x008080,$/;"	e	enum:CRGB::__anon45
Thistle	.\lib\FastLED\pixeltypes.h	/^        Thistle=0xD8BFD8,$/;"	e	enum:CRGB::__anon45
Tomato	.\lib\FastLED\pixeltypes.h	/^        Tomato=0xFF6347,$/;"	e	enum:CRGB::__anon45
Trap	.\src\Lava.h	/^class Trap: public Entity {$/;"	c
Trap	.\src\Trap.h	/^Trap::Trap(int position, CRGB::HTMLColorCode color, char* type) : Entity(position, color, type) {$/;"	f	class:Trap
Trap	.\src\Trap.h	/^class Trap: public Entity {$/;"	c
Tungsten100W	.\lib\FastLED\color.h	/^   Tungsten100W=0xFFD6AA \/* 2850 K, 255, 214, 170 *\/,$/;"	e	enum:__anon25
Tungsten40W	.\lib\FastLED\color.h	/^   Tungsten40W=0xFFC58F \/* 2600 K, 255, 197, 143 *\/,$/;"	e	enum:__anon25
Turquoise	.\lib\FastLED\pixeltypes.h	/^        Turquoise=0x40E0D0,$/;"	e	enum:CRGB::__anon45
TwoWire	.\lib\I2Cdev\I2Cdev.cpp	/^    TwoWire::TwoWire() { }$/;"	f	class:TwoWire
TwoWire	.\lib\I2Cdev\I2Cdev.h	/^    class TwoWire {$/;"	c
Typical8mmPixel	.\lib\FastLED\color.h	/^   Typical8mmPixel=0xFFE08C \/* 255, 224, 140 *\/,$/;"	e	enum:__anon24
TypicalLEDStrip	.\lib\FastLED\color.h	/^    TypicalLEDStrip=0xFFB0F0 \/* 255, 176, 240 *\/,$/;"	e	enum:__anon24
TypicalPixelString	.\lib\FastLED\color.h	/^   TypicalPixelString=0xFFE08C \/* 255, 224, 140 *\/,$/;"	e	enum:__anon24
TypicalSMD5050	.\lib\FastLED\color.h	/^    TypicalSMD5050=0xFFB0F0 \/* 255, 176, 240 *\/,$/;"	e	enum:__anon24
UCPHA1	.\lib\FastLED\platforms\avr\fastspi_avr.h	20;"	d
UCS1903	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903 : public UCS1903Controller400Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
UCS1903B	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
UCS1903BController800Khz	.\lib\FastLED\chipsets.h	/^class UCS1903BController800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 4 * FMUL, 4 * FMUL, RGB_ORDER> {};$/;"	c
UCS1903BController800Khz	.\lib\FastLED\chipsets.h	/^class UCS1903BController800Khz : public ClocklessController<DATA_PIN, NS(400), NS(450), NS(450), RGB_ORDER> {};$/;"	c
UCS1903Controller400Khz	.\lib\FastLED\chipsets.h	/^class UCS1903Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 12 * FMUL, 4 * FMUL, RGB_ORDER> {};$/;"	c
UCS1903Controller400Khz	.\lib\FastLED\chipsets.h	/^class UCS1903Controller400Khz : public ClocklessController<DATA_PIN, NS(500), NS(1500), NS(500), RGB_ORDER> {};$/;"	c
UCS1903_PORTA	.\lib\FastLED\FastLED.h	/^	UCS1903_PORTA,$/;"	e	enum:EBlockChipsets
UCS1903_PORTB	.\lib\FastLED\FastLED.h	/^	UCS1903_PORTB,$/;"	e	enum:EBlockChipsets
UCS1903_PORTC	.\lib\FastLED\FastLED.h	/^	UCS1903_PORTC,$/;"	e	enum:EBlockChipsets
UCS1903_PORTD	.\lib\FastLED\FastLED.h	/^	UCS1903_PORTD,$/;"	e	enum:EBlockChipsets
UCS1903_PORTDC	.\lib\FastLED\FastLED.h	/^	UCS1903_PORTDC,$/;"	e	enum:EBlockChipsets
UCS1904	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
UCS1904Controller800Khz	.\lib\FastLED\chipsets.h	/^class UCS1904Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 3 * FMUL, 4 * FMUL, RGB_ORDER> {};$/;"	c
UCS1904Controller800Khz	.\lib\FastLED\chipsets.h	/^class UCS1904Controller800Khz : public ClocklessController<DATA_PIN, NS(400), NS(400), NS(450), RGB_ORDER> {};$/;"	c
UCS2903	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, RGB_ORDER> {};$/;"	c
UCS2903Controller	.\lib\FastLED\chipsets.h	/^class UCS2903Controller : public ClocklessController<DATA_PIN, 2 * FMUL, 6 * FMUL, 2 * FMUL, RGB_ORDER> {};$/;"	c
UCS2903Controller	.\lib\FastLED\chipsets.h	/^class UCS2903Controller : public ClocklessController<DATA_PIN, NS(250), NS(750), NS(250), RGB_ORDER> {};$/;"	c
UPDATES_PER_FULL_DITHER_CYCLE	.\lib\FastLED\controller.h	246;"	d
USED_LANES	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	16;"	d
USED_LANES	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	19;"	d
USED_LANES	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	8;"	d
USED_LANES	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	9;"	d
USE_ASM_MACROS	.\lib\FastLED\platforms\avr\clockless_trinket.h	168;"	d
USE_CONT	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	39;"	d
USE_CONT	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	47;"	d
US_PER_TICK	.\lib\FastLED\platforms\avr\clockless_trinket.h	25;"	d
UncorrectedColor	.\lib\FastLED\color.h	/^   UncorrectedColor=0xFFFFFF$/;"	e	enum:__anon24
UncorrectedTemperature	.\lib\FastLED\color.h	/^   UncorrectedTemperature=0xFFFFFF$/;"	e	enum:__anon25
UpscalePalette	.\lib\FastLED\colorutils.cpp	/^void UpscalePalette(const struct CHSVPalette16& srcpal16, struct CHSVPalette256& destpal256)$/;"	f
UpscalePalette	.\lib\FastLED\colorutils.cpp	/^void UpscalePalette(const struct CHSVPalette16& srcpal16, struct CHSVPalette32& destpal32)$/;"	f
UpscalePalette	.\lib\FastLED\colorutils.cpp	/^void UpscalePalette(const struct CHSVPalette32& srcpal32, struct CHSVPalette256& destpal256)$/;"	f
UpscalePalette	.\lib\FastLED\colorutils.cpp	/^void UpscalePalette(const struct CRGBPalette16& srcpal16, struct CRGBPalette256& destpal256)$/;"	f
UpscalePalette	.\lib\FastLED\colorutils.cpp	/^void UpscalePalette(const struct CRGBPalette16& srcpal16, struct CRGBPalette32& destpal32)$/;"	f
UpscalePalette	.\lib\FastLED\colorutils.cpp	/^void UpscalePalette(const struct CRGBPalette32& srcpal32, struct CRGBPalette256& destpal256)$/;"	f
VERTICAL_MODE	.\lib\GOFi2cOLED\GOFi2cOLED.h	60;"	d
VIRTUAL_BITS	.\lib\FastLED\controller.h	255;"	d
VectorFloat	.\lib\MPU6050\helper_3dmath.h	/^        VectorFloat() {$/;"	f	class:VectorFloat
VectorFloat	.\lib\MPU6050\helper_3dmath.h	/^        VectorFloat(float nx, float ny, float nz) {$/;"	f	class:VectorFloat
VectorFloat	.\lib\MPU6050\helper_3dmath.h	/^class VectorFloat {$/;"	c
VectorInt16	.\lib\MPU6050\helper_3dmath.h	/^        VectorInt16() {$/;"	f	class:VectorInt16
VectorInt16	.\lib\MPU6050\helper_3dmath.h	/^        VectorInt16(int16_t nx, int16_t ny, int16_t nz) {$/;"	f	class:VectorInt16
VectorInt16	.\lib\MPU6050\helper_3dmath.h	/^class VectorInt16 {$/;"	c
Vertical_Left_Horizontal_Scroll_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	52;"	d
Vertical_Right_Horizontal_Scroll_Cmd	.\lib\GOFi2cOLED\GOFi2cOLED.h	51;"	d
Violet	.\lib\FastLED\pixeltypes.h	/^        Violet=0xEE82EE,$/;"	e	enum:CRGB::__anon45
WHITE	.\lib\GOFi2cOLED\GOFi2cOLED.h	31;"	d
WIDTH	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  WIDTH, HEIGHT;   \/\/ this is the 'raw' display w\/h - never changes$/;"	m	class:GOFi2cOLED
WM	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	311;"	d
WM	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	319;"	d
WS2801	.\lib\FastLED\FastLED.h	/^	WS2801,$/;"	e	enum:ESPIChipsets
WS2801Controller	.\lib\FastLED\chipsets.h	/^	WS2801Controller() {}$/;"	f	class:WS2801Controller
WS2801Controller	.\lib\FastLED\chipsets.h	/^class WS2801Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
WS2803	.\lib\FastLED\FastLED.h	/^	WS2803,$/;"	e	enum:ESPIChipsets
WS2803Controller	.\lib\FastLED\chipsets.h	/^class WS2803Controller : public WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_SPEED> {};$/;"	c
WS2811	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2811 : public WS2811Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
WS2811Controller400Khz	.\lib\FastLED\chipsets.h	/^class WS2811Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 10 * FMUL, 6 * FMUL, RGB_ORDER> {};$/;"	c
WS2811Controller400Khz	.\lib\FastLED\chipsets.h	/^class WS2811Controller400Khz : public ClocklessController<DATA_PIN, NS(800), NS(800), NS(900), RGB_ORDER> {};$/;"	c
WS2811Controller800Khz	.\lib\FastLED\chipsets.h	/^class WS2811Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
WS2811Controller800Khz	.\lib\FastLED\chipsets.h	/^class WS2811Controller800Khz : public ClocklessController<DATA_PIN, NS(320), NS(320), NS(640), RGB_ORDER> {};$/;"	c
WS2811_400	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2811_400 : public WS2811Controller400Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
WS2811_400_PORTA	.\lib\FastLED\FastLED.h	/^	WS2811_400_PORTA,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTB	.\lib\FastLED\FastLED.h	/^	WS2811_400_PORTB,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTC	.\lib\FastLED\FastLED.h	/^	WS2811_400_PORTC,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTD	.\lib\FastLED\FastLED.h	/^	WS2811_400_PORTD,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTDC	.\lib\FastLED\FastLED.h	/^	WS2811_400_PORTDC,$/;"	e	enum:EBlockChipsets
WS2811_PORTA	.\lib\FastLED\FastLED.h	/^	WS2811_PORTA,$/;"	e	enum:EBlockChipsets
WS2811_PORTB	.\lib\FastLED\FastLED.h	/^	WS2811_PORTB,$/;"	e	enum:EBlockChipsets
WS2811_PORTC	.\lib\FastLED\FastLED.h	/^	WS2811_PORTC,$/;"	e	enum:EBlockChipsets
WS2811_PORTD	.\lib\FastLED\FastLED.h	/^	WS2811_PORTD,$/;"	e	enum:EBlockChipsets
WS2811_PORTDC	.\lib\FastLED\FastLED.h	/^	WS2811_PORTDC,$/;"	e	enum:EBlockChipsets
WS2812	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
WS2812B	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812B : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
WS2812Controller800Khz	.\lib\FastLED\chipsets.h	/^class WS2812Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
WS2812Controller800Khz	.\lib\FastLED\chipsets.h	/^class WS2812Controller800Khz : public ClocklessController<DATA_PIN, NS(250), NS(625), NS(375), RGB_ORDER> {};$/;"	c
WS2812SERIAL	.\lib\FastLED\FastLED.h	/^enum SWS2812 { WS2812SERIAL };$/;"	e	enum:SWS2812
WS2813	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2813 : public WS2813Controller<DATA_PIN, RGB_ORDER> {};$/;"	c
WS2813Controller	.\lib\FastLED\chipsets.h	/^class WS2813Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB_ORDER> {};$/;"	c
WS2813Controller	.\lib\FastLED\chipsets.h	/^class WS2813Controller : public ClocklessController<DATA_PIN, NS(320), NS(320), NS(640), RGB_ORDER> {};$/;"	c
WS2813_PORTA	.\lib\FastLED\FastLED.h	/^	WS2813_PORTA,$/;"	e	enum:EBlockChipsets
WS2813_PORTB	.\lib\FastLED\FastLED.h	/^	WS2813_PORTB,$/;"	e	enum:EBlockChipsets
WS2813_PORTC	.\lib\FastLED\FastLED.h	/^	WS2813_PORTC,$/;"	e	enum:EBlockChipsets
WS2813_PORTD	.\lib\FastLED\FastLED.h	/^	WS2813_PORTD,$/;"	e	enum:EBlockChipsets
WS2813_PORTDC	.\lib\FastLED\FastLED.h	/^	WS2813_PORTDC,$/;"	e	enum:EBlockChipsets
WS2852	.\lib\FastLED\FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2852 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};$/;"	c
WarmFluorescent	.\lib\FastLED\color.h	/^   WarmFluorescent=0xFFF4E5 \/* 0 K, 255, 244, 229 *\/,$/;"	e	enum:__anon25
Water	.\src\Water.h	/^Water::Water(int position, CRGB::HTMLColorCode color, char* type) : Entity(position, color, type) {$/;"	f	class:Water
Water	.\src\Water.h	/^class Water: public Entity {$/;"	c
Wheat	.\lib\FastLED\pixeltypes.h	/^        Wheat=0xF5DEB3,$/;"	e	enum:CRGB::__anon45
White	.\lib\FastLED\pixeltypes.h	/^        White=0xFFFFFF,$/;"	e	enum:CRGB::__anon45
WhiteSmoke	.\lib\FastLED\pixeltypes.h	/^        WhiteSmoke=0xF5F5F5,$/;"	e	enum:CRGB::__anon45
Wire	.\lib\I2Cdev\I2Cdev.cpp	/^    TwoWire Wire;$/;"	v
Write	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	template<ECont CONT_STATE, EWait WAIT_STATE, ELast LAST_STATE> class Write {$/;"	c	class:ARMHardwareSPIOutput
Write	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	template<ECont CONT_STATE, EWait WAIT_STATE, ELast LAST_STATE> class Write {$/;"	c	class:ARMHardwareSPIOutput
Yellow	.\lib\FastLED\pixeltypes.h	/^        Yellow=0xFFFF00,$/;"	e	enum:CRGB::__anon45
YellowGreen	.\lib\FastLED\pixeltypes.h	/^        YellowGreen=0x9ACD32,$/;"	e	enum:CRGB::__anon45
_ADJD1	.\lib\FastLED\platforms\avr\clockless_trinket.h	267;"	d
_ALIGN	.\lib\avr-stl\include\stl_alloc.h	/^    enum {_ALIGN = 8};$/;"	e	enum:__default_alloc_template::__anon12
_ALIGN	.\lib\avr-stl\include\stl_alloc.h	/^  enum {_ALIGN = 8};$/;"	e	enum:__anon9
_ARMPIN	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^template<uint8_t PIN, uint32_t _MASK> class _ARMPIN {$/;"	c
_Alloc	.\lib\avr-stl\include\stl_alloc.h	/^  typedef alloc _Alloc;          \/\/ The underlying allocator.$/;"	t	class:allocator
_Alloc_type	.\lib\avr-stl\include\stl_bvector.h	/^          _Alloc_type;$/;"	t	class:_Bvector_alloc_base
_Alloc_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef simple_alloc<unsigned int, _Alloc> _Alloc_type;$/;"	t	class:_Bvector_base
_Alloc_type	.\lib\avr-stl\include\stl_list.h	/^          _Alloc_type;$/;"	t	class:_List_alloc_base
_Alloc_type	.\lib\avr-stl\include\stl_list.h	/^  typedef simple_alloc<_List_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	class:_List_base
_Alloc_type	.\lib\avr-stl\include\stl_slist.h	/^          _Alloc_type;$/;"	t	class:_Slist_alloc_base
_Alloc_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef simple_alloc<_Slist_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:_Slist_base
_Alloc_type	.\lib\avr-stl\include\stl_tree.h	/^          _Alloc_type;$/;"	t	class:_Rb_tree_alloc_base
_Alloc_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef simple_alloc<_Rb_tree_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:_Rb_tree_base
_Alloc_type	.\lib\avr-stl\include\stl_vector.h	/^  typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;$/;"	t	class:_Vector_alloc_base
_Allocator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _Allocator_concept_specification {$/;"	s
_Allocator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_Allocator_requirement_violation(_Alloc __a) {$/;"	f	struct:_Allocator_concept_specification
_Assignable_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _Assignable_concept_specification {$/;"	s
_Assignable_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  static void _Assignable_requirement_violation(_Type __a) {$/;"	f	struct:_Assignable_concept_specification
_BLE_SERIAL_H_	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	2;"	d
_BackInsertionSequence_concept_specification	.\lib\avr-stl\include\sequence_concepts.h	/^struct _BackInsertionSequence_concept_specification {$/;"	s
_BackInsertionSequence_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^_BackInsertionSequence_requirement_violation(_BackInsertionSequence __s) {$/;"	f	struct:_BackInsertionSequence_concept_specification
_Base	.\lib\avr-stl\include\stl_bvector.h	/^          _Base;$/;"	t	class:_Bvector_base
_Base	.\lib\avr-stl\include\stl_deque.h	/^          _Base;$/;"	t	class:_Deque_base
_Base	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Deque_base<_Tp, _Alloc> _Base;$/;"	t	class:deque
_Base	.\lib\avr-stl\include\stl_list.h	/^          _Base; $/;"	t	class:_List_base
_Base	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_base<_Tp, _Alloc> _Base;$/;"	t	class:list
_Base	.\lib\avr-stl\include\stl_slist.h	/^          _Base;$/;"	t	struct:_Slist_base
_Base	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_base<_Tp,_Alloc> _Base;$/;"	t	class:slist
_Base	.\lib\avr-stl\include\stl_tree.h	/^          _Base;$/;"	t	struct:_Rb_tree_base
_Base	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;$/;"	t	struct:rb_tree
_Base	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_base<_Value, _Alloc> _Base;$/;"	t	class:_Rb_tree
_Base	.\lib\avr-stl\include\stl_vector.h	/^          _Base;$/;"	t	struct:_Vector_base
_Base	.\lib\avr-stl\include\stl_vector.h	/^  typedef _Vector_base<_Tp, _Alloc> _Base;$/;"	t	class:vector
_Base_ptr	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:_Rb_tree
_Base_ptr	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:_Rb_tree_node_base
_Base_ptr	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:_Rb_tree_base_iterator
_BidirectionalIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _BidirectionalIterator_concept_specification {$/;"	s
_BidirectionalIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_BidirectionalIterator_requirement_violation(_BidirectionalIterator __i) {$/;"	f	struct:_BidirectionalIterator_concept_specification
_Bit_const_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:_Bit_const_iterator
_Bit_const_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_const_iterator(const _Bit_iterator& __x) $/;"	f	struct:_Bit_const_iterator
_Bit_const_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_const_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_const_iterator
_Bit_const_iterator	.\lib\avr-stl\include\stl_bvector.h	/^struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s
_Bit_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:_Bit_iterator
_Bit_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_iterator
_Bit_iterator	.\lib\avr-stl\include\stl_bvector.h	/^struct _Bit_iterator : public _Bit_iterator_base$/;"	s
_Bit_iterator_base	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator_base(unsigned int* __x, unsigned int __y)$/;"	f	struct:_Bit_iterator_base
_Bit_iterator_base	.\lib\avr-stl\include\stl_bvector.h	/^struct _Bit_iterator_base : public random_access_iterator<bool, ptrdiff_t> $/;"	s
_Bit_reference	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_reference() : _M_p(0), _M_mask(0) {}$/;"	f	struct:_Bit_reference
_Bit_reference	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_reference(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_reference
_Bit_reference	.\lib\avr-stl\include\stl_bvector.h	/^struct _Bit_reference {$/;"	s
_Bvector_alloc_base	.\lib\avr-stl\include\stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type& __a)$/;"	f	class:_Bvector_alloc_base
_Bvector_alloc_base	.\lib\avr-stl\include\stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type&)$/;"	f	class:_Bvector_alloc_base
_Bvector_alloc_base	.\lib\avr-stl\include\stl_bvector.h	/^class _Bvector_alloc_base {$/;"	c
_Bvector_alloc_base	.\lib\avr-stl\include\stl_bvector.h	/^class _Bvector_alloc_base<_Allocator, true> {$/;"	c
_Bvector_base	.\lib\avr-stl\include\stl_bvector.h	/^  _Bvector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	class:_Bvector_base
_Bvector_base	.\lib\avr-stl\include\stl_bvector.h	/^  _Bvector_base(const allocator_type&)$/;"	f	class:_Bvector_base
_Bvector_base	.\lib\avr-stl\include\stl_bvector.h	/^class _Bvector_base$/;"	c
_CLC1	.\lib\FastLED\platforms\avr\clockless_trinket.h	245;"	d
_CYCCNT	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	38;"	d
_Cat	.\lib\avr-stl\include\stl_algobase.h	/^          _Cat;$/;"	t	struct:__copy_backward_dispatch
_Color_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	struct:_Rb_tree_node_base
_Color_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef std::_Rb_tree_Color_type _Color_type;$/;"	t	class:_Rb_tree
_Constant_binary_fun	.\lib\avr-stl\include\stl_function.h	/^  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_binary_fun
_Constant_binary_fun	.\lib\avr-stl\include\stl_function.h	/^struct _Constant_binary_fun {$/;"	s
_Constant_unary_fun	.\lib\avr-stl\include\stl_function.h	/^  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_unary_fun
_Constant_unary_fun	.\lib\avr-stl\include\stl_function.h	/^struct _Constant_unary_fun {$/;"	s
_Constant_void_fun	.\lib\avr-stl\include\stl_function.h	/^  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_void_fun
_Constant_void_fun	.\lib\avr-stl\include\stl_function.h	/^struct _Constant_void_fun {$/;"	s
_Construct	.\lib\avr-stl\include\stl_construct.h	/^inline void _Construct(_T1* __p) {$/;"	f
_Construct	.\lib\avr-stl\include\stl_construct.h	/^inline void _Construct(_T1* __p, const _T2& __value) {$/;"	f
_Container	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:insert_iterator
_Container	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:insert_iterator
_Container	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:insert_iterator
_Container	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:insert_iterator
_Container	.\lib\avr-stl\include\stl_slist.h	/^  typedef slist<_Tp, _Alloc> _Container;$/;"	t	class:insert_iterator
_Container_concept_specification	.\lib\avr-stl\include\container_concepts.h	/^struct _Container_concept_specification {$/;"	s
_Container_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^_Container_requirement_violation(_Container __c) {$/;"	f	struct:_Container_concept_specification
_DEFPIN_ARM	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	101;"	d
_DEFPIN_ESP32	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	53;"	d
_DEFPIN_ESP8266	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	45;"	d
_DefaultConstructible_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _DefaultConstructible_concept_specification {$/;"	s
_DefaultConstructible_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  static void _DefaultConstructible_requirement_violation(_Type __a) {$/;"	f	struct:_DefaultConstructible_concept_specification
_Deque_alloc_base	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_alloc_base(const allocator_type& __a)$/;"	f	class:_Deque_alloc_base
_Deque_alloc_base	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_alloc_base(const allocator_type&) : _M_map(0), _M_map_size(0) {}$/;"	f	class:_Deque_alloc_base
_Deque_alloc_base	.\lib\avr-stl\include\stl_deque.h	/^class _Deque_alloc_base {$/;"	c
_Deque_alloc_base	.\lib\avr-stl\include\stl_deque.h	/^class _Deque_alloc_base<_Tp, _Alloc, true>$/;"	c
_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_base(const allocator_type& __a) $/;"	f	class:_Deque_base
_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:_Deque_base
_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_base(const allocator_type&)$/;"	f	class:_Deque_base
_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_base(const allocator_type&, size_t __num_elements)$/;"	f	class:_Deque_base
_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^class _Deque_base {$/;"	c
_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^class _Deque_base$/;"	c
_Deque_iterator	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:_Deque_iterator
_Deque_iterator	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_iterator(_Tp* __x, _Map_pointer __y) $/;"	f	struct:_Deque_iterator
_Deque_iterator	.\lib\avr-stl\include\stl_deque.h	/^  _Deque_iterator(const iterator& __x)$/;"	f	struct:_Deque_iterator
_Deque_iterator	.\lib\avr-stl\include\stl_deque.h	/^struct _Deque_iterator {$/;"	s
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(_Tp* __pointer) {$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(char*, char*) {}$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(double*, double*) {}$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(float*, float*) {}$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(int*, int*) {}$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(long*, long*) {}$/;"	f
_Destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void _Destroy(wchar_t*, wchar_t*) {}$/;"	f
_Distance	.\lib\avr-stl\include\stl_algobase.h	/^          _Distance;$/;"	t	struct:__copy_backward_dispatch
_ERROR_IN_STL_CONTAINER	.\lib\avr-stl\include\container_concepts.h	/^struct _ERROR_IN_STL_CONTAINER {$/;"	s
_ERROR_IN_STL_SEQ	.\lib\avr-stl\include\sequence_concepts.h	/^struct _ERROR_IN_STL_SEQ {$/;"	s
_ESPPIN	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^template<uint8_t PIN, uint32_t MASK> class _ESPPIN {$/;"	c
_ESPPIN	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^template<uint8_t PIN, uint32_t MASK> class _ESPPIN {$/;"	c
_ESP_ADJ	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	56;"	d
_ESP_ADJ	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	52;"	d
_ESP_ADJ2	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	57;"	d
_ESP_ADJ2	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	53;"	d
_Eq_int_traits	.\lib\avr-stl\include\stl_ctraits_fns.h	/^struct _Eq_int_traits$/;"	s
_Eq_traits	.\lib\avr-stl\include\stl_ctraits_fns.h	/^struct _Eq_traits$/;"	s
_EqualityComparable_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _EqualityComparable_concept_specification {$/;"	s
_EqualityComparable_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  static void _EqualityComparable_requirement_violation(_Type __a) {$/;"	f	struct:_EqualityComparable_concept_specification
_ForwardContainer_concept_specification	.\lib\avr-stl\include\container_concepts.h	/^struct _ForwardContainer_concept_specification {$/;"	s
_ForwardContainer_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^_ForwardContainer_requirement_violation(_ForwardContainer __c) {$/;"	f	struct:_ForwardContainer_concept_specification
_ForwardIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _ForwardIterator_concept_specification {$/;"	s
_ForwardIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_ForwardIterator_concept_specification
_FrontInsertionSequence_concept_specification	.\lib\avr-stl\include\sequence_concepts.h	/^struct _FrontInsertionSequence_concept_specification {$/;"	s
_FrontInsertionSequence_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^_FrontInsertionSequence_requirement_violation(_FrontInsertionSequence __s) {$/;"	f	struct:_FrontInsertionSequence_concept_specification
_G1_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2192;"	d	file:
_G2_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2193;"	d	file:
_G3_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2194;"	d	file:
_GAMMA_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2190;"	d	file:
_GBASE_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^static const int _GBASE_ = __COUNTER__ + 1; \/\/ Index of 1st __COUNTER__ below$/;"	v	file:
_GPB	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	11;"	d
_GPB0	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	11;"	d
_GPO	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  volatile uint32_t _GPO;$/;"	m	struct:FASTLED_ESP_IO
_GPO	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  volatile uint32_t _GPO;$/;"	m	struct:FASTLED_ESP_IO
_GPOC	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  volatile uint32_t _GPOC;$/;"	m	struct:FASTLED_ESP_IO
_GPOC	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  volatile uint32_t _GPOC;$/;"	m	struct:FASTLED_ESP_IO
_GPOS	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  volatile uint32_t _GPOS;$/;"	m	struct:FASTLED_ESP_IO
_GPOS	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  volatile uint32_t _GPOS;$/;"	m	struct:FASTLED_ESP_IO
_HELPER_3DMATH_H_	.\lib\MPU6050\helper_3dmath.h	33;"	d
_Hashtable	.\lib\avr-stl\include\stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:_Hashtable_const_iterator
_Hashtable	.\lib\avr-stl\include\stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:_Hashtable_iterator
_Hashtable_const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable_const_iterator() {}$/;"	f	struct:_Hashtable_const_iterator
_Hashtable_const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)$/;"	f	struct:_Hashtable_const_iterator
_Hashtable_const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable_const_iterator(const iterator& __it) $/;"	f	struct:_Hashtable_const_iterator
_Hashtable_const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^struct _Hashtable_const_iterator {$/;"	s
_Hashtable_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable_iterator() {}$/;"	f	struct:_Hashtable_iterator
_Hashtable_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable_iterator(_Node* __n, _Hashtable* __tab) $/;"	f	struct:_Hashtable_iterator
_Hashtable_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^struct _Hashtable_iterator {$/;"	s
_Hashtable_node	.\lib\avr-stl\include\stl_hashtable.h	/^struct _Hashtable_node$/;"	s
_Ht	.\lib\avr-stl\include\stl_hash_map.h	/^                    _Select1st<pair<const _Key,_Tp> >,_EqualKey,_Alloc> _Ht;$/;"	t	class:hash_map
_Ht	.\lib\avr-stl\include\stl_hash_map.h	/^          _Ht;$/;"	t	class:hash_multimap
_Ht	.\lib\avr-stl\include\stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:hash_multiset
_Ht	.\lib\avr-stl\include\stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:hash_set
_I2CDEV_H_	.\lib\I2Cdev\I2Cdev.h	47;"	d
_Identity	.\lib\avr-stl\include\stl_function.h	/^struct _Identity : public unary_function<_Tp,_Tp> {$/;"	s
_InputIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _InputIterator_concept_specification {$/;"	s
_InputIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_InputIterator_requirement_violation(_InputIterator __i) {$/;"	f	struct:_InputIterator_concept_specification
_Integral	.\lib\avr-stl\include\type_traits.h	/^  typedef __false_type _Integral;$/;"	t	struct:_Is_integer
_Integral	.\lib\avr-stl\include\type_traits.h	/^  typedef __true_type _Integral;$/;"	t	struct:_Is_integer
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<bool> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<char> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<int> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<long long> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<long> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<short> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<signed char> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned char> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned int> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned long long> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned long> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned short> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<wchar_t> {$/;"	s
_Is_integer	.\lib\avr-stl\include\type_traits.h	/^template <class _Tp> struct _Is_integer {$/;"	s
_Iterator_base	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_iterator_base  _Iterator_base;$/;"	t	class:slist
_LessThanComparable_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _LessThanComparable_concept_specification {$/;"	s
_LessThanComparable_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  static void _LessThanComparable_requirement_violation(_Type __a) {$/;"	f	struct:_LessThanComparable_concept_specification
_Link_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_node* _Link_type;$/;"	t	class:_Rb_tree
_Link_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:_Rb_tree_iterator
_Link_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:_Rb_tree_node
_List_alloc_base	.\lib\avr-stl\include\stl_list.h	/^  _List_alloc_base(const allocator_type& __a) : _Node_allocator(__a) {}$/;"	f	class:_List_alloc_base
_List_alloc_base	.\lib\avr-stl\include\stl_list.h	/^  _List_alloc_base(const allocator_type&) {}$/;"	f	class:_List_alloc_base
_List_alloc_base	.\lib\avr-stl\include\stl_list.h	/^class _List_alloc_base {$/;"	c
_List_alloc_base	.\lib\avr-stl\include\stl_list.h	/^class _List_alloc_base<_Tp, _Allocator, true> {$/;"	c
_List_base	.\lib\avr-stl\include\stl_list.h	/^  _List_base(const allocator_type& __a) : _Base(__a) {$/;"	f	class:_List_base
_List_base	.\lib\avr-stl\include\stl_list.h	/^  _List_base(const allocator_type&) {$/;"	f	class:_List_base
_List_base	.\lib\avr-stl\include\stl_list.h	/^class _List_base $/;"	c
_List_iterator	.\lib\avr-stl\include\stl_list.h	/^  _List_iterator() {}$/;"	f	struct:_List_iterator
_List_iterator	.\lib\avr-stl\include\stl_list.h	/^  _List_iterator(_Node* __x) : _List_iterator_base(__x) {}$/;"	f	struct:_List_iterator
_List_iterator	.\lib\avr-stl\include\stl_list.h	/^  _List_iterator(const iterator& __x) : _List_iterator_base(__x._M_node) {}$/;"	f	struct:_List_iterator
_List_iterator	.\lib\avr-stl\include\stl_list.h	/^struct _List_iterator : public _List_iterator_base {$/;"	s
_List_iterator_base	.\lib\avr-stl\include\stl_list.h	/^  _List_iterator_base() {}$/;"	f	struct:_List_iterator_base
_List_iterator_base	.\lib\avr-stl\include\stl_list.h	/^  _List_iterator_base(_List_node_base* __x) : _M_node(__x) {}$/;"	f	struct:_List_iterator_base
_List_iterator_base	.\lib\avr-stl\include\stl_list.h	/^struct _List_iterator_base {$/;"	s
_List_node	.\lib\avr-stl\include\stl_list.h	/^struct _List_node : public _List_node_base {$/;"	s
_List_node_base	.\lib\avr-stl\include\stl_list.h	/^struct _List_node_base {$/;"	s
_Lock	.\lib\avr-stl\include\stl_alloc.h	/^            _Lock() { __NODE_ALLOCATOR_LOCK; }$/;"	f	class:__default_alloc_template::_Lock
_Lock	.\lib\avr-stl\include\stl_alloc.h	/^    class _Lock {$/;"	c	class:__default_alloc_template
_Lt_traits	.\lib\avr-stl\include\stl_ctraits_fns.h	/^struct _Lt_traits$/;"	s
_MAX_BYTES	.\lib\avr-stl\include\stl_alloc.h	/^    enum {_MAX_BYTES = 128};$/;"	e	enum:__default_alloc_template::__anon13
_MAX_BYTES	.\lib\avr-stl\include\stl_alloc.h	/^  enum {_MAX_BYTES = 128};$/;"	e	enum:__anon10
_MOV1	.\lib\FastLED\platforms\avr\clockless_trinket.h	285;"	d
_MOV_FIX03	.\lib\FastLED\platforms\avr\clockless_trinket.h	291;"	d
_MOV_FIX03	.\lib\FastLED\platforms\avr\clockless_trinket.h	297;"	d
_MOV_FIX13	.\lib\FastLED\platforms\avr\clockless_trinket.h	292;"	d
_MOV_FIX13	.\lib\FastLED\platforms\avr\clockless_trinket.h	298;"	d
_MOV_FIX23	.\lib\FastLED\platforms\avr\clockless_trinket.h	293;"	d
_MOV_FIX23	.\lib\FastLED\platforms\avr\clockless_trinket.h	299;"	d
_MPU6050_6AXIS_MOTIONAPPS20_H_	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	34;"	d
_MPU6050_9AXIS_MOTIONAPPS41_H_	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	34;"	d
_MPU6050_H_	.\lib\MPU6050\MPU6050.h	38;"	d
_M_allocate	.\lib\avr-stl\include\stl_vector.h	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:_Vector_alloc_base
_M_allocate_and_copy	.\lib\avr-stl\include\stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, _ForwardIterator __first, $/;"	f	class:vector
_M_allocate_and_copy	.\lib\avr-stl\include\stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, const_iterator __first, $/;"	f	class:vector
_M_allocate_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  void _M_allocate_buffer() {$/;"	f	class:_Temporary_buffer
_M_allocate_map	.\lib\avr-stl\include\stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:_Deque_alloc_base
_M_allocate_map	.\lib\avr-stl\include\stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:_Deque_base
_M_allocate_node	.\lib\avr-stl\include\stl_deque.h	/^  _Tp* _M_allocate_node() {$/;"	f	class:_Deque_alloc_base
_M_allocate_node	.\lib\avr-stl\include\stl_deque.h	/^  _Tp* _M_allocate_node()$/;"	f	class:_Deque_base
_M_assign_aux	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:__BVECTOR
_M_assign_aux	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR
_M_assign_aux	.\lib\avr-stl\include\stl_deque.h	/^  ::_M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)$/;"	f	class:deque
_M_assign_aux	.\lib\avr-stl\include\stl_deque.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:deque
_M_assign_aux	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,$/;"	f	class:vector
_M_assign_aux	.\lib\avr-stl\include\stl_vector.h	/^void vector<_Tp, _Alloc>::_M_assign_aux(_InputIter __first, _InputIter __last,$/;"	f	class:vector
_M_assign_dispatch	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:__BVECTOR
_M_assign_dispatch	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:__BVECTOR
_M_assign_dispatch	.\lib\avr-stl\include\stl_deque.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:deque
_M_assign_dispatch	.\lib\avr-stl\include\stl_deque.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:deque
_M_assign_dispatch	.\lib\avr-stl\include\stl_list.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:list
_M_assign_dispatch	.\lib\avr-stl\include\stl_list.h	/^list<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first2, _InputIter __last2,$/;"	f	class:list
_M_assign_dispatch	.\lib\avr-stl\include\stl_slist.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:slist
_M_assign_dispatch	.\lib\avr-stl\include\stl_slist.h	/^slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:slist
_M_assign_dispatch	.\lib\avr-stl\include\stl_vector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:vector
_M_assign_dispatch	.\lib\avr-stl\include\stl_vector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:vector
_M_bit_alloc	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:_Bvector_alloc_base
_M_bit_alloc	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:_Bvector_base
_M_bkt_num	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj) const$/;"	f	class:hashtable
_M_bkt_num	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj, size_t __n) const$/;"	f	class:hashtable
_M_bkt_num_key	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key) const$/;"	f	class:hashtable
_M_bkt_num_key	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key, size_t __n) const$/;"	f	class:hashtable
_M_buckets	.\lib\avr-stl\include\stl_hashtable.h	/^  vector<_Node*,_Alloc> _M_buckets;$/;"	m	class:hashtable
_M_buf	.\lib\avr-stl\include\stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:istreambuf_iterator
_M_buf	.\lib\avr-stl\include\stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:ostreambuf_iterator
_M_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  _Tp*       _M_buffer;$/;"	m	class:_Temporary_buffer
_M_bump_down	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_bump_down() {$/;"	f	struct:_Bit_iterator_base
_M_bump_up	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_bump_up() {$/;"	f	struct:_Bit_iterator_base
_M_c	.\lib\avr-stl\include\stl_iterator.h	/^  mutable _CharT _M_c;$/;"	m	class:istreambuf_iterator
_M_client_data	.\lib\avr-stl\include\stl_alloc.h	/^        char _M_client_data[1];    \/* The client sees this.        *\/$/;"	m	union:__default_alloc_template::_Obj
_M_clone_node	.\lib\avr-stl\include\stl_tree.h	/^  _Link_type _M_clone_node(_Link_type __x)$/;"	f	class:_Rb_tree
_M_color	.\lib\avr-stl\include\stl_tree.h	/^  _Color_type _M_color; $/;"	m	struct:_Rb_tree_node_base
_M_copy	.\lib\avr-stl\include\stl_tree.h	/^  ::_M_copy(_Link_type __x, _Link_type __p)$/;"	f	class:_Rb_tree
_M_copy_from	.\lib\avr-stl\include\stl_hashtable.h	/^  ::_M_copy_from(const hashtable& __ht)$/;"	f	class:hashtable
_M_create_node	.\lib\avr-stl\include\stl_list.h	/^  _Node* _M_create_node()$/;"	f	class:list
_M_create_node	.\lib\avr-stl\include\stl_list.h	/^  _Node* _M_create_node(const _Tp& __x)$/;"	f	class:list
_M_create_node	.\lib\avr-stl\include\stl_slist.h	/^  _Node* _M_create_node() {$/;"	f	class:slist
_M_create_node	.\lib\avr-stl\include\stl_slist.h	/^  _Node* _M_create_node(const value_type& __x) {$/;"	f	class:slist
_M_create_node	.\lib\avr-stl\include\stl_tree.h	/^  _Link_type _M_create_node(const value_type& __x)$/;"	f	class:_Rb_tree
_M_create_nodes	.\lib\avr-stl\include\stl_deque.h	/^void _Deque_base<_Tp,_Alloc>::_M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:_Deque_base
_M_cur	.\lib\avr-stl\include\stl_deque.h	/^  _Tp* _M_cur;$/;"	m	struct:_Deque_iterator
_M_cur	.\lib\avr-stl\include\stl_hashtable.h	/^  _Node* _M_cur;$/;"	m	struct:_Hashtable_iterator
_M_cur	.\lib\avr-stl\include\stl_hashtable.h	/^  const _Node* _M_cur;$/;"	m	struct:_Hashtable_const_iterator
_M_data	.\lib\avr-stl\include\stl_list.h	/^  _Tp _M_data;$/;"	m	struct:_List_node
_M_data	.\lib\avr-stl\include\stl_slist.h	/^  _Tp _M_data;$/;"	m	struct:_Slist_node
_M_data_allocator	.\lib\avr-stl\include\stl_bvector.h	/^          _M_data_allocator;$/;"	m	class:_Bvector_alloc_base
_M_data_allocator	.\lib\avr-stl\include\stl_vector.h	/^  allocator_type _M_data_allocator;$/;"	m	class:_Vector_alloc_base
_M_deallocate	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:_Bvector_alloc_base
_M_deallocate	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:_Bvector_base
_M_deallocate	.\lib\avr-stl\include\stl_vector.h	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:_Vector_alloc_base
_M_deallocate_map	.\lib\avr-stl\include\stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:_Deque_alloc_base
_M_deallocate_map	.\lib\avr-stl\include\stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:_Deque_base
_M_deallocate_node	.\lib\avr-stl\include\stl_deque.h	/^  void _M_deallocate_node(_Tp* __p) {$/;"	f	class:_Deque_alloc_base
_M_deallocate_node	.\lib\avr-stl\include\stl_deque.h	/^  void _M_deallocate_node(_Tp* __p)$/;"	f	class:_Deque_base
_M_decr	.\lib\avr-stl\include\stl_list.h	/^  void _M_decr() { _M_node = _M_node->_M_prev; }$/;"	f	struct:_List_iterator_base
_M_decrement	.\lib\avr-stl\include\stl_tree.h	/^  void _M_decrement()$/;"	f	struct:_Rb_tree_base_iterator
_M_delete_node	.\lib\avr-stl\include\stl_hashtable.h	/^  void _M_delete_node(_Node* __n)$/;"	f	class:hashtable
_M_dereference_aux	.\lib\avr-stl\include\stl_iterator.h	/^_CharT istreambuf_iterator<_CharT, _Traits>::_M_dereference_aux() const$/;"	f	class:istreambuf_iterator
_M_destroy_nodes	.\lib\avr-stl\include\stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:_Deque_base
_M_empty_initialize	.\lib\avr-stl\include\stl_tree.h	/^  void _M_empty_initialize() {$/;"	f	class:_Rb_tree
_M_end_marker	.\lib\avr-stl\include\stl_iterator.h	/^  bool _M_end_marker;$/;"	m	class:istream_iterator
_M_end_of_storage	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int* _M_end_of_storage;  $/;"	m	class:_Bvector_base
_M_end_of_storage	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int* _M_end_of_storage;$/;"	m	class:_Bvector_alloc_base
_M_end_of_storage	.\lib\avr-stl\include\stl_vector.h	/^  _Tp* _M_end_of_storage;$/;"	m	class:_Vector_alloc_base
_M_equal	.\lib\avr-stl\include\stl_iterator.h	/^  bool _M_equal(const istream_iterator& __x) const$/;"	f	class:istream_iterator
_M_equal_aux	.\lib\avr-stl\include\stl_iterator.h	/^  ::_M_equal_aux(const istreambuf_iterator& __i) const$/;"	f	class:istreambuf_iterator
_M_equals	.\lib\avr-stl\include\stl_hashtable.h	/^  key_equal             _M_equals;$/;"	m	class:hashtable
_M_erase	.\lib\avr-stl\include\stl_tree.h	/^  ::_M_erase(_Link_type __x)$/;"	f	class:_Rb_tree
_M_erase_after	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)$/;"	f	struct:_Slist_base
_M_erase_after	.\lib\avr-stl\include\stl_slist.h	/^_Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,$/;"	f	class:_Slist_base
_M_erase_bucket	.\lib\avr-stl\include\stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)$/;"	f	class:hashtable
_M_erase_bucket	.\lib\avr-stl\include\stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __last)$/;"	f	class:hashtable
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:mem_fun_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:mem_fun_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:mem_fun_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:mem_fun_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_ref_t
_M_f	.\lib\avr-stl\include\stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_t
_M_fill_assign	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_fill_assign(size_t __n, bool __x) {$/;"	f	class:__BVECTOR
_M_fill_assign	.\lib\avr-stl\include\stl_deque.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:deque
_M_fill_assign	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:list
_M_fill_assign	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:slist
_M_fill_assign	.\lib\avr-stl\include\stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val) $/;"	f	class:vector
_M_fill_initialize	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_fill_initialize(const value_type& __value) {$/;"	f	class:deque
_M_fill_insert	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_fill_insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:__BVECTOR
_M_fill_insert	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp, _Alloc>::_M_fill_insert(iterator __pos,$/;"	f	class:deque
_M_fill_insert	.\lib\avr-stl\include\stl_list.h	/^list<_Tp, _Alloc>::_M_fill_insert(iterator __position,$/;"	f	class:list
_M_fill_insert	.\lib\avr-stl\include\stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n, $/;"	f	class:vector
_M_finish	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:_Bvector_alloc_base
_M_finish	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:_Bvector_base
_M_finish	.\lib\avr-stl\include\stl_deque.h	/^  iterator _M_finish;$/;"	m	class:_Deque_base
_M_finish	.\lib\avr-stl\include\stl_vector.h	/^  _Tp* _M_finish;$/;"	m	class:_Vector_alloc_base
_M_first	.\lib\avr-stl\include\stl_deque.h	/^  _Tp* _M_first;$/;"	m	struct:_Deque_iterator
_M_fn1	.\lib\avr-stl\include\stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:binary_compose
_M_fn1	.\lib\avr-stl\include\stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:unary_compose
_M_fn2	.\lib\avr-stl\include\stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:binary_compose
_M_fn2	.\lib\avr-stl\include\stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:unary_compose
_M_fn3	.\lib\avr-stl\include\stl_function.h	/^  _Operation3 _M_fn3;$/;"	m	class:binary_compose
_M_free_list_link	.\lib\avr-stl\include\stl_alloc.h	/^        union _Obj* _M_free_list_link;$/;"	m	union:__default_alloc_template::_Obj	typeref:union:__default_alloc_template::_Obj::_Obj
_M_get_key	.\lib\avr-stl\include\stl_hashtable.h	/^  _ExtractKey           _M_get_key;$/;"	m	class:hashtable
_M_get_node	.\lib\avr-stl\include\stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator.allocate(1); }$/;"	f	class:hashtable
_M_get_node	.\lib\avr-stl\include\stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator_type::allocate(1); }$/;"	f	class:hashtable
_M_get_node	.\lib\avr-stl\include\stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_List_alloc_base
_M_get_node	.\lib\avr-stl\include\stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_List_base
_M_get_node	.\lib\avr-stl\include\stl_list.h	/^  _List_node<_Tp>* _M_get_node()$/;"	f	class:_List_alloc_base
_M_get_node	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() $/;"	f	class:_Slist_alloc_base
_M_get_node	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_Slist_alloc_base
_M_get_node	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	struct:_Slist_base
_M_get_node	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node() $/;"	f	class:_Rb_tree_alloc_base
_M_get_node	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	class:_Rb_tree_alloc_base
_M_get_node	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	struct:_Rb_tree_base
_M_getc	.\lib\avr-stl\include\stl_iterator.h	/^  void _M_getc() const {$/;"	f	class:istreambuf_iterator
_M_hash	.\lib\avr-stl\include\stl_hashtable.h	/^  hasher                _M_hash;$/;"	m	class:hashtable
_M_head	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	class:_Slist_alloc_base
_M_head	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	struct:_Slist_base
_M_header	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	class:_Rb_tree_alloc_base
_M_header	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	struct:_Rb_tree_base
_M_ht	.\lib\avr-stl\include\stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:hash_map
_M_ht	.\lib\avr-stl\include\stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:hash_multimap
_M_ht	.\lib\avr-stl\include\stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:hash_multiset
_M_ht	.\lib\avr-stl\include\stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:hash_set
_M_ht	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable* _M_ht;$/;"	m	struct:_Hashtable_iterator
_M_ht	.\lib\avr-stl\include\stl_hashtable.h	/^  const _Hashtable* _M_ht;$/;"	m	struct:_Hashtable_const_iterator
_M_incr	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_incr(ptrdiff_t __i) {$/;"	f	struct:_Bit_iterator_base
_M_incr	.\lib\avr-stl\include\stl_list.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:_List_iterator_base
_M_incr	.\lib\avr-stl\include\stl_slist.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:_Slist_iterator_base
_M_increment	.\lib\avr-stl\include\stl_tree.h	/^  void _M_increment()$/;"	f	struct:_Rb_tree_base_iterator
_M_index1	.\lib\avr-stl\include\stl_function.h	/^  size_t _M_index1;$/;"	m	class:subtractive_rng
_M_index2	.\lib\avr-stl\include\stl_function.h	/^  size_t _M_index2;$/;"	m	class:subtractive_rng
_M_init	.\lib\avr-stl\include\stl_iterator.h	/^  void _M_init(streambuf_type* __p) {$/;"	f	class:istreambuf_iterator
_M_initialize	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_initialize(size_type __n) {$/;"	f	class:__BVECTOR
_M_initialize	.\lib\avr-stl\include\stl_function.h	/^  void _M_initialize(unsigned int __seed)$/;"	f	class:subtractive_rng
_M_initialize_aux	.\lib\avr-stl\include\stl_vector.h	/^  void _M_initialize_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:vector
_M_initialize_aux	.\lib\avr-stl\include\stl_vector.h	/^  void _M_initialize_aux(_Integer __n, _Integer __value, __true_type) {$/;"	f	class:vector
_M_initialize_buckets	.\lib\avr-stl\include\stl_hashtable.h	/^  void _M_initialize_buckets(size_type __n)$/;"	f	class:hashtable
_M_initialize_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp& val, __false_type) {$/;"	f	class:_Temporary_buffer
_M_initialize_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp&, __true_type) {}$/;"	f	class:_Temporary_buffer
_M_initialize_dispatch	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR
_M_initialize_dispatch	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:__BVECTOR
_M_initialize_dispatch	.\lib\avr-stl\include\stl_deque.h	/^  void _M_initialize_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:deque
_M_initialize_dispatch	.\lib\avr-stl\include\stl_deque.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:deque
_M_initialize_map	.\lib\avr-stl\include\stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_initialize_map(size_t __num_elements)$/;"	f	class:_Deque_base
_M_initialize_range	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:__BVECTOR
_M_initialize_range	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR
_M_insert	.\lib\avr-stl\include\stl_tree.h	/^  ::_M_insert(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)$/;"	f	class:_Rb_tree
_M_insert_after	.\lib\avr-stl\include\stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos) {$/;"	f	class:slist
_M_insert_after	.\lib\avr-stl\include\stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos, const value_type& __x) {$/;"	f	class:slist
_M_insert_after_fill	.\lib\avr-stl\include\stl_slist.h	/^  void _M_insert_after_fill(_Node_base* __pos,$/;"	f	class:slist
_M_insert_after_range	.\lib\avr-stl\include\stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, $/;"	f	class:slist
_M_insert_after_range	.\lib\avr-stl\include\stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,$/;"	f	class:slist
_M_insert_after_range	.\lib\avr-stl\include\stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist
_M_insert_aux	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_insert_aux(iterator __position, bool __x) {$/;"	f	class:__BVECTOR
_M_insert_aux	.\lib\avr-stl\include\stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos)$/;"	f	class:deque
_M_insert_aux	.\lib\avr-stl\include\stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos, const value_type& __x)$/;"	f	class:deque
_M_insert_aux	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque
_M_insert_aux	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position)$/;"	f	class:vector
_M_insert_aux	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, const _Tp& __x)$/;"	f	class:vector
_M_insert_dispatch	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:__BVECTOR
_M_insert_dispatch	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:__BVECTOR
_M_insert_dispatch	.\lib\avr-stl\include\stl_deque.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:deque
_M_insert_dispatch	.\lib\avr-stl\include\stl_deque.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:deque
_M_insert_dispatch	.\lib\avr-stl\include\stl_list.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:list
_M_insert_dispatch	.\lib\avr-stl\include\stl_list.h	/^list<_Tp, _Alloc>::_M_insert_dispatch(iterator __position,$/;"	f	class:list
_M_insert_dispatch	.\lib\avr-stl\include\stl_vector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:vector
_M_insert_dispatch	.\lib\avr-stl\include\stl_vector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:vector
_M_insert_range	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_insert_range(iterator __pos,$/;"	f	class:__BVECTOR
_M_insert_range	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_insert_range(iterator __position,$/;"	f	class:__BVECTOR
_M_iter	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  _ForwardIterator _M_iter;$/;"	m	class:raw_storage_iterator
_M_key_compare	.\lib\avr-stl\include\stl_tree.h	/^  _Compare _M_key_compare;$/;"	m	class:_Rb_tree
_M_last	.\lib\avr-stl\include\stl_deque.h	/^  _Tp* _M_last;$/;"	m	struct:_Deque_iterator
_M_left	.\lib\avr-stl\include\stl_tree.h	/^  _Base_ptr _M_left;$/;"	m	struct:_Rb_tree_node_base
_M_leftmost	.\lib\avr-stl\include\stl_tree.h	/^  _Link_type& _M_leftmost() const $/;"	f	class:_Rb_tree
_M_len	.\lib\avr-stl\include\stl_tempbuf.h	/^  ptrdiff_t  _M_len;$/;"	m	class:_Temporary_buffer
_M_map	.\lib\avr-stl\include\stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:_Deque_alloc_base
_M_map	.\lib\avr-stl\include\stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:_Deque_base
_M_map_allocator	.\lib\avr-stl\include\stl_deque.h	/^  _Map_allocator_type _M_map_allocator;$/;"	m	class:_Deque_alloc_base
_M_map_size	.\lib\avr-stl\include\stl_deque.h	/^  size_t _M_map_size;  $/;"	m	class:_Deque_base
_M_map_size	.\lib\avr-stl\include\stl_deque.h	/^  size_t _M_map_size;$/;"	m	class:_Deque_alloc_base
_M_mask	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int _M_mask;$/;"	m	struct:_Bit_reference
_M_new_elements_at_back	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_back(size_type __new_elems)$/;"	f	class:deque
_M_new_elements_at_front	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_front(size_type __new_elems)$/;"	f	class:deque
_M_new_node	.\lib\avr-stl\include\stl_hashtable.h	/^  _Node* _M_new_node(const value_type& __obj)$/;"	f	class:hashtable
_M_next	.\lib\avr-stl\include\stl_hashtable.h	/^  _Hashtable_node* _M_next;$/;"	m	struct:_Hashtable_node
_M_next	.\lib\avr-stl\include\stl_list.h	/^  _List_node_base* _M_next;$/;"	m	struct:_List_node_base
_M_next	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node_base* _M_next;$/;"	m	struct:_Slist_node_base
_M_next_size	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type _M_next_size(size_type __n) const$/;"	f	class:hashtable
_M_nextc	.\lib\avr-stl\include\stl_iterator.h	/^  void _M_nextc() {$/;"	f	class:istreambuf_iterator
_M_node	.\lib\avr-stl\include\stl_deque.h	/^  _Map_pointer _M_node;$/;"	m	struct:_Deque_iterator
_M_node	.\lib\avr-stl\include\stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:_List_alloc_base
_M_node	.\lib\avr-stl\include\stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:_List_base
_M_node	.\lib\avr-stl\include\stl_list.h	/^  _List_node_base* _M_node;$/;"	m	struct:_List_iterator_base
_M_node	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_node_base* _M_node;$/;"	m	struct:_Slist_iterator_base
_M_node	.\lib\avr-stl\include\stl_tree.h	/^  _Base_ptr _M_node;$/;"	m	struct:_Rb_tree_base_iterator
_M_node_allocator	.\lib\avr-stl\include\stl_deque.h	/^  allocator_type      _M_node_allocator;$/;"	m	class:_Deque_alloc_base
_M_node_allocator	.\lib\avr-stl\include\stl_hashtable.h	/^  typename _Alloc_traits<_Node, _Alloc>::allocator_type _M_node_allocator;$/;"	m	class:hashtable
_M_node_allocator	.\lib\avr-stl\include\stl_slist.h	/^           _M_node_allocator;$/;"	m	class:_Slist_alloc_base
_M_node_allocator	.\lib\avr-stl\include\stl_tree.h	/^           _M_node_allocator;$/;"	m	class:_Rb_tree_alloc_base
_M_node_allocator_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef simple_alloc<_Node, _Alloc> _M_node_allocator_type;$/;"	t	class:hashtable
_M_node_count	.\lib\avr-stl\include\stl_tree.h	/^  size_type _M_node_count; \/\/ keeps track of size of tree$/;"	m	class:_Rb_tree
_M_num_elements	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type             _M_num_elements;$/;"	m	class:hashtable
_M_offset	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int _M_offset;$/;"	m	struct:_Bit_iterator_base
_M_ok	.\lib\avr-stl\include\stl_iterator.h	/^  bool _M_ok;$/;"	m	class:istream_iterator
_M_ok	.\lib\avr-stl\include\stl_iterator.h	/^  bool _M_ok;$/;"	m	class:ostreambuf_iterator
_M_original_len	.\lib\avr-stl\include\stl_tempbuf.h	/^  ptrdiff_t  _M_original_len;$/;"	m	class:_Temporary_buffer
_M_p	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:_Bit_iterator_base
_M_p	.\lib\avr-stl\include\stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:_Bit_reference
_M_parent	.\lib\avr-stl\include\stl_tree.h	/^  _Base_ptr _M_parent;$/;"	m	struct:_Rb_tree_node_base
_M_pop_back_aux	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_back_aux()$/;"	f	class:deque
_M_pop_front_aux	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_front_aux()$/;"	f	class:deque
_M_postincr_aux	.\lib\avr-stl\include\stl_iterator.h	/^void istreambuf_iterator<_CharT, _Traits>::_M_postincr_aux()$/;"	f	class:istreambuf_iterator
_M_pred	.\lib\avr-stl\include\stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:binary_negate
_M_pred	.\lib\avr-stl\include\stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:unary_negate
_M_prev	.\lib\avr-stl\include\stl_list.h	/^  _List_node_base* _M_prev;$/;"	m	struct:_List_node_base
_M_ptr	.\lib\avr-stl\include\stl_function.h	/^    _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:pointer_to_binary_function
_M_ptr	.\lib\avr-stl\include\stl_function.h	/^  _Result (*_M_ptr)(_Arg);$/;"	m	class:pointer_to_unary_function
_M_push_back_aux	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux()$/;"	f	class:deque
_M_push_back_aux	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux(const value_type& __t)$/;"	f	class:deque
_M_push_front_aux	.\lib\avr-stl\include\stl_deque.h	/^void  deque<_Tp,_Alloc>::_M_push_front_aux(const value_type& __t)$/;"	f	class:deque
_M_push_front_aux	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_front_aux()$/;"	f	class:deque
_M_put_node	.\lib\avr-stl\include\stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	f	class:hashtable
_M_put_node	.\lib\avr-stl\include\stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	f	class:hashtable
_M_put_node	.\lib\avr-stl\include\stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	f	class:_List_base
_M_put_node	.\lib\avr-stl\include\stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:_List_alloc_base
_M_put_node	.\lib\avr-stl\include\stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:_List_alloc_base
_M_put_node	.\lib\avr-stl\include\stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) $/;"	f	class:_Slist_alloc_base
_M_put_node	.\lib\avr-stl\include\stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:_Slist_alloc_base
_M_put_node	.\lib\avr-stl\include\stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	struct:_Slist_base
_M_put_node	.\lib\avr-stl\include\stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p) $/;"	f	class:_Rb_tree_alloc_base
_M_put_node	.\lib\avr-stl\include\stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	class:_Rb_tree_alloc_base
_M_put_node	.\lib\avr-stl\include\stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	struct:_Rb_tree_base
_M_range_check	.\lib\avr-stl\include\stl_bvector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:__BVECTOR
_M_range_check	.\lib\avr-stl\include\stl_deque.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:deque
_M_range_check	.\lib\avr-stl\include\stl_vector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:vector
_M_range_initialize	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_ForwardIterator __first,$/;"	f	class:deque
_M_range_initialize	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_InputIterator __first,$/;"	f	class:deque
_M_range_initialize	.\lib\avr-stl\include\stl_vector.h	/^  void _M_range_initialize(_ForwardIterator __first,$/;"	f	class:vector
_M_range_initialize	.\lib\avr-stl\include\stl_vector.h	/^  void _M_range_initialize(_InputIterator __first,  $/;"	f	class:vector
_M_range_insert	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __pos, $/;"	f	class:vector
_M_range_insert	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __position,$/;"	f	class:vector
_M_read	.\lib\avr-stl\include\stl_iterator.h	/^  void _M_read() {$/;"	f	class:istream_iterator
_M_reallocate_map	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::_M_reallocate_map(size_type __nodes_to_add,$/;"	f	class:deque
_M_reserve_elements_at_back	.\lib\avr-stl\include\stl_deque.h	/^  iterator _M_reserve_elements_at_back(size_type __n) {$/;"	f	class:deque
_M_reserve_elements_at_front	.\lib\avr-stl\include\stl_deque.h	/^  iterator _M_reserve_elements_at_front(size_type __n) {$/;"	f	class:deque
_M_reserve_map_at_back	.\lib\avr-stl\include\stl_deque.h	/^  void _M_reserve_map_at_back (size_type __nodes_to_add = 1) {$/;"	f	class:deque
_M_reserve_map_at_front	.\lib\avr-stl\include\stl_deque.h	/^  void _M_reserve_map_at_front (size_type __nodes_to_add = 1) {$/;"	f	class:deque
_M_right	.\lib\avr-stl\include\stl_tree.h	/^  _Base_ptr _M_right;$/;"	m	struct:_Rb_tree_node_base
_M_rightmost	.\lib\avr-stl\include\stl_tree.h	/^  _Link_type& _M_rightmost() const $/;"	f	class:_Rb_tree
_M_root	.\lib\avr-stl\include\stl_tree.h	/^  _Link_type& _M_root() const $/;"	f	class:_Rb_tree
_M_set_node	.\lib\avr-stl\include\stl_deque.h	/^  void _M_set_node(_Map_pointer __new_node) {$/;"	f	struct:_Deque_iterator
_M_start	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:_Bvector_alloc_base
_M_start	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:_Bvector_base
_M_start	.\lib\avr-stl\include\stl_deque.h	/^  iterator _M_start;$/;"	m	class:_Deque_base
_M_start	.\lib\avr-stl\include\stl_vector.h	/^  _Tp* _M_start;$/;"	m	class:_Vector_alloc_base
_M_stream	.\lib\avr-stl\include\stl_iterator.h	/^  istream* _M_stream;$/;"	m	class:istream_iterator
_M_stream	.\lib\avr-stl\include\stl_iterator.h	/^  istream_type* _M_stream;$/;"	m	class:istream_iterator
_M_stream	.\lib\avr-stl\include\stl_iterator.h	/^  ostream* _M_stream;$/;"	m	class:ostream_iterator
_M_stream	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_type* _M_stream;$/;"	m	class:ostream_iterator
_M_string	.\lib\avr-stl\include\stl_iterator.h	/^  const _CharT* _M_string;$/;"	m	class:ostream_iterator
_M_string	.\lib\avr-stl\include\stl_iterator.h	/^  const char* _M_string;$/;"	m	class:ostream_iterator
_M_t	.\lib\avr-stl\include\stl_map.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing map$/;"	m	class:map
_M_t	.\lib\avr-stl\include\stl_multimap.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multimap$/;"	m	class:multimap
_M_t	.\lib\avr-stl\include\stl_multiset.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multiset$/;"	m	class:multiset
_M_t	.\lib\avr-stl\include\stl_set.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:set
_M_table	.\lib\avr-stl\include\stl_function.h	/^  unsigned int _M_table[55];$/;"	m	class:subtractive_rng
_M_val	.\lib\avr-stl\include\stl_function.h	/^  _Result _M_val;$/;"	m	struct:_Constant_binary_fun
_M_val	.\lib\avr-stl\include\stl_function.h	/^  result_type _M_val;$/;"	m	struct:_Constant_unary_fun
_M_val	.\lib\avr-stl\include\stl_function.h	/^  result_type _M_val;$/;"	m	struct:_Constant_void_fun
_M_val	.\lib\avr-stl\include\stl_hashtable.h	/^  _Val _M_val;$/;"	m	struct:_Hashtable_node
_M_value	.\lib\avr-stl\include\stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:istream_iterator
_M_value_field	.\lib\avr-stl\include\stl_tree.h	/^  _Value _M_value_field;$/;"	m	struct:_Rb_tree_node
_Map_alloc_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef simple_alloc<_Tp*, _Alloc> _Map_alloc_type;$/;"	t	class:_Deque_base
_Map_alloc_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Alloc_traits<_Tp*, _Alloc>::_Alloc_type _Map_alloc_type;$/;"	t	class:_Deque_alloc_base
_Map_allocator_type	.\lib\avr-stl\include\stl_deque.h	/^          _Map_allocator_type;$/;"	t	class:_Deque_alloc_base
_Map_pointer	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Tp** _Map_pointer;$/;"	t	struct:_Deque_iterator
_Map_pointer	.\lib\avr-stl\include\stl_deque.h	/^  typedef pointer* _Map_pointer;$/;"	t	class:deque
_Mutable_BidirectionalIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _Mutable_BidirectionalIterator_concept_specification {$/;"	s
_Mutable_BidirectionalIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_Mutable_BidirectionalIterator_requirement_violation($/;"	f	struct:_Mutable_BidirectionalIterator_concept_specification
_Mutable_ForwardIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _Mutable_ForwardIterator_concept_specification {$/;"	s
_Mutable_ForwardIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_Mutable_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_Mutable_ForwardIterator_concept_specification
_Mutable_RandomAccessIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _Mutable_RandomAccessIterator_concept_specification {$/;"	s
_Mutable_RandomAccessIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_Mutable_RandomAccessIterator_requirement_violation(_RandAccIter __i)$/;"	f	struct:_Mutable_RandomAccessIterator_concept_specification
_Mutable_TrivialIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _Mutable_TrivialIterator_concept_specification {$/;"	s
_Mutable_TrivialIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_Mutable_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_Mutable_TrivialIterator_concept_specification
_Mutable_trait	.\lib\avr-stl\include\concept_checks.h	/^struct _Mutable_trait {$/;"	s
_Mutable_trait	.\lib\avr-stl\include\concept_checks.h	/^struct _Mutable_trait<const _Tp> {$/;"	s
_NEGD1	.\lib\FastLED\platforms\avr\clockless_trinket.h	266;"	d
_NFREELISTS	.\lib\avr-stl\include\stl_alloc.h	/^    enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:__default_alloc_template::__anon14
_NFREELISTS	.\lib\avr-stl\include\stl_alloc.h	/^  enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:__anon11
_NOTHREADS	.\lib\avr-stl\include\stl_config.h	164;"	d
_Node	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	class:hashtable
_Node	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:_Hashtable_const_iterator
_Node	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:_Hashtable_iterator
_Node	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	class:list
_Node	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	struct:_List_iterator
_Node	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_node<_Tp>      _Node;$/;"	t	class:slist
_Node	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_node<_Tp> _Node;$/;"	t	struct:_Slist_iterator
_Node_alloc_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef simple_alloc<_Tp, _Alloc>  _Node_alloc_type;$/;"	t	class:_Deque_base
_Node_alloc_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Node_alloc_type;$/;"	t	class:_Deque_alloc_base
_Node_allocator	.\lib\avr-stl\include\stl_list.h	/^           _Node_allocator;$/;"	m	class:_List_alloc_base
_Node_base	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_node_base      _Node_base;$/;"	t	class:slist
_Obj	.\lib\avr-stl\include\stl_alloc.h	/^  union _Obj {$/;"	u	class:__default_alloc_template
_OutputIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _OutputIterator_concept_specification {$/;"	s
_OutputIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_OutputIterator_requirement_violation(_OutputIterator __i) {$/;"	f	struct:_OutputIterator_concept_specification
_Project1st	.\lib\avr-stl\include\stl_function.h	/^struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {$/;"	s
_Project2nd	.\lib\avr-stl\include\stl_function.h	/^struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {$/;"	s
_ROR1	.\lib\FastLED\platforms\avr\clockless_trinket.h	241;"	d
_RandomAccessContainer_concept_specification	.\lib\avr-stl\include\container_concepts.h	/^struct _RandomAccessContainer_concept_specification {$/;"	s
_RandomAccessContainer_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^_RandomAccessContainer_requirement_violation(_RandomAccessContainer __c) {$/;"	f	struct:_RandomAccessContainer_concept_specification
_RandomAccessIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _RandomAccessIterator_concept_specification {$/;"	s
_RandomAccessIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_RandomAccessIterator_requirement_violation(_RandAccIter __i) {$/;"	f	struct:_RandomAccessIterator_concept_specification
_Rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree()$/;"	f	class:_Rb_tree
_Rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree(const _Compare& __comp)$/;"	f	class:_Rb_tree
_Rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:_Rb_tree
_Rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x) $/;"	f	class:_Rb_tree
_Rb_tree	.\lib\avr-stl\include\stl_tree.h	/^class _Rb_tree : protected _Rb_tree_base<_Value, _Alloc> {$/;"	c
_Rb_tree_Color_type	.\lib\avr-stl\include\stl_tree.h	/^typedef bool _Rb_tree_Color_type;$/;"	t
_Rb_tree_alloc_base	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type& __a)$/;"	f	class:_Rb_tree_alloc_base
_Rb_tree_alloc_base	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type&) : _M_header(0) {}$/;"	f	class:_Rb_tree_alloc_base
_Rb_tree_alloc_base	.\lib\avr-stl\include\stl_tree.h	/^class _Rb_tree_alloc_base {$/;"	c
_Rb_tree_alloc_base	.\lib\avr-stl\include\stl_tree.h	/^class _Rb_tree_alloc_base<_Tp, _Alloc, true> {$/;"	c
_Rb_tree_base	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_base(const allocator_type& __a) $/;"	f	struct:_Rb_tree_base
_Rb_tree_base	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_base(const allocator_type&) $/;"	f	struct:_Rb_tree_base
_Rb_tree_base	.\lib\avr-stl\include\stl_tree.h	/^struct _Rb_tree_base$/;"	s
_Rb_tree_base_iterator	.\lib\avr-stl\include\stl_tree.h	/^struct _Rb_tree_base_iterator$/;"	s
_Rb_tree_iterator	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_iterator() {}$/;"	f	struct:_Rb_tree_iterator
_Rb_tree_iterator	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_iterator(_Link_type __x) { _M_node = __x; }$/;"	f	struct:_Rb_tree_iterator
_Rb_tree_iterator	.\lib\avr-stl\include\stl_tree.h	/^  _Rb_tree_iterator(const iterator& __it) { _M_node = __it._M_node; }$/;"	f	struct:_Rb_tree_iterator
_Rb_tree_iterator	.\lib\avr-stl\include\stl_tree.h	/^struct _Rb_tree_iterator : public _Rb_tree_base_iterator$/;"	s
_Rb_tree_node	.\lib\avr-stl\include\stl_tree.h	/^  typedef std::_Rb_tree_node<_Value> _Rb_tree_node;$/;"	t	class:_Rb_tree
_Rb_tree_node	.\lib\avr-stl\include\stl_tree.h	/^struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s
_Rb_tree_node_base	.\lib\avr-stl\include\stl_tree.h	/^struct _Rb_tree_node_base$/;"	s
_Rb_tree_rebalance	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f
_Rb_tree_rebalance_for_erase	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree_rebalance_for_erase(_Rb_tree_node_base* __z,$/;"	f
_Rb_tree_rotate_left	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f
_Rb_tree_rotate_right	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f
_Rep_type	.\lib\avr-stl\include\stl_map.h	/^                   _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:map
_Rep_type	.\lib\avr-stl\include\stl_multimap.h	/^                  _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:multimap
_Rep_type	.\lib\avr-stl\include\stl_multiset.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:multiset
_Rep_type	.\lib\avr-stl\include\stl_set.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:set
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_ref_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_ref_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_ref_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_ref_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_t
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg) const)$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline const_mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline const_mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)() const)$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun1_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg))$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)()) $/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^inline mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)())$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f
_Ret	.\lib\avr-stl\include\stl_function.h	/^mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f
_ReversibleContainer_concept_specification	.\lib\avr-stl\include\container_concepts.h	/^struct _ReversibleContainer_concept_specification {$/;"	s
_ReversibleContainer_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_ReversibleContainer_concept_specification
_S1_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2184;"	d	file:
_S2_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2185;"	d	file:
_S3_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	2186;"	d	file:
_SBASE_	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^static const int _SBASE_ = __COUNTER__ + 1; \/\/ Index of 1st __COUNTER__ below$/;"	v	file:
_SCALE02	.\lib\FastLED\platforms\avr\clockless_trinket.h	233;"	d
_SCALE12	.\lib\FastLED\platforms\avr\clockless_trinket.h	234;"	d
_SCALE22	.\lib\FastLED\platforms\avr\clockless_trinket.h	235;"	d
_STL_BINARY_FUNCTION_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_BINARY_FUNCTION_ERROR {$/;"	s
_STL_BINARY_FUNCTION_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_BINARY_FUNCTION_ERROR<_Func, void, _First, _Second> {$/;"	s
_STL_CONVERT_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_CONVERT_ERROR {$/;"	s
_STL_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_ERROR {$/;"	s
_STL_GENERATOR_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_GENERATOR_ERROR {$/;"	s
_STL_GENERATOR_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_GENERATOR_ERROR<_Func, void> {$/;"	s
_STL_SAME_TYPE_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_SAME_TYPE_ERROR {$/;"	s
_STL_UNARY_FUNCTION_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_UNARY_FUNCTION_ERROR {$/;"	s
_STL_UNARY_FUNCTION_ERROR	.\lib\avr-stl\include\concept_checks.h	/^struct _STL_UNARY_FUNCTION_ERROR<_Func, void, _Arg> {$/;"	s
_S_buffer_size	.\lib\avr-stl\include\stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	class:deque
_S_buffer_size	.\lib\avr-stl\include\stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	struct:_Deque_iterator
_S_chunk_alloc	.\lib\avr-stl\include\stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size, $/;"	f	class:__default_alloc_template
_S_color	.\lib\avr-stl\include\stl_tree.h	/^  static _Color_type& _S_color(_Base_ptr __x)$/;"	f	class:_Rb_tree
_S_color	.\lib\avr-stl\include\stl_tree.h	/^  static _Color_type& _S_color(_Link_type __x)$/;"	f	class:_Rb_tree
_S_end_free	.\lib\avr-stl\include\stl_alloc.h	/^  static char* _S_end_free;$/;"	m	class:__default_alloc_template
_S_end_free	.\lib\avr-stl\include\stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_end_free = 0;$/;"	m	class:__default_alloc_template
_S_extra	.\lib\avr-stl\include\stl_alloc.h	/^  enum {_S_extra = 8};  \/\/ Size of space used to store size.  Note$/;"	e	enum:debug_alloc::__anon8
_S_free_list	.\lib\avr-stl\include\stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[]; $/;"	m	class:__default_alloc_template
_S_free_list	.\lib\avr-stl\include\stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS]; $/;"	m	class:__default_alloc_template
_S_free_list	.\lib\avr-stl\include\stl_alloc.h	/^__default_alloc_template<__threads, __inst> ::_S_free_list[$/;"	m	class:__default_alloc_template
_S_freelist_index	.\lib\avr-stl\include\stl_alloc.h	/^  static  size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:__default_alloc_template
_S_heap_size	.\lib\avr-stl\include\stl_alloc.h	/^  static size_t _S_heap_size;$/;"	m	class:__default_alloc_template
_S_heap_size	.\lib\avr-stl\include\stl_alloc.h	/^size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;$/;"	m	class:__default_alloc_template
_S_initial_map_size	.\lib\avr-stl\include\stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:_Deque_base::__anon15
_S_initial_map_size	.\lib\avr-stl\include\stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:_Deque_base::__anon16
_S_key	.\lib\avr-stl\include\stl_tree.h	/^  static const _Key& _S_key(_Base_ptr __x)$/;"	f	class:_Rb_tree
_S_key	.\lib\avr-stl\include\stl_tree.h	/^  static const _Key& _S_key(_Link_type __x)$/;"	f	class:_Rb_tree
_S_left	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type& _S_left(_Base_ptr __x)$/;"	f	class:_Rb_tree
_S_left	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type& _S_left(_Link_type __x)$/;"	f	class:_Rb_tree
_S_maximum	.\lib\avr-stl\include\stl_tree.h	/^  static _Base_ptr _S_maximum(_Base_ptr __x)$/;"	f	struct:_Rb_tree_node_base
_S_maximum	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type _S_maximum(_Link_type __x)$/;"	f	class:_Rb_tree
_S_minimum	.\lib\avr-stl\include\stl_tree.h	/^  static _Base_ptr _S_minimum(_Base_ptr __x)$/;"	f	struct:_Rb_tree_node_base
_S_minimum	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type _S_minimum(_Link_type __x) $/;"	f	class:_Rb_tree
_S_node_allocator_lock	.\lib\avr-stl\include\stl_alloc.h	/^    static _STL_mutex_lock _S_node_allocator_lock;$/;"	m	class:__default_alloc_template
_S_oom_malloc	.\lib\avr-stl\include\stl_alloc.h	/^__malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)$/;"	f	class:__malloc_alloc_template
_S_oom_realloc	.\lib\avr-stl\include\stl_alloc.h	/^void* __malloc_alloc_template<__inst>::_S_oom_realloc(void* __p, size_t __n)$/;"	f	class:__malloc_alloc_template
_S_parent	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type& _S_parent(_Base_ptr __x)$/;"	f	class:_Rb_tree
_S_parent	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type& _S_parent(_Link_type __x)$/;"	f	class:_Rb_tree
_S_rb_tree_black	.\lib\avr-stl\include\stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_black = true;$/;"	v
_S_rb_tree_red	.\lib\avr-stl\include\stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_red = false;$/;"	v
_S_refill	.\lib\avr-stl\include\stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_refill(size_t __n)$/;"	f	class:__default_alloc_template
_S_right	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type& _S_right(_Base_ptr __x)$/;"	f	class:_Rb_tree
_S_right	.\lib\avr-stl\include\stl_tree.h	/^  static _Link_type& _S_right(_Link_type __x)$/;"	f	class:_Rb_tree
_S_round_up	.\lib\avr-stl\include\stl_alloc.h	/^  _S_round_up(size_t __bytes) $/;"	f	class:__default_alloc_template
_S_start_free	.\lib\avr-stl\include\stl_alloc.h	/^  static char* _S_start_free;$/;"	m	class:__default_alloc_template
_S_start_free	.\lib\avr-stl\include\stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;$/;"	m	class:__default_alloc_template
_S_value	.\lib\avr-stl\include\stl_tree.h	/^  static reference _S_value(_Base_ptr __x)$/;"	f	class:_Rb_tree
_S_value	.\lib\avr-stl\include\stl_tree.h	/^  static reference _S_value(_Link_type __x)$/;"	f	class:_Rb_tree
_Select1st	.\lib\avr-stl\include\stl_function.h	/^struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {$/;"	s
_Select2nd	.\lib\avr-stl\include\stl_function.h	/^struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>$/;"	s
_Self	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Deque_iterator _Self;$/;"	t	struct:_Deque_iterator
_Self	.\lib\avr-stl\include\stl_iterator.h	/^                                         _Reference, _Distance>  _Self;$/;"	t	class:reverse_bidirectional_iterator
_Self	.\lib\avr-stl\include\stl_iterator.h	/^        _Self;$/;"	t	class:reverse_iterator
_Self	.\lib\avr-stl\include\stl_iterator.h	/^  typedef reverse_iterator<_Iterator> _Self;$/;"	t	class:reverse_iterator
_Self	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_iterator<_Tp,_Ref,_Ptr>             _Self;$/;"	t	struct:_List_iterator
_Self	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Ref, _Ptr>             _Self;$/;"	t	struct:_Slist_iterator
_Self	.\lib\avr-stl\include\stl_tree.h	/^    _Self;$/;"	t	struct:_Rb_tree_iterator
_Sequence_concept_specification	.\lib\avr-stl\include\sequence_concepts.h	/^struct _Sequence_concept_specification {$/;"	s
_Sequence_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^_Sequence_requirement_violation(_Sequence __s) {$/;"	f	struct:_Sequence_concept_specification
_Sequence_value_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:priority_queue
_Sequence_value_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:queue
_Sequence_value_type	.\lib\avr-stl\include\stl_stack.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:stack
_Slist_alloc_base	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_alloc_base(const allocator_type& __a) : _M_node_allocator(__a) {}$/;"	f	class:_Slist_alloc_base
_Slist_alloc_base	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_alloc_base(const allocator_type&) {}$/;"	f	class:_Slist_alloc_base
_Slist_alloc_base	.\lib\avr-stl\include\stl_slist.h	/^class _Slist_alloc_base {$/;"	c
_Slist_alloc_base	.\lib\avr-stl\include\stl_slist.h	/^class _Slist_alloc_base<_Tp,_Allocator, true> {$/;"	c
_Slist_base	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_base(const allocator_type& __a)$/;"	f	struct:_Slist_base
_Slist_base	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_base(const allocator_type&) { _M_head._M_next = 0; }$/;"	f	struct:_Slist_base
_Slist_base	.\lib\avr-stl\include\stl_slist.h	/^struct _Slist_base {$/;"	s
_Slist_base	.\lib\avr-stl\include\stl_slist.h	/^struct _Slist_base$/;"	s
_Slist_iterator	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_iterator() : _Slist_iterator_base(0) {}$/;"	f	struct:_Slist_iterator
_Slist_iterator	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}$/;"	f	struct:_Slist_iterator
_Slist_iterator	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}$/;"	f	struct:_Slist_iterator
_Slist_iterator	.\lib\avr-stl\include\stl_slist.h	/^struct _Slist_iterator : public _Slist_iterator_base$/;"	s
_Slist_iterator_base	.\lib\avr-stl\include\stl_slist.h	/^  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}$/;"	f	struct:_Slist_iterator_base
_Slist_iterator_base	.\lib\avr-stl\include\stl_slist.h	/^struct _Slist_iterator_base$/;"	s
_Slist_node	.\lib\avr-stl\include\stl_slist.h	/^struct _Slist_node : public _Slist_node_base$/;"	s
_Slist_node_base	.\lib\avr-stl\include\stl_slist.h	/^struct _Slist_node_base$/;"	s
_Temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	class:_Temporary_buffer
_Temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  _Temporary_buffer(const _Temporary_buffer&) {}$/;"	f	class:_Temporary_buffer
_Temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^class _Temporary_buffer {$/;"	c
_TrivialIterator_concept_specification	.\lib\avr-stl\include\concept_checks.h	/^struct _TrivialIterator_concept_specification {$/;"	s
_TrivialIterator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_TrivialIterator_concept_specification
_Type	.\lib\avr-stl\include\concept_checks.h	/^  typedef _Tp _Type;$/;"	t	struct:_Mutable_trait
_UITHREADS	.\lib\avr-stl\include\stl_config.h	270;"	d
_Vector_alloc_base	.\lib\avr-stl\include\stl_vector.h	/^  _Vector_alloc_base(const allocator_type& __a)$/;"	f	class:_Vector_alloc_base
_Vector_alloc_base	.\lib\avr-stl\include\stl_vector.h	/^  _Vector_alloc_base(const allocator_type&)$/;"	f	class:_Vector_alloc_base
_Vector_alloc_base	.\lib\avr-stl\include\stl_vector.h	/^class _Vector_alloc_base {$/;"	c
_Vector_alloc_base	.\lib\avr-stl\include\stl_vector.h	/^class _Vector_alloc_base<_Tp, _Allocator, true> {$/;"	c
_Vector_base	.\lib\avr-stl\include\stl_vector.h	/^  _Vector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:_Vector_base
_Vector_base	.\lib\avr-stl\include\stl_vector.h	/^  _Vector_base(size_t __n, const allocator_type& __a) : _Base(__a) {$/;"	f	struct:_Vector_base
_Vector_base	.\lib\avr-stl\include\stl_vector.h	/^struct _Vector_base$/;"	s
_Void_pointer	.\lib\avr-stl\include\stl_list.h	/^  typedef void* _Void_pointer;$/;"	t	class:list
__BVECTOR	.\lib\avr-stl\include\stl_bvector.h	/^class __BVECTOR : public __BVECTOR_BASE $/;"	c
__BVECTOR	.\lib\avr-stl\include\stl_bvector.h	358;"	d
__BVECTOR	.\lib\avr-stl\include\stl_bvector.h	881;"	d
__BVECTOR_BASE	.\lib\avr-stl\include\stl_bvector.h	360;"	d
__BVECTOR_BASE	.\lib\avr-stl\include\stl_bvector.h	883;"	d
__BVECTOR_TMPL_LIST	.\lib\avr-stl\include\stl_bvector.h	361;"	d
__BVECTOR_TMPL_LIST	.\lib\avr-stl\include\stl_bvector.h	884;"	d
__C4BCBBDE_67BC_4bb4_A5E1_7745E49AF0B6	.\lib\avr-stl\include\avr_config.h	10;"	d
__CONCEPT_CHECKS_H	.\lib\avr-stl\include\concept_checks.h	15;"	d
__DISTANCE_TYPE	.\lib\avr-stl\include\stl_iterator_base.h	178;"	d
__DISTANCE_TYPE	.\lib\avr-stl\include\stl_iterator_base.h	262;"	d
__FASTPIN_ARM_K20_H	.\lib\FastLED\platforms\arm\k20\fastpin_arm_k20.h	2;"	d
__FASTPIN_ARM_K66_H	.\lib\FastLED\platforms\arm\k66\fastpin_arm_k66.h	2;"	d
__FASTPIN_ARM_KL26_H	.\lib\FastLED\platforms\arm\kl26\fastpin_arm_kl26.h	2;"	d
__FASTPIN_ARM_NRF51_H	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	2;"	d
__FASTPIN_ARM_STM32_H	.\lib\FastLED\platforms\arm\stm32\fastpin_arm_stm32.h	2;"	d
__HASH_ALLOC_INIT	.\lib\avr-stl\include\stl_hashtable.h	242;"	d
__HASH_ALLOC_INIT	.\lib\avr-stl\include\stl_hashtable.h	251;"	d
__HASH_ALLOC_INIT	.\lib\avr-stl\include\stl_hashtable.h	314;"	d
__INC_BITSWAP_H	.\lib\FastLED\bitswap.h	2;"	d
__INC_BLOCK_CLOCKLESS_ARM_K20_H	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	2;"	d
__INC_BLOCK_CLOCKLESS_ARM_K66_H	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	2;"	d
__INC_BLOCK_CLOCKLESS_H	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	2;"	d
__INC_CHIPSETS_H	.\lib\FastLED\chipsets.h	2;"	d
__INC_CLOCKLESS_ARM_D21	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	2;"	d
__INC_CLOCKLESS_ARM_K20_H	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	2;"	d
__INC_CLOCKLESS_ARM_K66_H	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	2;"	d
__INC_CLOCKLESS_ARM_KL26	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	2;"	d
__INC_CLOCKLESS_ARM_NRF51	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	2;"	d
__INC_CLOCKLESS_ARM_SAM_H	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	2;"	d
__INC_CLOCKLESS_ARM_STM32_H	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	2;"	d
__INC_CLOCKLESS_BLOCK_ESP8266_H	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	2;"	d
__INC_CLOCKLESS_BLOCK_ESP8266_H	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	2;"	d
__INC_CLOCKLESS_TRINKET_H	.\lib\FastLED\platforms\avr\clockless_trinket.h	2;"	d
__INC_COLORPALETTES_H	.\lib\FastLED\colorpalettes.cpp	2;"	d	file:
__INC_COLORPALETTES_H	.\lib\FastLED\colorpalettes.h	2;"	d
__INC_COLORUTILS_H	.\lib\FastLED\colorutils.h	2;"	d
__INC_COLOR_H	.\lib\FastLED\color.h	2;"	d
__INC_CONTROLLER_H	.\lib\FastLED\controller.h	2;"	d
__INC_CPP_COMPAT_H	.\lib\FastLED\cpp_compat.h	2;"	d
__INC_DMX_H	.\lib\FastLED\dmx.h	2;"	d
__INC_FASTLED_ARM_D21_H	.\lib\FastLED\platforms\arm\d21\fastled_arm_d21.h	2;"	d
__INC_FASTLED_ARM_K20_H	.\lib\FastLED\platforms\arm\k20\fastled_arm_k20.h	2;"	d
__INC_FASTLED_ARM_K66_H	.\lib\FastLED\platforms\arm\k66\fastled_arm_k66.h	2;"	d
__INC_FASTLED_ARM_KL26_H	.\lib\FastLED\platforms\arm\kl26\fastled_arm_kl26.h	2;"	d
__INC_FASTLED_ARM_NRF51_H	.\lib\FastLED\platforms\arm\nrf51\fastled_arm_nrf51.h	2;"	d
__INC_FASTLED_ARM_SAM_H	.\lib\FastLED\platforms\arm\sam\fastled_arm_sam.h	2;"	d
__INC_FASTLED_ARM_SAM_H	.\lib\FastLED\platforms\arm\stm32\fastled_arm_stm32.h	2;"	d
__INC_FASTLED_AVR_H	.\lib\FastLED\platforms\avr\fastled_avr.h	2;"	d
__INC_FASTLED_CONFIG_H	.\lib\FastLED\fastled_config.h	2;"	d
__INC_FASTPIN_ARM_SAM_H	.\lib\FastLED\platforms\arm\d21\fastpin_arm_d21.h	2;"	d
__INC_FASTPIN_ARM_SAM_H	.\lib\FastLED\platforms\arm\sam\fastpin_arm_sam.h	2;"	d
__INC_FASTPIN_AVR_H	.\lib\FastLED\platforms\avr\fastpin_avr.h	2;"	d
__INC_FASTPIN_H	.\lib\FastLED\fastpin.h	2;"	d
__INC_FASTSPI_ARM_H	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	2;"	d
__INC_FASTSPI_ARM_H	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	2;"	d
__INC_FASTSPI_ARM_KL26_h	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	2;"	d
__INC_FASTSPI_ARM_SAM_H	.\lib\FastLED\fastspi_ref.h	2;"	d
__INC_FASTSPI_ARM_SAM_H	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	2;"	d
__INC_FASTSPI_AVR_H	.\lib\FastLED\platforms\avr\fastspi_avr.h	2;"	d
__INC_FASTSPI_BITBANG_H	.\lib\FastLED\fastspi_bitbang.h	2;"	d
__INC_FASTSPI_H	.\lib\FastLED\fastspi.h	2;"	d
__INC_FASTSPI_LED2_H	.\lib\FastLED\FastLED.h	2;"	d
__INC_FASTSPI_NOP_H	.\lib\FastLED\fastspi_nop.h	2;"	d
__INC_FASTSPI_NRF_H	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	2;"	d
__INC_FASTSPI_TYPES_H	.\lib\FastLED\fastspi_types.h	2;"	d
__INC_FL_DELAY_H	.\lib\FastLED\fastled_delay.h	2;"	d
__INC_FL_PROGMEM_H	.\lib\FastLED\fastled_progmem.h	2;"	d
__INC_HSV2RGB_H	.\lib\FastLED\hsv2rgb.h	2;"	d
__INC_LED_SYSDEFS_ARM_D21_H	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	2;"	d
__INC_LED_SYSDEFS_ARM_K20_H	.\lib\FastLED\platforms\arm\k20\led_sysdefs_arm_k20.h	2;"	d
__INC_LED_SYSDEFS_ARM_K66_H	.\lib\FastLED\platforms\arm\k66\led_sysdefs_arm_k66.h	2;"	d
__INC_LED_SYSDEFS_ARM_KL26_H	.\lib\FastLED\platforms\arm\kl26\led_sysdefs_arm_kl26.h	2;"	d
__INC_LED_SYSDEFS_ARM_SAM_H	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	2;"	d
__INC_LED_SYSDEFS_ARM_SAM_H	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	2;"	d
__INC_LED_SYSDEFS_AVR_H	.\lib\FastLED\platforms\avr\led_sysdefs_avr.h	2;"	d
__INC_LED_SYSDEFS_H	.\lib\FastLED\led_sysdefs.h	2;"	d
__INC_LIB8TION_H	.\lib\FastLED\lib8tion.h	2;"	d
__INC_LIB8TION_MATH_H	.\lib\FastLED\lib8tion\math8.h	2;"	d
__INC_LIB8TION_RANDOM_H	.\lib\FastLED\lib8tion\random8.h	2;"	d
__INC_LIB8TION_SCALE_H	.\lib\FastLED\lib8tion\scale8.h	2;"	d
__INC_LIB8TION_TRIG_H	.\lib\FastLED\lib8tion\trig8.h	2;"	d
__INC_M0_CLOCKLESS_H	.\lib\FastLED\platforms\arm\common\m0clockless.h	2;"	d
__INC_NOISE_H	.\lib\FastLED\noise.h	2;"	d
__INC_OCTOWS2811_CONTROLLER_H	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	2;"	d
__INC_PIXELSET_H	.\lib\FastLED\pixelset.h	2;"	d
__INC_PIXELS_H	.\lib\FastLED\pixeltypes.h	2;"	d
__INC_PLATFORMS_H	.\lib\FastLED\platforms.h	2;"	d
__INC_SMARTMATRIX_T3_H	.\lib\FastLED\platforms\arm\k20\smartmatrix_t3.h	2;"	d
__INC_WS2812SERIAL_CONTROLLER_H	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	2;"	d
__ITERATOR_CATEGORY	.\lib\avr-stl\include\stl_iterator_base.h	177;"	d
__ITERATOR_CATEGORY	.\lib\avr-stl\include\stl_iterator_base.h	261;"	d
__LED_SYSDEFS_ARM_NRF51	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	2;"	d
__List_base_reverse	.\lib\avr-stl\include\stl_list.h	/^inline void __List_base_reverse(_List_node_base* __p)$/;"	f
__NODE_ALLOCATOR_LOCK	.\lib\avr-stl\include\stl_alloc.h	78;"	d
__NODE_ALLOCATOR_LOCK	.\lib\avr-stl\include\stl_alloc.h	83;"	d
__NODE_ALLOCATOR_LOCK	.\lib\avr-stl\include\stl_alloc.h	90;"	d
__NODE_ALLOCATOR_THREADS	.\lib\avr-stl\include\stl_alloc.h	66;"	d
__NODE_ALLOCATOR_THREADS	.\lib\avr-stl\include\stl_alloc.h	92;"	d
__NODE_ALLOCATOR_UNLOCK	.\lib\avr-stl\include\stl_alloc.h	80;"	d
__NODE_ALLOCATOR_UNLOCK	.\lib\avr-stl\include\stl_alloc.h	85;"	d
__NODE_ALLOCATOR_UNLOCK	.\lib\avr-stl\include\stl_alloc.h	91;"	d
__PGMSPACE_H_	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	51;"	d
__PGMSPACE_H_	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	51;"	d
__PRIVATE	.\lib\avr-stl\include\stl_alloc.h	22;"	d
__PRIVATE	.\lib\avr-stl\include\stl_alloc.h	26;"	d
__PROG_TYPES_COMPAT__	.\lib\FastLED\FastLED.h	24;"	d
__PROG_TYPES_COMPAT__	.\lib\FastLED\colorutils.cpp	2;"	d	file:
__RESTRICT	.\lib\avr-stl\include\stl_alloc.h	61;"	d
__SGI_STL_CHAR_TRAITS_H	.\lib\avr-stl\include\char_traits.h	15;"	d
__SGI_STL_DECLARE_COPY_TRIVIAL	.\lib\avr-stl\include\stl_algobase.h	277;"	d
__SGI_STL_DECLARE_COPY_TRIVIAL	.\lib\avr-stl\include\stl_algobase.h	303;"	d
__SGI_STL_HASH_FUN_H	.\lib\avr-stl\include\stl_hash_fun.h	32;"	d
__SGI_STL_INTERNAL_ALGOBASE_H	.\lib\avr-stl\include\stl_algobase.h	33;"	d
__SGI_STL_INTERNAL_ALGO_H	.\lib\avr-stl\include\stl_algo.h	32;"	d
__SGI_STL_INTERNAL_ALLOC_H	.\lib\avr-stl\include\stl_alloc.h	19;"	d
__SGI_STL_INTERNAL_BVECTOR_H	.\lib\avr-stl\include\stl_bvector.h	32;"	d
__SGI_STL_INTERNAL_CONSTRUCT_H	.\lib\avr-stl\include\stl_construct.h	32;"	d
__SGI_STL_INTERNAL_CTRAITS_FUNCTIONS_H	.\lib\avr-stl\include\stl_ctraits_fns.h	19;"	d
__SGI_STL_INTERNAL_DEQUE_H	.\lib\avr-stl\include\stl_deque.h	34;"	d
__SGI_STL_INTERNAL_FUNCTION_H	.\lib\avr-stl\include\stl_function.h	32;"	d
__SGI_STL_INTERNAL_HASHTABLE_H	.\lib\avr-stl\include\stl_hashtable.h	32;"	d
__SGI_STL_INTERNAL_HASH_MAP_H	.\lib\avr-stl\include\stl_hash_map.h	32;"	d
__SGI_STL_INTERNAL_HASH_SET_H	.\lib\avr-stl\include\stl_hash_set.h	32;"	d
__SGI_STL_INTERNAL_HEAP_H	.\lib\avr-stl\include\stl_heap.h	31;"	d
__SGI_STL_INTERNAL_ITERATOR_BASE_H	.\lib\avr-stl\include\stl_iterator_base.h	32;"	d
__SGI_STL_INTERNAL_ITERATOR_H	.\lib\avr-stl\include\stl_iterator.h	32;"	d
__SGI_STL_INTERNAL_LIST_H	.\lib\avr-stl\include\stl_list.h	32;"	d
__SGI_STL_INTERNAL_MAP_H	.\lib\avr-stl\include\stl_map.h	32;"	d
__SGI_STL_INTERNAL_MULTIMAP_H	.\lib\avr-stl\include\stl_multimap.h	32;"	d
__SGI_STL_INTERNAL_MULTISET_H	.\lib\avr-stl\include\stl_multiset.h	32;"	d
__SGI_STL_INTERNAL_NUMERIC_H	.\lib\avr-stl\include\stl_numeric.h	33;"	d
__SGI_STL_INTERNAL_PAIR_H	.\lib\avr-stl\include\stl_pair.h	32;"	d
__SGI_STL_INTERNAL_QUEUE_H	.\lib\avr-stl\include\stl_queue.h	32;"	d
__SGI_STL_INTERNAL_RAW_STORAGE_ITERATOR_H	.\lib\avr-stl\include\stl_raw_storage_iter.h	32;"	d
__SGI_STL_INTERNAL_RELOPS	.\lib\avr-stl\include\stl_relops.h	32;"	d
__SGI_STL_INTERNAL_SET_H	.\lib\avr-stl\include\stl_set.h	32;"	d
__SGI_STL_INTERNAL_SLIST_H	.\lib\avr-stl\include\stl_slist.h	20;"	d
__SGI_STL_INTERNAL_STACK_H	.\lib\avr-stl\include\stl_stack.h	32;"	d
__SGI_STL_INTERNAL_TEMPBUF_H	.\lib\avr-stl\include\stl_tempbuf.h	32;"	d
__SGI_STL_INTERNAL_TREE_H	.\lib\avr-stl\include\stl_tree.h	34;"	d
__SGI_STL_INTERNAL_UNINITIALIZED_H	.\lib\avr-stl\include\stl_uninitialized.h	32;"	d
__SGI_STL_INTERNAL_VECTOR_H	.\lib\avr-stl\include\stl_vector.h	32;"	d
__SGI_STL_NO_ARROW_OPERATOR	.\lib\avr-stl\include\stl_config.h	329;"	d
__SGI_STL_NO_ARROW_OPERATOR	.\lib\avr-stl\include\stl_config.h	396;"	d
__SGI_STL_NO_ARROW_OPERATOR	.\lib\avr-stl\include\stl_config.h	440;"	d
__SGI_STL_STRING_FWD_H	.\lib\avr-stl\include\stl_string_fwd.h	15;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	.\lib\avr-stl\include\stl_config.h	160;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	.\lib\avr-stl\include\stl_config.h	244;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	.\lib\avr-stl\include\stl_config.h	304;"	d
__SGI_STL_VECBOOL_TEMPLATE	.\lib\avr-stl\include\stl_bvector.h	357;"	d
__SGI_STL_VECBOOL_TEMPLATE	.\lib\avr-stl\include\stl_bvector.h	880;"	d
__STD	.\lib\avr-stl\include\stl_config.h	519;"	d
__STD	.\lib\avr-stl\include\stl_config.h	535;"	d
__STD_QUALIFIER	.\lib\avr-stl\include\stl_config.h	424;"	d
__STD_QUALIFIER	.\lib\avr-stl\include\stl_config.h	552;"	d
__STD_QUALIFIER	.\lib\avr-stl\include\stl_config.h	554;"	d
__STD_RELOPS	.\lib\avr-stl\include\stl_config.h	527;"	d
__STD_RELOPS	.\lib\avr-stl\include\stl_config.h	532;"	d
__STD_RELOPS	.\lib\avr-stl\include\stl_config.h	541;"	d
__STL_BEGIN_NAMESPACE	.\lib\avr-stl\include\stl_config.h	520;"	d
__STL_BEGIN_NAMESPACE	.\lib\avr-stl\include\stl_config.h	536;"	d
__STL_BEGIN_RELOPS_NAMESPACE	.\lib\avr-stl\include\stl_config.h	525;"	d
__STL_BEGIN_RELOPS_NAMESPACE	.\lib\avr-stl\include\stl_config.h	530;"	d
__STL_BEGIN_RELOPS_NAMESPACE	.\lib\avr-stl\include\stl_config.h	539;"	d
__STL_BINARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	131;"	d
__STL_BINARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	64;"	d
__STL_CAN_THROW_RANGE_ERRORS	.\lib\avr-stl\include\stl_config.h	241;"	d
__STL_CAN_THROW_RANGE_ERRORS	.\lib\avr-stl\include\stl_config.h	298;"	d
__STL_CAN_THROW_RANGE_ERRORS	.\lib\avr-stl\include\stl_config.h	407;"	d
__STL_CATCH_ALL	.\lib\avr-stl\include\stl_config.h	559;"	d
__STL_CATCH_ALL	.\lib\avr-stl\include\stl_config.h	566;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	155;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	206;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	66;"	d
__STL_CLASS_GENERATOR_CHECK	.\lib\avr-stl\include\concept_checks.h	153;"	d
__STL_CLASS_GENERATOR_CHECK	.\lib\avr-stl\include\concept_checks.h	185;"	d
__STL_CLASS_GENERATOR_CHECK	.\lib\avr-stl\include\concept_checks.h	59;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	153;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	192;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	260;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	294;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	339;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	351;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	.\lib\avr-stl\include\stl_config.h	432;"	d
__STL_CLASS_REQUIRES	.\lib\avr-stl\include\concept_checks.h	151;"	d
__STL_CLASS_REQUIRES	.\lib\avr-stl\include\concept_checks.h	165;"	d
__STL_CLASS_REQUIRES	.\lib\avr-stl\include\concept_checks.h	52;"	d
__STL_CLASS_REQUIRES_BINARY_OP	.\lib\avr-stl\include\concept_checks.h	156;"	d
__STL_CLASS_REQUIRES_BINARY_OP	.\lib\avr-stl\include\concept_checks.h	217;"	d
__STL_CLASS_REQUIRES_BINARY_OP	.\lib\avr-stl\include\concept_checks.h	70;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	.\lib\avr-stl\include\concept_checks.h	152;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	.\lib\avr-stl\include\concept_checks.h	175;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	.\lib\avr-stl\include\concept_checks.h	56;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	154;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	195;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	62;"	d
__STL_CONFIG_H	.\lib\avr-stl\include\stl_config.h	28;"	d
__STL_CONTAINER_CONCEPTS_H	.\lib\avr-stl\include\container_concepts.h	15;"	d
__STL_CONVERTIBLE	.\lib\avr-stl\include\concept_checks.h	100;"	d
__STL_CONVERTIBLE	.\lib\avr-stl\include\concept_checks.h	54;"	d
__STL_DEFAULT_ALLOCATOR	.\lib\avr-stl\include\stl_config.h	506;"	d
__STL_DEFAULT_ALLOCATOR	.\lib\avr-stl\include\stl_config.h	508;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	.\lib\avr-stl\include\stl_config.h	212;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	.\lib\avr-stl\include\stl_config.h	309;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	.\lib\avr-stl\include\stl_config.h	397;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	.\lib\avr-stl\include\stl_config.h	430;"	d
__STL_DEFINE_BINARY_OP_CHECK	.\lib\avr-stl\include\concept_checks.h	323;"	d
__STL_DEPENDENT_DEFAULT_TMPL	.\lib\avr-stl\include\stl_config.h	462;"	d
__STL_DEPENDENT_DEFAULT_TMPL	.\lib\avr-stl\include\stl_config.h	464;"	d
__STL_DONT_USE_BOOL_TYPEDEF	.\lib\avr-stl\include\stl_config.h	393;"	d
__STL_END_NAMESPACE	.\lib\avr-stl\include\stl_config.h	521;"	d
__STL_END_NAMESPACE	.\lib\avr-stl\include\stl_config.h	537;"	d
__STL_END_RELOPS_NAMESPACE	.\lib\avr-stl\include\stl_config.h	526;"	d
__STL_END_RELOPS_NAMESPACE	.\lib\avr-stl\include\stl_config.h	531;"	d
__STL_END_RELOPS_NAMESPACE	.\lib\avr-stl\include\stl_config.h	540;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	.\lib\avr-stl\include\stl_config.h	156;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	.\lib\avr-stl\include\stl_config.h	206;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	.\lib\avr-stl\include\stl_config.h	296;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	.\lib\avr-stl\include\stl_config.h	434;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	.\lib\avr-stl\include\stl_config.h	155;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	.\lib\avr-stl\include\stl_config.h	195;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	.\lib\avr-stl\include\stl_config.h	262;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	.\lib\avr-stl\include\stl_config.h	295;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	.\lib\avr-stl\include\stl_config.h	350;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	.\lib\avr-stl\include\stl_config.h	433;"	d
__STL_GENERATOR_CHECK	.\lib\avr-stl\include\concept_checks.h	115;"	d
__STL_GENERATOR_CHECK	.\lib\avr-stl\include\concept_checks.h	58;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	161;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	221;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	266;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	305;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	341;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	353;"	d
__STL_HAS_NAMESPACES	.\lib\avr-stl\include\stl_config.h	406;"	d
__STL_HAS_WCHAR_T	.\lib\avr-stl\include\stl_config.h	186;"	d
__STL_HAS_WCHAR_T	.\lib\avr-stl\include\stl_config.h	259;"	d
__STL_LIMITED_DEFAULT_TEMPLATES	.\lib\avr-stl\include\stl_config.h	439;"	d
__STL_LONG_LONG	.\lib\avr-stl\include\stl_config.h	235;"	d
__STL_LONG_LONG	.\lib\avr-stl\include\stl_config.h	268;"	d
__STL_LONG_LONG	.\lib\avr-stl\include\stl_config.h	346;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	157;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	198;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	263;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	297;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	336;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	347;"	d
__STL_MEMBER_TEMPLATES	.\lib\avr-stl\include\stl_config.h	435;"	d
__STL_MEMBER_TEMPLATE_CLASSES	.\lib\avr-stl\include\stl_config.h	158;"	d
__STL_MEMBER_TEMPLATE_CLASSES	.\lib\avr-stl\include\stl_config.h	200;"	d
__STL_MEMBER_TEMPLATE_CLASSES	.\lib\avr-stl\include\stl_config.h	264;"	d
__STL_MEMBER_TEMPLATE_CLASSES	.\lib\avr-stl\include\stl_config.h	302;"	d
__STL_MEMBER_TEMPLATE_CLASSES	.\lib\avr-stl\include\stl_config.h	337;"	d
__STL_MEMBER_TEMPLATE_CLASSES	.\lib\avr-stl\include\stl_config.h	348;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	.\lib\avr-stl\include\stl_config.h	163;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	.\lib\avr-stl\include\stl_config.h	203;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	.\lib\avr-stl\include\stl_config.h	209;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	.\lib\avr-stl\include\stl_config.h	355;"	d
__STL_MUTEX_INITIALIZER	.\lib\avr-stl\include\stl_alloc.h	/^        __STL_MUTEX_INITIALIZER;$/;"	v
__STL_NEED_EXPLICIT	.\lib\avr-stl\include\stl_config.h	215;"	d
__STL_NEED_EXPLICIT	.\lib\avr-stl\include\stl_config.h	287;"	d
__STL_NEED_EXPLICIT	.\lib\avr-stl\include\stl_config.h	324;"	d
__STL_NEED_EXPLICIT	.\lib\avr-stl\include\stl_config.h	387;"	d
__STL_NEED_TYPENAME	.\lib\avr-stl\include\stl_config.h	189;"	d
__STL_NEED_TYPENAME	.\lib\avr-stl\include\stl_config.h	286;"	d
__STL_NEED_TYPENAME	.\lib\avr-stl\include\stl_config.h	323;"	d
__STL_NEED_TYPENAME	.\lib\avr-stl\include\stl_config.h	383;"	d
__STL_NEED_TYPENAME	.\lib\avr-stl\include\stl_config.h	438;"	d
__STL_NON_TYPE_TMPL_PARAM_BUG	.\lib\avr-stl\include\stl_config.h	395;"	d
__STL_NON_TYPE_TMPL_PARAM_BUG	.\lib\avr-stl\include\stl_config.h	441;"	d
__STL_NOTHROW	.\lib\avr-stl\include\stl_alloc.h	/^  __allocator(const __allocator& __a) __STL_NOTHROW$/;"	m	struct:__allocator
__STL_NOTHROW	.\lib\avr-stl\include\stl_alloc.h	/^  __allocator(const __allocator<_Tp1, _Alloc>& __a) __STL_NOTHROW$/;"	m	struct:__allocator
__STL_NOTHROW	.\lib\avr-stl\include\stl_config.h	562;"	d
__STL_NOTHROW	.\lib\avr-stl\include\stl_config.h	569;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	151;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	229;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	291;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	332;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	389;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	420;"	d
__STL_NO_BAD_ALLOC	.\lib\avr-stl\include\stl_config.h	428;"	d
__STL_NO_BOOL	.\lib\avr-stl\include\stl_config.h	180;"	d
__STL_NO_BOOL	.\lib\avr-stl\include\stl_config.h	322;"	d
__STL_NO_BOOL	.\lib\avr-stl\include\stl_config.h	388;"	d
__STL_NO_DRAND48	.\lib\avr-stl\include\stl_config.h	150;"	d
__STL_NO_DRAND48	.\lib\avr-stl\include\stl_config.h	352;"	d
__STL_NO_DRAND48	.\lib\avr-stl\include\stl_config.h	366;"	d
__STL_NO_DRAND48	.\lib\avr-stl\include\stl_config.h	374;"	d
__STL_NO_DRAND48	.\lib\avr-stl\include\stl_config.h	381;"	d
__STL_NO_DRAND48	.\lib\avr-stl\include\stl_config.h	429;"	d
__STL_NO_EXCEPTION_HEADER	.\lib\avr-stl\include\stl_config.h	225;"	d
__STL_NO_EXCEPTION_HEADER	.\lib\avr-stl\include\stl_config.h	290;"	d
__STL_NO_EXCEPTION_HEADER	.\lib\avr-stl\include\stl_config.h	331;"	d
__STL_NO_EXCEPTION_HEADER	.\lib\avr-stl\include\stl_config.h	419;"	d
__STL_NO_FRIEND_TEMPLATE_CLASS	.\lib\avr-stl\include\stl_config.h	385;"	d
__STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE	.\lib\avr-stl\include\stl_config.h	317;"	d
__STL_NO_USING_CLAUSE_IN_CLASS	.\lib\avr-stl\include\stl_config.h	384;"	d
__STL_NULL_TMPL_ARGS	.\lib\avr-stl\include\stl_config.h	478;"	d
__STL_NULL_TMPL_ARGS	.\lib\avr-stl\include\stl_config.h	480;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	.\lib\avr-stl\include\stl_config.h	152;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	.\lib\avr-stl\include\stl_config.h	261;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	.\lib\avr-stl\include\stl_config.h	330;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	.\lib\avr-stl\include\stl_config.h	405;"	d
__STL_PTHREADS	.\lib\avr-stl\include\stl_config.h	170;"	d
__STL_PTHREADS	.\lib\avr-stl\include\stl_config.h	314;"	d
__STL_PTHREADS	.\lib\avr-stl\include\stl_config.h	327;"	d
__STL_RANGE_ERRORS_H	.\lib\avr-stl\include\stl_range_errors.h	16;"	d
__STL_REQUIRES	.\lib\avr-stl\include\concept_checks.h	51;"	d
__STL_REQUIRES	.\lib\avr-stl\include\concept_checks.h	94;"	d
__STL_REQUIRES_BINARY_OP	.\lib\avr-stl\include\concept_checks.h	139;"	d
__STL_REQUIRES_BINARY_OP	.\lib\avr-stl\include\concept_checks.h	68;"	d
__STL_REQUIRES_SAME_TYPE	.\lib\avr-stl\include\concept_checks.h	107;"	d
__STL_REQUIRES_SAME_TYPE	.\lib\avr-stl\include\concept_checks.h	55;"	d
__STL_RETHROW	.\lib\avr-stl\include\stl_config.h	561;"	d
__STL_RETHROW	.\lib\avr-stl\include\stl_config.h	568;"	d
__STL_SGI_THREADS	.\lib\avr-stl\include\stl_config.h	232;"	d
__STL_STATIC_CONST_INIT_BUG	.\lib\avr-stl\include\stl_config.h	183;"	d
__STL_STATIC_CONST_INIT_BUG	.\lib\avr-stl\include\stl_config.h	382;"	d
__STL_STATIC_TEMPLATE_MEMBER_BUG	.\lib\avr-stl\include\stl_config.h	283;"	d
__STL_TEMPLATE	.\lib\avr-stl\include\stl_config.h	468;"	d
__STL_TEMPLATE	.\lib\avr-stl\include\stl_config.h	470;"	d
__STL_TEMPLATE_FRIENDS	.\lib\avr-stl\include\stl_config.h	159;"	d
__STL_TEMPLATE_FRIENDS	.\lib\avr-stl\include\stl_config.h	199;"	d
__STL_TEMPLATE_FRIENDS	.\lib\avr-stl\include\stl_config.h	303;"	d
__STL_TEMPLATE_FRIENDS	.\lib\avr-stl\include\stl_config.h	338;"	d
__STL_TEMPLATE_FRIENDS	.\lib\avr-stl\include\stl_config.h	349;"	d
__STL_TEMPLATE_FRIENDS	.\lib\avr-stl\include\stl_config.h	436;"	d
__STL_TEMPLATE_NULL	.\lib\avr-stl\include\stl_config.h	485;"	d
__STL_TEMPLATE_NULL	.\lib\avr-stl\include\stl_config.h	487;"	d
__STL_THREADS	.\lib\avr-stl\include\stl_config.h	584;"	d
__STL_THROW	.\lib\avr-stl\include\stl_config.h	560;"	d
__STL_THROW	.\lib\avr-stl\include\stl_config.h	567;"	d
__STL_THROW_RANGE_ERRORS	.\lib\avr-stl\include\stl_range_errors.h	30;"	d
__STL_TRY	.\lib\avr-stl\include\stl_config.h	558;"	d
__STL_TRY	.\lib\avr-stl\include\stl_config.h	565;"	d
__STL_TYPEDEF_REQUIREMENT	.\lib\avr-stl\include\concept_checks.h	766;"	d
__STL_UITHREADS	.\lib\avr-stl\include\stl_config.h	174;"	d
__STL_UITHREADS	.\lib\avr-stl\include\stl_config.h	271;"	d
__STL_UNARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	123;"	d
__STL_UNARY_FUNCTION_CHECK	.\lib\avr-stl\include\concept_checks.h	61;"	d
__STL_UNWIND	.\lib\avr-stl\include\stl_config.h	563;"	d
__STL_UNWIND	.\lib\avr-stl\include\stl_config.h	570;"	d
__STL_USE_CONCEPT_CHECKS	.\lib\avr-stl\include\stl_config.h	593;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	218;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	265;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	311;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	325;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	340;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	354;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	357;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	399;"	d
__STL_USE_EXCEPTIONS	.\lib\avr-stl\include\stl_config.h	444;"	d
__STL_USE_NAMESPACES	.\lib\avr-stl\include\stl_config.h	162;"	d
__STL_USE_NAMESPACES	.\lib\avr-stl\include\stl_config.h	267;"	d
__STL_USE_NAMESPACES	.\lib\avr-stl\include\stl_config.h	518;"	d
__STL_USE_NAMESPACES	.\lib\avr-stl\include\stl_config.h	542;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	.\lib\avr-stl\include\stl_config.h	524;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	.\lib\avr-stl\include\stl_config.h	529;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	.\lib\avr-stl\include\stl_config.h	538;"	d
__STL_USE_NEW_IOSTREAMS	.\lib\avr-stl\include\stl_config.h	154;"	d
__STL_USE_NEW_IOSTREAMS	.\lib\avr-stl\include\stl_config.h	238;"	d
__STL_USE_STD_ALLOCATORS	.\lib\avr-stl\include\stl_config.h	501;"	d
__STL_VOLATILE	.\lib\avr-stl\include\stl_config.h	585;"	d
__STL_VOLATILE	.\lib\avr-stl\include\stl_config.h	587;"	d
__STL_WIN32THREADS	.\lib\avr-stl\include\stl_config.h	360;"	d
__STL_WIN32THREADS	.\lib\avr-stl\include\stl_config.h	368;"	d
__STL_WIN32THREADS	.\lib\avr-stl\include\stl_config.h	402;"	d
__STL_WIN32THREADS	.\lib\avr-stl\include\stl_config.h	447;"	d
__THROW_BAD_ALLOC	.\lib\avr-stl\include\stl_alloc.h	42;"	d
__THROW_BAD_ALLOC	.\lib\avr-stl\include\stl_alloc.h	48;"	d
__THROW_BAD_ALLOC	.\lib\avr-stl\include\stl_alloc.h	51;"	d
__TYPE_TRAITS_H	.\lib\avr-stl\include\type_traits.h	16;"	d
__USE_MALLOC	.\lib\avr-stl\include\stl_alloc.h	30;"	d
__VALUE_TYPE	.\lib\avr-stl\include\stl_iterator_base.h	179;"	d
__VALUE_TYPE	.\lib\avr-stl\include\stl_iterator_base.h	263;"	d
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  __VECTOR(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  __VECTOR(const __VECTOR& __x) : __BVECTOR_BASE(__x.get_allocator()) {$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  __VECTOR(const bool* __first, const bool* __last,$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  __VECTOR(const_iterator __first, const_iterator __last,$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  __VECTOR(size_type __n, bool __value,$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  explicit __VECTOR(const allocator_type& __a = allocator_type())$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  explicit __VECTOR(size_type __n)$/;"	f	class:__BVECTOR
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	359;"	d
__VECTOR	.\lib\avr-stl\include\stl_bvector.h	882;"	d
__WORD_BIT	.\lib\avr-stl\include\stl_bvector.h	/^static const int __WORD_BIT = int(CHAR_BIT*sizeof(unsigned int));$/;"	v
__adjacent_difference	.\lib\avr-stl\include\stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last, $/;"	f
__adjacent_difference	.\lib\avr-stl\include\stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f
__adjust_heap	.\lib\avr-stl\include\stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f
__advance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void __advance(_BidirectionalIterator& __i, _Distance __n, $/;"	f
__advance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void __advance(_InputIter& __i, _Distance __n, input_iterator_tag) {$/;"	f
__advance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void __advance(_RandomAccessIterator& __i, _Distance __n, $/;"	f
__allocator	.\lib\avr-stl\include\stl_alloc.h	/^struct __allocator {$/;"	s
__assignment_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __assignment_operator_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR
__attribute	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  static inline void disable_pins(void) __attribute((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
__back_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__begin_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __begin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__binary_function_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __binary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_BINARY_FUNCTION_ERROR
__black_count	.\lib\avr-stl\include\stl_tree.h	/^__black_count(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)$/;"	f
__char_traits_base	.\lib\avr-stl\include\char_traits.h	/^template <class _CharT, class _IntT> class __char_traits_base {$/;"	c
__check_equal	.\lib\avr-stl\include\concept_checks.h	/^template <class _Type> struct __check_equal { };$/;"	s
__chunk_insertion_sort	.\lib\avr-stl\include\stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f
__clock_cycles	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^__attribute__ ((always_inline)) inline static uint32_t __clock_cycles() {$/;"	f
__clock_cycles	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^__attribute__ ((always_inline)) inline static uint32_t __clock_cycles() {$/;"	f
__const_back_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __const_back_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__const_begin_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __const_begin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__const_end_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __const_end_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__const_front_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __const_front_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__const_parameter_required_for_assignment_operator	.\lib\avr-stl\include\concept_checks.h	/^  __const_parameter_required_for_assignment_operator(_Type __a, $/;"	f	struct:_STL_ERROR
__const_parameter_required_for_copy_constructor	.\lib\avr-stl\include\concept_checks.h	/^  __const_parameter_required_for_copy_constructor(_Type \/* __a *\/, $/;"	f	struct:_STL_ERROR
__const_rbegin_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __const_rbegin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__const_rend_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __const_rend_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__copy	.\lib\avr-stl\include\stl_algobase.h	/^__copy(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
__copy	.\lib\avr-stl\include\stl_algobase.h	/^inline _OutputIter __copy(_InputIter __first, _InputIter __last,$/;"	f
__copy_aux	.\lib\avr-stl\include\stl_algobase.h	/^inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last,$/;"	f
__copy_aux2	.\lib\avr-stl\include\stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f
__copy_aux2	.\lib\avr-stl\include\stl_algobase.h	/^inline _Tp* __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result,$/;"	f
__copy_aux2	.\lib\avr-stl\include\stl_algobase.h	/^inline _Tp* __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result,$/;"	f
__copy_backward	.\lib\avr-stl\include\stl_algobase.h	/^inline _BidirectionalIter __copy_backward(_RandomAccessIter __first, $/;"	f
__copy_backward	.\lib\avr-stl\include\stl_algobase.h	/^inline _BidirectionalIter2 __copy_backward(_BidirectionalIter1 __first, $/;"	f
__copy_backward_dispatch	.\lib\avr-stl\include\stl_algobase.h	/^struct __copy_backward_dispatch$/;"	s
__copy_backward_dispatch	.\lib\avr-stl\include\stl_algobase.h	/^struct __copy_backward_dispatch<_Tp*, _Tp*, __true_type>$/;"	s
__copy_backward_dispatch	.\lib\avr-stl\include\stl_algobase.h	/^struct __copy_backward_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s
__copy_constructor_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __copy_constructor_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR
__copy_dispatch	.\lib\avr-stl\include\stl_algobase.h	/^struct __copy_dispatch {$/;"	s
__copy_dispatch	.\lib\avr-stl\include\stl_algobase.h	/^struct __copy_dispatch<_Tp*, _Tp*, __true_type>$/;"	s
__copy_dispatch	.\lib\avr-stl\include\stl_algobase.h	/^struct __copy_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s
__copy_n	.\lib\avr-stl\include\stl_algobase.h	/^__copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f
__copy_n	.\lib\avr-stl\include\stl_algobase.h	/^__copy_n(_RAIter __first, _Size __count,$/;"	f
__copy_n	.\lib\avr-stl\include\stl_algobase.h	/^pair<_InputIter, _OutputIter> __copy_n(_InputIter __first, _Size __count,$/;"	f
__copy_trivial	.\lib\avr-stl\include\stl_algobase.h	/^__copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f
__cxa_guard_abort	.\lib\FastLED\FastLED.cpp	/^	extern "C" void __cxa_guard_abort (__guard *)$/;"	f	namespace:__cxxabiv1
__cxa_guard_acquire	.\lib\FastLED\FastLED.cpp	/^	extern "C" int __cxa_guard_acquire (__guard *g)$/;"	f	namespace:__cxxabiv1
__cxa_guard_release	.\lib\FastLED\FastLED.cpp	/^	extern "C" void __cxa_guard_release (__guard *g)$/;"	f	namespace:__cxxabiv1
__cxa_pure_virtual	.\lib\FastLED\FastLED.cpp	/^	extern "C" void __cxa_pure_virtual (void) {}$/;"	f	namespace:__cxxabiv1
__cxxabiv1	.\lib\FastLED\FastLED.cpp	/^namespace __cxxabiv1$/;"	n	file:
__default_alloc_template	.\lib\avr-stl\include\stl_alloc.h	/^class __default_alloc_template {$/;"	c
__default_constructor_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __default_constructor_requirement_violation(_Type) {$/;"	f	struct:_STL_ERROR
__deque_buf_size	.\lib\avr-stl\include\stl_deque.h	/^inline size_t __deque_buf_size(size_t __size) {$/;"	f
__dereference_operator_and_assignment_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __dereference_operator_and_assignment_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR
__dereference_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __dereference_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR
__destroy	.\lib\avr-stl\include\stl_construct.h	/^__destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*)$/;"	f
__destroy_aux	.\lib\avr-stl\include\stl_construct.h	/^__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)$/;"	f
__destroy_aux	.\lib\avr-stl\include\stl_construct.h	/^inline void __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type) {}$/;"	f
__difference_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __difference_operator_requirement_violation(_Iterator __i, _Iterator __j,$/;"	f	struct:_STL_ERROR
__difference_type_type_definition_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^struct __difference_type_type_definition_requirement_violation {$/;"	s
__distance	.\lib\avr-stl\include\stl_iterator_base.h	/^__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)$/;"	f
__distance	.\lib\avr-stl\include\stl_iterator_base.h	/^__distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f
__distance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void __distance(_InputIterator __first, _InputIterator __last,$/;"	f
__distance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void __distance(_RandomAccessIterator __first, $/;"	f
__distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^__distance_type(const _Iter&)$/;"	f
__element_access_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __element_access_operator_requirement_violation(_Exp __x, _Type*,$/;"	f	struct:_STL_ERROR
__element_assignment_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __element_assignment_operator_requirement_violation(_Exp __x,$/;"	f	struct:_STL_ERROR
__empty_function_must_be_const	.\lib\avr-stl\include\container_concepts.h	/^  __empty_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__empty_function_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __empty_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__end_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __end_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__equal_range	.\lib\avr-stl\include\stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f
__equality_comparable_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __equality_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR
__erase_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__false_type	.\lib\avr-stl\include\type_traits.h	/^struct __false_type {$/;"	s
__fill_constructor_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __fill_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__fill_default_constructor_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __fill_default_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__fill_insert_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __fill_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__final_insertion_sort	.\lib\avr-stl\include\stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f
__find_end	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f
__find_end	.\lib\avr-stl\include\stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f
__front_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__gcd	.\lib\avr-stl\include\stl_algo.h	/^_EuclideanRingElement __gcd(_EuclideanRingElement __m,$/;"	f
__generator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  static _Ret __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR
__generator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  static void __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR
__get_temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^__get_temporary_buffer(ptrdiff_t __len, _Tp*)$/;"	f
__guard	.\lib\FastLED\FastLED.cpp	/^	__extension__ typedef int __guard __attribute__((mode(__DI__)));$/;"	t	namespace:__cxxabiv1	file:
__inplace_merge_aux	.\lib\avr-stl\include\stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f
__inplace_stable_partition	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __inplace_stable_partition(_ForwardIter __first,$/;"	f
__inplace_stable_sort	.\lib\avr-stl\include\stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f
__insert_element_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__insert_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__insertion_sort	.\lib\avr-stl\include\stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f
__insertion_sort	.\lib\avr-stl\include\stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first,$/;"	f
__introsort_loop	.\lib\avr-stl\include\stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f
__is_heap	.\lib\avr-stl\include\stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _Distance __n)$/;"	f
__is_heap	.\lib\avr-stl\include\stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,$/;"	f
__iter_swap	.\lib\avr-stl\include\stl_algobase.h	/^inline void __iter_swap(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*) {$/;"	f
__iterator_addition_assignment_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __iterator_addition_assignment_requirement_violation(_Iterator __i, $/;"	f	struct:_STL_ERROR
__iterator_addition_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __iterator_addition_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR
__iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^__iterator_category(const _Iter&)$/;"	f
__iterator_category_type_definition_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^struct __iterator_category_type_definition_requirement_violation {$/;"	s
__iterator_subtraction_assignment_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __iterator_subtraction_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR
__iterator_subtraction_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __iterator_subtraction_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR
__less_than_comparable_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __less_than_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR
__lexicographical_compare_3way	.\lib\avr-stl\include\stl_algobase.h	/^__lexicographical_compare_3way(const char* __first1, const char* __last1,$/;"	f
__lexicographical_compare_3way	.\lib\avr-stl\include\stl_algobase.h	/^__lexicographical_compare_3way(const unsigned char* __first1,$/;"	f
__lexicographical_compare_3way	.\lib\avr-stl\include\stl_algobase.h	/^int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
__lg	.\lib\avr-stl\include\stl_algo.h	/^inline _Size __lg(_Size __n) {$/;"	f
__linear_insert	.\lib\avr-stl\include\stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f
__lower_bound	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f
__make_heap	.\lib\avr-stl\include\stl_heap.h	/^__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f
__make_heap	.\lib\avr-stl\include\stl_heap.h	/^__make_heap(_RandomAccessIterator __first,$/;"	f
__malloc_alloc_oom_handler	.\lib\avr-stl\include\stl_alloc.h	/^    void (* __malloc_alloc_oom_handler)() = 0;$/;"	v
__malloc_alloc_oom_handler	.\lib\avr-stl\include\stl_alloc.h	/^  static void (* __malloc_alloc_oom_handler)();$/;"	m	class:__malloc_alloc_template
__malloc_alloc_oom_handler	.\lib\avr-stl\include\stl_alloc.h	/^void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;$/;"	v
__malloc_alloc_template	.\lib\avr-stl\include\stl_alloc.h	/^class __malloc_alloc_template {$/;"	c
__max_size_function_must_be_const	.\lib\avr-stl\include\container_concepts.h	/^  __max_size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__max_size_function_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __max_size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__median	.\lib\avr-stl\include\stl_algo.h	/^__median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp) {$/;"	f
__median	.\lib\avr-stl\include\stl_algo.h	/^inline const _Tp& __median(const _Tp& __a, const _Tp& __b, const _Tp& __c) {$/;"	f
__merge_adaptive	.\lib\avr-stl\include\stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first, $/;"	f
__merge_adaptive	.\lib\avr-stl\include\stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first,$/;"	f
__merge_backward	.\lib\avr-stl\include\stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f
__merge_sort_loop	.\lib\avr-stl\include\stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f
__merge_sort_with_buffer	.\lib\avr-stl\include\stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f
__merge_without_buffer	.\lib\avr-stl\include\stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f
__nth_element	.\lib\avr-stl\include\stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f
__partial_sort	.\lib\avr-stl\include\stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f
__partial_sort_copy	.\lib\avr-stl\include\stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f
__partial_sum	.\lib\avr-stl\include\stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last, $/;"	f
__partial_sum	.\lib\avr-stl\include\stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f
__partition	.\lib\avr-stl\include\stl_algo.h	/^_BidirectionalIter __partition(_BidirectionalIter __first,$/;"	f
__partition	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __partition(_ForwardIter __first,$/;"	f
__pointer_type_definition_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^struct __pointer_type_definition_requirement_violation {$/;"	s
__pop_back_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __pop_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__pop_front_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __pop_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__pop_heap	.\lib\avr-stl\include\stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f
__pop_heap_aux	.\lib\avr-stl\include\stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f
__pop_heap_aux	.\lib\avr-stl\include\stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first,$/;"	f
__postdecrement_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __postdecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR
__postincrement_operator_and_assignment_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __postincrement_operator_and_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR
__postincrement_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __postincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR
__power	.\lib\avr-stl\include\stl_numeric.h	/^_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f
__power	.\lib\avr-stl\include\stl_numeric.h	/^inline _Tp __power(_Tp __x, _Integer __n)$/;"	f
__predecrement_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __predecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR
__preincrement_operator_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __preincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR
__push_back_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __push_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__push_front_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __push_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__push_heap	.\lib\avr-stl\include\stl_heap.h	/^__push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f
__push_heap	.\lib\avr-stl\include\stl_heap.h	/^__push_heap(_RandomAccessIterator __first,$/;"	f
__push_heap_aux	.\lib\avr-stl\include\stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f
__random_number	.\lib\avr-stl\include\stl_algo.h	/^inline _Distance __random_number(_Distance __n) {$/;"	f
__random_sample	.\lib\avr-stl\include\stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f
__range_constructor_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __range_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__range_erase_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __range_erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__range_insert_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __range_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__rb_verify	.\lib\avr-stl\include\stl_tree.h	/^bool _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:_Rb_tree
__rbegin_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __rbegin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__reference_type_definition_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^struct __reference_type_definition_requirement_violation {$/;"	s
__rend_iterator_accessor_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __rend_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__reverse	.\lib\avr-stl\include\stl_algo.h	/^void __reverse(_BidirectionalIter __first, _BidirectionalIter __last, $/;"	f
__reverse	.\lib\avr-stl\include\stl_algo.h	/^void __reverse(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
__rotate	.\lib\avr-stl\include\stl_algo.h	/^_BidirectionalIter __rotate(_BidirectionalIter __first,$/;"	f
__rotate	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __rotate(_ForwardIter __first,$/;"	f
__rotate	.\lib\avr-stl\include\stl_algo.h	/^_RandomAccessIter __rotate(_RandomAccessIter __first,$/;"	f
__rotate_adaptive	.\lib\avr-stl\include\stl_algo.h	/^_BidirectionalIter1 __rotate_adaptive(_BidirectionalIter1 __first,$/;"	f
__set_malloc_handler	.\lib\avr-stl\include\stl_alloc.h	/^  static void (* __set_malloc_handler(void (*__f)()))()$/;"	f	class:__malloc_alloc_template
__sink_unused_warning	.\lib\avr-stl\include\concept_checks.h	/^void __sink_unused_warning(_Type) { }$/;"	f
__size_function_must_be_const	.\lib\avr-stl\include\container_concepts.h	/^  __size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__size_function_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__slist_make_link	.\lib\avr-stl\include\stl_slist.h	/^__slist_make_link(_Slist_node_base* __prev_node,$/;"	f
__slist_previous	.\lib\avr-stl\include\stl_slist.h	/^__slist_previous(_Slist_node_base* __head,$/;"	f
__slist_previous	.\lib\avr-stl\include\stl_slist.h	/^__slist_previous(const _Slist_node_base* __head,$/;"	f
__slist_reverse	.\lib\avr-stl\include\stl_slist.h	/^inline _Slist_node_base* __slist_reverse(_Slist_node_base* __node)$/;"	f
__slist_size	.\lib\avr-stl\include\stl_slist.h	/^inline size_t __slist_size(_Slist_node_base* __node)$/;"	f
__slist_splice_after	.\lib\avr-stl\include\stl_slist.h	/^__slist_splice_after(_Slist_node_base* __pos, _Slist_node_base* __head)$/;"	f
__slist_splice_after	.\lib\avr-stl\include\stl_slist.h	/^inline void __slist_splice_after(_Slist_node_base* __pos,$/;"	f
__stable_partition_adaptive	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __stable_partition_adaptive(_ForwardIter __first,$/;"	f
__stable_partition_aux	.\lib\avr-stl\include\stl_algo.h	/^__stable_partition_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f
__stable_sort_adaptive	.\lib\avr-stl\include\stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f
__stable_sort_aux	.\lib\avr-stl\include\stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f
__stl_assert	.\lib\avr-stl\include\stl_config.h	575;"	d
__stl_assert	.\lib\avr-stl\include\stl_config.h	579;"	d
__stl_chunk_size	.\lib\avr-stl\include\stl_algo.h	/^const int __stl_chunk_size = 7;$/;"	v
__stl_hash_string	.\lib\avr-stl\include\stl_hash_fun.h	/^inline size_t __stl_hash_string(const char* __s)$/;"	f
__stl_next_prime	.\lib\avr-stl\include\stl_hashtable.h	/^inline unsigned long __stl_next_prime(unsigned long __n)$/;"	f
__stl_num_primes	.\lib\avr-stl\include\stl_hashtable.h	/^enum { __stl_num_primes = 28 };$/;"	e	enum:__anon18
__stl_num_primes	.\lib\avr-stl\include\stl_hashtable.h	/^enum { __stl_num_primes = 30 };$/;"	e	enum:__anon17
__stl_prime_list	.\lib\avr-stl\include\stl_hashtable.h	/^static const unsigned char __stl_prime_list[__stl_num_primes] =$/;"	v
__stl_prime_list	.\lib\avr-stl\include\stl_hashtable.h	/^static const unsigned long __stl_prime_list[__stl_num_primes] =$/;"	v
__stl_threshold	.\lib\avr-stl\include\stl_algo.h	/^const int __stl_threshold = 16;$/;"	v
__swap_function_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^  __swap_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER
__true_type	.\lib\avr-stl\include\type_traits.h	/^struct __true_type {$/;"	s
__type_X_is_not_convertible_to_type_Y	.\lib\avr-stl\include\concept_checks.h	/^  __type_X_is_not_convertible_to_type_Y(_TypeX __x, _TypeY) {$/;"	f	struct:_STL_CONVERT_ERROR
__type_X_not_same_as_type_Y	.\lib\avr-stl\include\concept_checks.h	/^  __type_X_not_same_as_type_Y(_TypeX , _TypeY ) { $/;"	f	struct:_STL_SAME_TYPE_ERROR
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<bool> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<char*> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<char> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const char*> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const signed char*> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const unsigned char*> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<double> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<float> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<int> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long double> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long long> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<short> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<signed char*> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<signed char> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned char*> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned char> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned int> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned long long> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned long> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned short> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<wchar_t> {$/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^struct __type_traits { $/;"	s
__type_traits	.\lib\avr-stl\include\type_traits.h	/^struct __type_traits<_Tp*> {$/;"	s
__unary_function_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^  __unary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_UNARY_FUNCTION_ERROR
__unconditional_insert_element_function_requirement_violation	.\lib\avr-stl\include\sequence_concepts.h	/^  __unconditional_insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ
__underlying_alloc	.\lib\avr-stl\include\stl_alloc.h	/^  _Alloc __underlying_alloc;$/;"	m	struct:__allocator
__unguarded_insertion_sort	.\lib\avr-stl\include\stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f
__unguarded_insertion_sort_aux	.\lib\avr-stl\include\stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f
__unguarded_linear_insert	.\lib\avr-stl\include\stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val) {$/;"	f
__unguarded_linear_insert	.\lib\avr-stl\include\stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val, $/;"	f
__unguarded_partition	.\lib\avr-stl\include\stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f
__uninitialized_copy	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f
__uninitialized_copy_aux	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f
__uninitialized_copy_copy	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
__uninitialized_copy_fill	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,$/;"	f
__uninitialized_copy_n	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f
__uninitialized_copy_n	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_copy_n(_RandomAccessIter __first, _Size __count,$/;"	f
__uninitialized_fill	.\lib\avr-stl\include\stl_uninitialized.h	/^inline void __uninitialized_fill(_ForwardIter __first, $/;"	f
__uninitialized_fill_aux	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f
__uninitialized_fill_copy	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid,$/;"	f
__uninitialized_fill_n	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)$/;"	f
__uninitialized_fill_n_aux	.\lib\avr-stl\include\stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f
__unique_copy	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f
__unique_copy	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f
__unique_copy	.\lib\avr-stl\include\stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f
__upper_bound	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f
__value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^__value_type(const _Iter&)$/;"	f
__value_type_type_definition_requirement_violation	.\lib\avr-stl\include\concept_checks.h	/^struct __value_type_type_definition_requirement_violation {$/;"	s
_active	.\src\Trap.h	/^    bool _active;$/;"	m	class:Trap
_activeColor	.\src\Trap.h	/^    CRGB::HTMLColorCode _activeColor;$/;"	m	class:Trap
_animationSpeed	.\src\LightEffects.h	/^    uint8_t _animationSpeed = 3;$/;"	m	class:LightEffects
_ar	.\lib\RunningMedian\RunningMedian.h	/^  float * _ar;$/;"	m	class:RunningMedian
_ar	.\lib\RunningMedian\RunningMedian.h	/^  float _ar[MEDIAN_MAX_SIZE];$/;"	m	class:RunningMedian
_brightness	.\src\LightEffects.h	/^    int _brightness = 50;$/;"	m	class:LightEffects
_changesDirection	.\src\Enemy.h	/^    bool _changesDirection = false;$/;"	m	class:Enemy
_cnt	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t _cnt;$/;"	m	class:RunningMedian
_color	.\src\Entity.h	/^  CRGB::HTMLColorCode _color;$/;"	m	class:Entity
_const_ReversibleContainer_concept_specification	.\lib\avr-stl\include\container_concepts.h	/^struct _const_ReversibleContainer_concept_specification {$/;"	s
_const_ReversibleContainer_requirement_violation	.\lib\avr-stl\include\container_concepts.h	/^_const_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_const_ReversibleContainer_concept_specification
_ctar0	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState
_ctar0	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState
_ctar1	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState
_ctar1	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 3>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<1>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 4>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<2>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 5>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<3>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 6>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<2>(loopvar); _dc<2>(loopvar);}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 7>(register uint8_t & loopvar) { _dc<4>(loopvar); _dc<3>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 8>(register uint8_t & loopvar) { _dc<4>(loopvar); _dc<4>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 9>(register uint8_t & loopvar) { _dc<5>(loopvar); _dc<4>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-5>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-6>(register uint8_t & ) {}$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<10>(register uint8_t & loopvar) { _dc<6>(loopvar); _dc<4>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<11>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<1>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<12>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<2>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<13>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<3>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<14>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<4>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<15>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<5>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<16>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<6>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<17>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<7>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<18>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<8>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<19>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<9>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<20>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<10>(loopvar); }$/;"	f
_dc	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<int CYCLES> __attribute__((always_inline)) inline void _dc(register uint8_t & loopvar) {$/;"	f
_dc_AVR	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^template<int _LOOP, int PAD> __attribute__((always_inline)) inline void _dc_AVR(register uint8_t & loopvar) {$/;"	f
_delaycycles_AVR	.\lib\FastLED\fastled_delay.h	/^template<int LOOP, int PAD> inline void _delaycycles_AVR() {$/;"	f
_direction	.\src\Water.h	/^    bool _direction; \/\/0 == down, 1 == up$/;"	m	class:Water
_flushed	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    unsigned long _flushed;$/;"	m	class:BLESerial
_frame_cnt	.\lib\FastLED\FastLED.cpp	/^uint32_t _frame_cnt=0;$/;"	v
_gammaTable	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^static const uint8_t PROGMEM _gammaTable[] = { _G3_ _G3_ _G3_ _G3_ }; \/\/ 256$/;"	v	file:
_getCycleCount	.\lib\Adafruit_NeoPixel\esp8266.c	/^static inline uint32_t _getCycleCount(void) {$/;"	f	file:
_height	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  _width, _height; \/\/ dependent on rotation$/;"	m	class:GOFi2cOLED
_idx	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t _idx;$/;"	m	class:RunningMedian
_inactiveColor	.\src\Trap.h	/^    CRGB::HTMLColorCode _inactiveColor;$/;"	m	class:Trap
_init	.\lib\FastLED\fastpin.h	/^	static void _init() {$/;"	f	class:FastPin
_init	.\lib\FastLED\fastpin.h	/^	void _init() {$/;"	f	class:Pin
_init	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  void _init(int nLeds) {$/;"	f	class:COctoWS2811Controller
_init	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  void _init(int nLeds) {$/;"	f	class:CWS2812SerialController
_instance	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^BLESerial* BLESerial::_instance = NULL;$/;"	m	class:BLESerial	file:
_instance	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    static BLESerial* _instance;$/;"	m	class:BLESerial
_lives	.\src\Player.h	/^    short _lives = 3;$/;"	m	class:Player
_moves	.\src\Enemy.h	/^    bool _moves;$/;"	m	class:Enemy
_p	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t * _p;$/;"	m	class:RunningMedian
_p	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t _p[MEDIAN_MAX_SIZE];$/;"	m	class:RunningMedian
_position	.\src\Entity.h	/^  int _position;$/;"	m	class:Entity
_received	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^void BLESerial::_received(BLECentral& \/*central*\/, BLECharacteristic& rxCharacteristic) {$/;"	f	class:BLESerial
_received	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^void BLESerial::_received(const uint8_t* data, size_t size) {$/;"	f	class:BLESerial
_retry_cnt	.\lib\FastLED\FastLED.cpp	/^uint32_t _retry_cnt=0;$/;"	v
_rxBuffer	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    uint8_t _rxBuffer[BLE_ATTRIBUTE_MAX_VALUE_LENGTH];$/;"	m	class:BLESerial
_rxCharacteristic	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    BLECharacteristic _rxCharacteristic = BLECharacteristic("6E400002-B5A3-F393-E0A9-E50E24DCCA9E", BLEWriteWithoutResponse, BLE_ATTRIBUTE_MAX_VALUE_LENGTH);$/;"	m	class:BLESerial
_rxHead	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    size_t _rxHead;$/;"	m	class:BLESerial
_rxNameDescriptor	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    BLEDescriptor _rxNameDescriptor = BLEDescriptor("2901", "RX - Receive Data (Write)");$/;"	m	class:BLESerial
_rxTail	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    size_t _rxTail;$/;"	m	class:BLESerial
_sineTable	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^static const uint8_t PROGMEM _sineTable[] = { _S3_ _S3_ _S3_ _S3_ }; \/\/ 256$/;"	v	file:
_size	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t _size;$/;"	m	class:RunningMedian
_size	.\src\Lava.h	/^    short _size;$/;"	m	class:Trap
_size	.\src\Trap.h	/^    short _size;$/;"	m	class:Trap
_size	.\src\Water.h	/^    uint8_t _size; \/\/gets bigger depending on size$/;"	m	class:Water
_sorted	.\lib\RunningMedian\RunningMedian.h	/^  boolean _sorted;$/;"	m	class:RunningMedian
_spawnColor	.\src\SpawnPoint.h	/^    CRGB::HTMLColorCode _spawnColor;$/;"	m	class:SpawnPoint
_spawnSpeed	.\src\SpawnPoint.h	/^    short _spawnSpeed = 0;$/;"	m	class:SpawnPoint
_spawnTick	.\src\SpawnPoint.h	/^    short _spawnTick = 0;$/;"	m	class:SpawnPoint
_speed	.\src\Enemy.h	/^    int _speed;$/;"	m	class:Enemy
_tAC_time	.\lib\toneAC\toneAC.cpp	/^unsigned long _tAC_time; \/\/ Used to track end note with timer when playing note in the background.$/;"	v
_tAC_volume	.\lib\toneAC\toneAC.cpp	/^uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; \/\/ Duty for linear volume control.$/;"	v
_txBuffer	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    uint8_t _txBuffer[BLE_ATTRIBUTE_MAX_VALUE_LENGTH];$/;"	m	class:BLESerial
_txCharacteristic	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    BLECharacteristic _txCharacteristic = BLECharacteristic("6E400003-B5A3-F393-E0A9-E50E24DCCA9E", BLENotify, BLE_ATTRIBUTE_MAX_VALUE_LENGTH);$/;"	m	class:BLESerial
_txCount	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    size_t _txCount;$/;"	m	class:BLESerial
_txNameDescriptor	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    BLEDescriptor _txNameDescriptor = BLEDescriptor("2901", "TX - Transfer Data (Notify)");$/;"	m	class:BLESerial
_type	.\src\Entity.h	/^  char* _type;$/;"	m	class:Entity
_uartNameDescriptor	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    BLEDescriptor _uartNameDescriptor = BLEDescriptor("2901", "UART");$/;"	m	class:BLESerial
_uartService	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.h	/^    BLEService _uartService = BLEService("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");$/;"	m	class:BLESerial
_width	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  _width, _height; \/\/ dependent on rotation$/;"	m	class:GOFi2cOLED
a	.\lib\FastLED\bitswap.h	/^    sub4 a;$/;"	m	struct:__anon22::__anon23
a0	.\lib\FastLED\bitswap.h	/^  uint32_t a0:1;$/;"	m	struct:__anon19::__anon20
a0	.\lib\FastLED\bitswap.h	/^  uint32_t a0:1;$/;"	m	struct:__anon21
a1	.\lib\FastLED\bitswap.h	/^  uint32_t a1:1;$/;"	m	struct:__anon19::__anon20
a1	.\lib\FastLED\bitswap.h	/^  uint32_t a1:1;$/;"	m	struct:__anon21
a2	.\lib\FastLED\bitswap.h	/^  uint32_t a2:1;$/;"	m	struct:__anon19::__anon20
a2	.\lib\FastLED\bitswap.h	/^  uint32_t a2:1;$/;"	m	struct:__anon21
a3	.\lib\FastLED\bitswap.h	/^  uint32_t a3:1;$/;"	m	struct:__anon19::__anon20
a3	.\lib\FastLED\bitswap.h	/^  uint32_t a3:1;$/;"	m	struct:__anon21
a4	.\lib\FastLED\bitswap.h	/^  uint32_t a4:1;$/;"	m	struct:__anon19::__anon20
a4	.\lib\FastLED\bitswap.h	/^  uint32_t a4:1;$/;"	m	struct:__anon21
a5	.\lib\FastLED\bitswap.h	/^  uint32_t a5:1;$/;"	m	struct:__anon19::__anon20
a5	.\lib\FastLED\bitswap.h	/^  uint32_t a5:1;$/;"	m	struct:__anon21
a6	.\lib\FastLED\bitswap.h	/^  uint32_t a6:1;$/;"	m	struct:__anon19::__anon20
a6	.\lib\FastLED\bitswap.h	/^  uint32_t a6:1;$/;"	m	struct:__anon21
a7	.\lib\FastLED\bitswap.h	/^  uint32_t a7:1;$/;"	m	struct:__anon19::__anon20
a7	.\lib\FastLED\bitswap.h	/^  uint32_t a7:1;$/;"	m	struct:__anon21
abs8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE int8_t abs8( int8_t i)$/;"	f
accum124	.\lib\FastLED\lib8tion.h	/^typedef uint16_t  accum124; \/\/\/< no direct ANSI counterpart. 12 bits int, 4 bits fraction$/;"	t
accum1616	.\lib\FastLED\lib8tion.h	/^typedef uint32_t  accum1616;\/\/\/< ANSI: signed         _Accum. 16 bits int, 16 bits fraction$/;"	t
accum88	.\lib\FastLED\lib8tion.h	/^typedef uint16_t  accum88;  \/\/\/< ANSI: unsigned short _Accum.  8 bits int, 8 bits fraction$/;"	t
accumulate	.\lib\avr-stl\include\stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f
accumulate	.\lib\avr-stl\include\stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f
activateScroll	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::activateScroll()$/;"	f	class:GOFi2cOLED
add	.\lib\RunningMedian\RunningMedian.cpp	/^void RunningMedian::add(float value)$/;"	f	class:RunningMedian
add8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t add8( uint8_t i, uint8_t j)$/;"	f
add8to16	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t add8to16( uint8_t i, uint16_t j)$/;"	f
addLeds	.\lib\FastLED\FastLED.cpp	/^CLEDController &CFastLED::addLeds(CLEDController *pLed,$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN > static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER > static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER, uint8_t SPI_DATA_RATE > CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	template<ESPIChipsets CHIPSET, EOrder RGB_ORDER, uint8_t SPI_DATA_RATE> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	template<ESPIChipsets CHIPSET, EOrder RGB_ORDER> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addLeds	.\lib\FastLED\FastLED.h	/^	template<ESPIChipsets CHIPSET> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED
addPoint	.\src\LightEffects.cpp	/^void LightEffects::addPoint(uint16_t origin,CRGB::HTMLColorCode color) {$/;"	f	class:LightEffects
addToRGB	.\lib\FastLED\pixelset.h	/^  inline CPixelView & addToRGB(uint8_t inc) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) += inc; } return *this; }$/;"	f	class:CPixelView
addToRGB	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& addToRGB (uint8_t d )$/;"	f	struct:CRGB
addTrapAnimation	.\src\LightEffects.cpp	/^void LightEffects::addTrapAnimation(uint16_t origin, uint16_t size, CRGB::HTMLColorCode activeColor, CRGB::HTMLColorCode inactiveColor, int tick) {$/;"	f	class:LightEffects
addTrapAnimation	.\src\LightEffects.cpp	/^void LightEffects::addTrapAnimation(uint16_t origin, uint16_t size, CRGB::HTMLColorCode color, int tick, bool active) {$/;"	f	class:LightEffects
addWaterAnimation	.\src\LightEffects.cpp	/^void LightEffects::addWaterAnimation(uint16_t origin, uint16_t size, bool direction, CRGB::HTMLColorCode color) {$/;"	f	class:LightEffects
addWaveAnimation	.\src\LightEffects.cpp	/^void LightEffects::addWaveAnimation(uint16_t origin, uint16_t size, CRGB::HTMLColorCode endWaveColor, CRGB::HTMLColorCode middleWaveColor) {$/;"	f	class:LightEffects
addmod8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC uint8_t addmod8( uint8_t a, uint8_t b, uint8_t m)$/;"	f
address	.\lib\I2Cdev\I2Cdev.cpp	/^        uint8_t address;$/;"	m	struct:__anon55	file:
address	.\lib\avr-stl\include\stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:allocator
address	.\lib\avr-stl\include\stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f
address	.\lib\avr-stl\include\stl_alloc.h	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:allocator
adj	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^  uint8_t adj;$/;"	m	struct:M0ClocklessData
adjacent_difference	.\lib\avr-stl\include\stl_numeric.h	/^adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f
adjacent_difference	.\lib\avr-stl\include\stl_numeric.h	/^adjacent_difference(_InputIterator __first,$/;"	f
adjacent_find	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last) {$/;"	f
adjacent_find	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last,$/;"	f
adjust	.\lib\FastLED\chipsets.h	/^		__attribute__((always_inline)) inline static uint8_t adjust(register uint8_t data) { return ((data>>1) | 0x80) + ((data && (data<254)) & 0x01); }$/;"	f	class:LPD8806Controller::LPD8806_ADJUST
adjust	.\lib\FastLED\fastspi_types.h	/^  static __attribute__((always_inline)) inline uint8_t adjust(register uint8_t data) { return data; }$/;"	f	class:DATA_NOP
adjust	.\lib\FastLED\fastspi_types.h	/^  static __attribute__((always_inline)) inline uint8_t adjust(register uint8_t data, register uint8_t scale) { return scale8(data, scale); }$/;"	f	class:DATA_NOP
advance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void advance(_InputIterator& __i, _Distance __n) {$/;"	f
advanceAndLoadAndScale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }$/;"	f	struct:PixelController
advanceAndLoadAndScale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }$/;"	f	struct:PixelController
advanceAndLoadAndScale0	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0() { return advanceAndLoadAndScale<0>(*this); }$/;"	f	struct:PixelController
advanceAndLoadAndScale0	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0(int lane) { return advanceAndLoadAndScale<0>(*this, lane); }$/;"	f	struct:PixelController
advanceBy	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }$/;"	f	struct:PixelController
advanceData	.\lib\FastLED\controller.h	/^         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}$/;"	f	struct:PixelController
alloc	.\lib\avr-stl\include\stl_alloc.h	/^typedef __default_alloc_template<__NODE_ALLOCATOR_THREADS, 0> alloc;$/;"	t
alloc	.\lib\avr-stl\include\stl_alloc.h	/^typedef malloc_alloc alloc;$/;"	t
allocate	.\lib\avr-stl\include\stl_alloc.h	/^    static _Tp* allocate(size_t __n)$/;"	f	class:simple_alloc
allocate	.\lib\avr-stl\include\stl_alloc.h	/^    static _Tp* allocate(void)$/;"	f	class:simple_alloc
allocate	.\lib\avr-stl\include\stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:allocator
allocate	.\lib\avr-stl\include\stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f
allocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:__default_alloc_template
allocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:__malloc_alloc_template
allocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:debug_alloc
allocator	.\lib\avr-stl\include\stl_alloc.h	/^class allocator {$/;"	c
allocator	.\lib\avr-stl\include\stl_alloc.h	/^class allocator<void> {$/;"	c
allocator_type	.\lib\avr-stl\include\stl_bvector.h	/^          allocator_type;$/;"	t	class:_Bvector_alloc_base
allocator_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Bvector_base
allocator_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Bvector_base
allocator_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef typename __BVECTOR_BASE::allocator_type allocator_type;$/;"	t	class:__BVECTOR
allocator_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Deque_base
allocator_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Alloc_traits<_Tp,_Alloc>::allocator_type allocator_type;$/;"	t	class:_Deque_alloc_base
allocator_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Deque_base
allocator_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:deque
allocator_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_map
allocator_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_multimap
allocator_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_multiset
allocator_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_set
allocator_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Alloc allocator_type;$/;"	t	class:hashtable
allocator_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef typename _Alloc_traits<_Val,_Alloc>::allocator_type allocator_type;$/;"	t	class:hashtable
allocator_type	.\lib\avr-stl\include\stl_list.h	/^          allocator_type;$/;"	t	class:_List_alloc_base
allocator_type	.\lib\avr-stl\include\stl_list.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_List_base
allocator_type	.\lib\avr-stl\include\stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_List_base
allocator_type	.\lib\avr-stl\include\stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:list
allocator_type	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:map
allocator_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:multimap
allocator_type	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:multiset
allocator_type	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:set
allocator_type	.\lib\avr-stl\include\stl_slist.h	/^          allocator_type;$/;"	t	class:_Slist_alloc_base
allocator_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:_Slist_base
allocator_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:slist
allocator_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Slist_base
allocator_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:_Rb_tree_base
allocator_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:_Rb_tree_alloc_base
allocator_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Rb_tree
allocator_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rb_tree_base
allocator_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:rb_tree
allocator_type	.\lib\avr-stl\include\stl_vector.h	/^          allocator_type;$/;"	t	class:_Vector_alloc_base
allocator_type	.\lib\avr-stl\include\stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:vector
allocator_type	.\lib\avr-stl\include\stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Vector_base
applyGamma_video	.\lib\FastLED\colorutils.cpp	/^CRGB applyGamma_video( const CRGB& orig, float gamma)$/;"	f
applyGamma_video	.\lib\FastLED\colorutils.cpp	/^CRGB applyGamma_video( const CRGB& orig, float gammaR, float gammaG, float gammaB)$/;"	f
applyGamma_video	.\lib\FastLED\colorutils.cpp	/^uint8_t applyGamma_video( uint8_t brightness, float gamma)$/;"	f
argument_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Arg argument_type;$/;"	t	struct:unary_function
argument_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Argument argument_type;$/;"	t	struct:_Constant_unary_fun
assign	.\lib\avr-stl\include\char_traits.h	/^  static _CharT* assign(_CharT* __s, size_t __n, _CharT __c) {$/;"	f	class:__char_traits_base
assign	.\lib\avr-stl\include\char_traits.h	/^  static char* assign(char* __s, size_t __n, char __c)$/;"	f	class:char_traits
assign	.\lib\avr-stl\include\char_traits.h	/^  static void assign(char& __c1, const char& __c2) { __c1 = __c2; }$/;"	f	class:char_traits
assign	.\lib\avr-stl\include\char_traits.h	/^  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }$/;"	f	class:__char_traits_base
assign	.\lib\avr-stl\include\stl_bvector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:__BVECTOR
assign	.\lib\avr-stl\include\stl_bvector.h	/^  void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }$/;"	f	class:__BVECTOR
assign	.\lib\avr-stl\include\stl_deque.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:deque
assign	.\lib\avr-stl\include\stl_deque.h	/^  void assign(size_type __n, const _Tp& __val) {$/;"	f	class:deque
assign	.\lib\avr-stl\include\stl_list.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:list
assign	.\lib\avr-stl\include\stl_list.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:list
assign	.\lib\avr-stl\include\stl_slist.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:slist
assign	.\lib\avr-stl\include\stl_slist.h	/^  void assign(size_type __n, const _Tp& __val)$/;"	f	class:slist
assign	.\lib\avr-stl\include\stl_vector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:vector
assign	.\lib\avr-stl\include\stl_vector.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:vector
at	.\lib\avr-stl\include\stl_bvector.h	/^  const_reference at(size_type __n) const$/;"	f	class:__BVECTOR
at	.\lib\avr-stl\include\stl_bvector.h	/^  reference at(size_type __n)$/;"	f	class:__BVECTOR
at	.\lib\avr-stl\include\stl_deque.h	/^  const_reference at(size_type __n) const$/;"	f	class:deque
at	.\lib\avr-stl\include\stl_deque.h	/^  reference at(size_type __n)$/;"	f	class:deque
at	.\lib\avr-stl\include\stl_vector.h	/^  const_reference at(size_type __n) const$/;"	f	class:vector
at	.\lib\avr-stl\include\stl_vector.h	/^  reference at(size_type __n)$/;"	f	class:vector
atexit	.\lib\FastLED\FastLED.cpp	/^extern "C" int atexit(void (* \/*func*\/ )()) { return 0; }$/;"	f
authors	.\lib\FastLED\library.json	/^    "authors": [$/;"	f
authors	.\lib\RunningMedian\library.json	/^  "authors":$/;"	f
available	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^int BLESerial::available(void) {$/;"	f	class:BLESerial
available	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::available(void) {$/;"	f	class:TwoWire
avg15	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE int16_t avg15( int16_t i, int16_t j)$/;"	f
avg15_inline_avr_mul	.\lib\FastLED\noise.cpp	/^static int16_t inline __attribute__((always_inline))  avg15_inline_avr_mul( int16_t i, int16_t j)$/;"	f	file:
avg16	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t avg16( uint16_t i, uint16_t j)$/;"	f
avg7	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)$/;"	f
avg8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t avg8( uint8_t i, uint8_t j)$/;"	f
avr_free	.\lib\avr-stl\include\stl_alloc.h	/^static void avr_free(void *ptr)$/;"	f
avr_free	.\lib\avr-stl\include\stl_alloc.h	104;"	d
avr_malloc	.\lib\avr-stl\include\stl_alloc.h	/^static void *avr_malloc(size_t size_)$/;"	f
avr_malloc	.\lib\avr-stl\include\stl_alloc.h	103;"	d
avr_realloc	.\lib\avr-stl\include\stl_alloc.h	/^static void *avr_realloc(void *ptr_,size_t size_)$/;"	f
avr_realloc	.\lib\avr-stl\include\stl_alloc.h	105;"	d
avrstl	.\lib\avr-stl\include\avr_config.h	/^namespace avrstl {$/;"	n
b	.\lib\FastLED\bitswap.h	/^    sub4 b;$/;"	m	struct:__anon22::__anon23
b	.\lib\FastLED\colorutils.h	/^        uint8_t b;$/;"	m	struct:__anon27::__anon28
b	.\lib\FastLED\pixeltypes.h	/^                uint8_t b;$/;"	m	union:CRGB::__anon40::__anon41::__anon44
b0	.\lib\FastLED\bitswap.h	/^  uint32_t b0:1;$/;"	m	struct:__anon21
b1	.\lib\FastLED\bitswap.h	/^  uint32_t b1:1;$/;"	m	struct:__anon21
b2	.\lib\FastLED\bitswap.h	/^  uint32_t b2:1;$/;"	m	struct:__anon21
b3	.\lib\FastLED\bitswap.h	/^  uint32_t b3:1;$/;"	m	struct:__anon21
b4	.\lib\FastLED\bitswap.h	/^  uint32_t b4:1;$/;"	m	struct:__anon21
b5	.\lib\FastLED\bitswap.h	/^  uint32_t b5:1;$/;"	m	struct:__anon21
b6	.\lib\FastLED\bitswap.h	/^  uint32_t b6:1;$/;"	m	struct:__anon21
b7	.\lib\FastLED\bitswap.h	/^  uint32_t b7:1;$/;"	m	struct:__anon21
bOffset	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    bOffset,       \/\/ Index of blue byte$/;"	m	class:Adafruit_NeoPixel
b_m16_interleave	.\lib\FastLED\lib8tion\trig8.h	/^const uint8_t b_m16_interleave[] = { 0, 49, 49, 41, 90, 27, 117, 10 };$/;"	v
back	.\lib\avr-stl\include\stl_bvector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:__BVECTOR
back	.\lib\avr-stl\include\stl_bvector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:__BVECTOR
back	.\lib\avr-stl\include\stl_deque.h	/^  const_reference back() const {$/;"	f	class:deque
back	.\lib\avr-stl\include\stl_deque.h	/^  reference back() {$/;"	f	class:deque
back	.\lib\avr-stl\include\stl_list.h	/^  const_reference back() const { return *(--end()); }$/;"	f	class:list
back	.\lib\avr-stl\include\stl_list.h	/^  reference back() { return *(--end()); }$/;"	f	class:list
back	.\lib\avr-stl\include\stl_queue.h	/^  const_reference back() const { return c.back(); }$/;"	f	class:queue
back	.\lib\avr-stl\include\stl_queue.h	/^  reference back() { return c.back(); }$/;"	f	class:queue
back	.\lib\avr-stl\include\stl_vector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:vector
back	.\lib\avr-stl\include\stl_vector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:vector
back_insert_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  explicit back_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:back_insert_iterator
back_insert_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class back_insert_iterator {$/;"	c
back_inserter	.\lib\avr-stl\include\stl_iterator.h	/^inline back_insert_iterator<_Container> back_inserter(_Container& __x) {$/;"	f
base	.\lib\avr-stl\include\stl_iterator.h	/^  _BidirectionalIterator base() const { return current; }$/;"	f	class:reverse_bidirectional_iterator
base	.\lib\avr-stl\include\stl_iterator.h	/^  _RandomAccessIterator base() const { return current; }$/;"	f	class:reverse_iterator
base	.\lib\avr-stl\include\stl_iterator.h	/^  iterator_type base() const { return current; }$/;"	f	class:reverse_iterator
beat16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)$/;"	f
beat8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)$/;"	f
beat88	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t beat88( accum88 beats_per_minute_88, uint32_t timebase = 0)$/;"	f
beatsin16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,$/;"	f
beatsin8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,$/;"	f
beatsin88	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,$/;"	f
before_begin	.\lib\avr-stl\include\stl_slist.h	/^  const_iterator before_begin() const$/;"	f	class:slist
before_begin	.\lib\avr-stl\include\stl_slist.h	/^  iterator before_begin() { return iterator((_Node*) &this->_M_head); }$/;"	f	class:slist
begin	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::begin(void) {$/;"	f	class:Adafruit_NeoPixel
begin	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^void BLESerial::begin(...) {$/;"	f	class:BLESerial
begin	.\lib\FastLED\pixelset.h	/^  iterator begin() const { return iterator(leds, dir); }$/;"	f	class:CPixelView
begin	.\lib\FastLED\pixelset.h	/^  iterator begin() { return iterator(leds, dir); }$/;"	f	class:CPixelView
begin	.\lib\I2Cdev\I2Cdev.cpp	/^    void TwoWire::begin(void) {$/;"	f	class:TwoWire
begin	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:__BVECTOR
begin	.\lib\avr-stl\include\stl_bvector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:__BVECTOR
begin	.\lib\avr-stl\include\stl_deque.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:deque
begin	.\lib\avr-stl\include\stl_deque.h	/^  iterator begin() { return _M_start; }$/;"	f	class:deque
begin	.\lib\avr-stl\include\stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_map
begin	.\lib\avr-stl\include\stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_multimap
begin	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:hash_map
begin	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:hash_multimap
begin	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_multiset
begin	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_set
begin	.\lib\avr-stl\include\stl_hashtable.h	/^  const_iterator begin() const$/;"	f	class:hashtable
begin	.\lib\avr-stl\include\stl_hashtable.h	/^  iterator begin()$/;"	f	class:hashtable
begin	.\lib\avr-stl\include\stl_list.h	/^  const_iterator begin() const { return (_Node*)(_M_node->_M_next); }$/;"	f	class:list
begin	.\lib\avr-stl\include\stl_list.h	/^  iterator begin()             { return (_Node*)(_M_node->_M_next); }$/;"	f	class:list
begin	.\lib\avr-stl\include\stl_map.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:map
begin	.\lib\avr-stl\include\stl_map.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:map
begin	.\lib\avr-stl\include\stl_multimap.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:multimap
begin	.\lib\avr-stl\include\stl_multimap.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:multimap
begin	.\lib\avr-stl\include\stl_multiset.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:multiset
begin	.\lib\avr-stl\include\stl_set.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:set
begin	.\lib\avr-stl\include\stl_slist.h	/^  const_iterator begin() const $/;"	f	class:slist
begin	.\lib\avr-stl\include\stl_slist.h	/^  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }$/;"	f	class:slist
begin	.\lib\avr-stl\include\stl_tempbuf.h	/^  _Tp* begin() { return _M_buffer; }$/;"	f	class:_Temporary_buffer
begin	.\lib\avr-stl\include\stl_tree.h	/^  const_iterator begin() const { return _M_leftmost(); }$/;"	f	class:_Rb_tree
begin	.\lib\avr-stl\include\stl_tree.h	/^  iterator begin() { return _M_leftmost(); }$/;"	f	class:_Rb_tree
begin	.\lib\avr-stl\include\stl_vector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:vector
begin	.\lib\avr-stl\include\stl_vector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:vector
beginTransmission	.\lib\I2Cdev\I2Cdev.cpp	/^    byte Fastwire::beginTransmission(byte device) {$/;"	f	class:Fastwire
beginTransmission	.\lib\I2Cdev\I2Cdev.cpp	/^    void TwoWire::beginTransmission(uint8_t address) {$/;"	f	class:TwoWire
begun	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    begun;         \/\/ true if begin() previously called$/;"	m	class:Adafruit_NeoPixel
bidirectional_iterator	.\lib\avr-stl\include\stl_iterator_base.h	/^template <class _Tp, class _Distance> struct bidirectional_iterator {$/;"	s
bidirectional_iterator_tag	.\lib\avr-stl\include\stl_iterator_base.h	/^struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s
binary_compose	.\lib\avr-stl\include\stl_function.h	/^  binary_compose(const _Operation1& __x, const _Operation2& __y, $/;"	f	class:binary_compose
binary_compose	.\lib\avr-stl\include\stl_function.h	/^class binary_compose$/;"	c
binary_function	.\lib\avr-stl\include\stl_function.h	/^struct binary_function {$/;"	s
binary_negate	.\lib\avr-stl\include\stl_function.h	/^  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:binary_negate
binary_negate	.\lib\avr-stl\include\stl_function.h	/^class binary_negate $/;"	c
binary_search	.\lib\avr-stl\include\stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f
bind1st	.\lib\avr-stl\include\stl_function.h	/^bind1st(const _Operation& __fn, const _Tp& __x) $/;"	f
bind2nd	.\lib\avr-stl\include\stl_function.h	/^bind2nd(const _Operation& __fn, const _Tp& __x) $/;"	f
binder1st	.\lib\avr-stl\include\stl_function.h	/^  binder1st(const _Operation& __x,$/;"	f	class:binder1st
binder1st	.\lib\avr-stl\include\stl_function.h	/^class binder1st$/;"	c
binder2nd	.\lib\avr-stl\include\stl_function.h	/^  binder2nd(const _Operation& __x,$/;"	f	class:binder2nd
binder2nd	.\lib\avr-stl\include\stl_function.h	/^class binder2nd$/;"	c
bit_vector	.\lib\avr-stl\include\stl_bvector.h	/^typedef vector<bool, alloc> bit_vector;$/;"	t
bitswap_type	.\lib\FastLED\bitswap.h	/^} bitswap_type;$/;"	t	typeref:union:__anon22
blend	.\lib\FastLED\colorutils.cpp	/^CHSV blend( const CHSV& p1, const CHSV& p2, fract8 amountOfP2, TGradientDirectionCode directionCode )$/;"	f
blend	.\lib\FastLED\colorutils.cpp	/^CHSV* blend( const CHSV* src1, const CHSV* src2, CHSV* dest, uint16_t count, fract8 amountOfsrc2, TGradientDirectionCode directionCode )$/;"	f
blend	.\lib\FastLED\colorutils.cpp	/^CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )$/;"	f
blend	.\lib\FastLED\colorutils.cpp	/^CRGB* blend( const CRGB* src1, const CRGB* src2, CRGB* dest, uint16_t count, fract8 amountOfsrc2 )$/;"	f
blend8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC uint8_t blend8( uint8_t a, uint8_t b, uint8_t amountOfB)$/;"	f
blue	.\lib\FastLED\pixeltypes.h	/^                uint8_t blue;$/;"	m	union:CRGB::__anon40::__anon41::__anon44
blur1d	.\lib\FastLED\colorutils.cpp	/^void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)$/;"	f
blur1d	.\lib\FastLED\pixelset.h	/^  inline CPixelView & blur1d(fract8 blur_amount) {$/;"	f	class:CPixelView
blur2d	.\lib\FastLED\colorutils.cpp	/^void blur2d( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)$/;"	f
blurColumns	.\lib\FastLED\colorutils.cpp	/^void blurColumns(CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)$/;"	f
blurRows	.\lib\FastLED\colorutils.cpp	/^void blurRows( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)$/;"	f
bool	.\lib\avr-stl\include\stl_config.h	/^    typedef int bool;$/;"	t
boolean	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	/^typedef uint8_t boolean;$/;"	t
boolean	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	/^typedef bool boolean;$/;"	t
boolean	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	/^typedef uint8_t boolean;$/;"	t
brighten8_lin	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint8_t brighten8_lin( uint8_t x )$/;"	f
brighten8_raw	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint8_t brighten8_raw( uint8_t x)$/;"	f
brighten8_video	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint8_t brighten8_video( uint8_t x)$/;"	f
brightness	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    brightness,$/;"	m	class:Adafruit_NeoPixel
bseconds16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t bseconds16()$/;"	f
bucket_count	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_map
bucket_count	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_multimap
bucket_count	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_multiset
bucket_count	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_set
bucket_count	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type bucket_count() const { return _M_buckets.size(); }$/;"	f	class:hashtable
buffer	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^static uint8_t buffer[128 * 64 \/ 8] = {$/;"	v	file:
buffer	.\lib\MPU6050\MPU6050.h	/^        uint8_t buffer[14];$/;"	m	class:MPU6050
bytes	.\lib\FastLED\bitswap.h	/^  uint8_t bytes[8];$/;"	m	union:__anon22
bytes	.\lib\FastLED\colorutils.h	/^    uint8_t  bytes[4];$/;"	m	union:__anon27
bytes	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		uint8_t bytes[12];$/;"	m	union:InlineBlockClocklessController::__anon46
bytes	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		uint8_t bytes[16];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon47
bytes	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^    uint8_t bytes[8];$/;"	m	union:COctoWS2811Controller::__anon48
bytes	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		uint8_t bytes[12];$/;"	m	union:InlineBlockClocklessController::__anon49
bytes	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		uint8_t bytes[16];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon50
bytes	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^  uint8_t bytes[8];$/;"	m	union:__anon52
bytes	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^	uint8_t bytes[8];$/;"	m	union:InlineBlockClocklessController::__anon53
bytes	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^		uint8_t bytes[8];$/;"	m	union:InlineBlockClocklessController::__anon54
c	.\lib\avr-stl\include\stl_queue.h	/^  _Sequence c;$/;"	m	class:priority_queue
c	.\lib\avr-stl\include\stl_queue.h	/^  _Sequence c;$/;"	m	class:queue
c	.\lib\avr-stl\include\stl_stack.h	/^  _Sequence c;$/;"	m	class:stack
c0	.\lib\FastLED\bitswap.h	/^  uint32_t c0:1;$/;"	m	struct:__anon21
c1	.\lib\FastLED\bitswap.h	/^  uint32_t c1:1;$/;"	m	struct:__anon21
c2	.\lib\FastLED\bitswap.h	/^  uint32_t c2:1;$/;"	m	struct:__anon21
c3	.\lib\FastLED\bitswap.h	/^  uint32_t c3:1;$/;"	m	struct:__anon21
c4	.\lib\FastLED\bitswap.h	/^  uint32_t c4:1;$/;"	m	struct:__anon21
c5	.\lib\FastLED\bitswap.h	/^  uint32_t c5:1;$/;"	m	struct:__anon21
c6	.\lib\FastLED\bitswap.h	/^  uint32_t c6:1;$/;"	m	struct:__anon21
c7	.\lib\FastLED\bitswap.h	/^  uint32_t c7:1;$/;"	m	struct:__anon21
calculate_max_brightness_for_power_mW	.\lib\FastLED\power_mgt.cpp	/^uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)$/;"	f
calculate_max_brightness_for_power_mW	.\lib\FastLED\power_mgt.cpp	/^uint8_t calculate_max_brightness_for_power_mW(const CRGB* ledbuffer, uint16_t numLeds, uint8_t target_brightness, uint32_t max_power_mW) {$/;"	f
calculate_max_brightness_for_power_vmA	.\lib\FastLED\power_mgt.cpp	/^uint8_t calculate_max_brightness_for_power_vmA(const CRGB* ledbuffer, uint16_t numLeds, uint8_t target_brightness, uint32_t max_power_V, uint32_t max_power_mA) {$/;"	f
calculate_unscaled_power_mW	.\lib\FastLED\power_mgt.cpp	/^uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) \/\/25354$/;"	f
canShow	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    canShow(void) { return (micros() - endTime) >= 300L; }$/;"	f	class:Adafruit_NeoPixel
capacity	.\lib\avr-stl\include\stl_bvector.h	/^  size_type capacity() const {$/;"	f	class:__BVECTOR
capacity	.\lib\avr-stl\include\stl_vector.h	/^  size_type capacity() const$/;"	f	class:vector
cbegin	.\lib\FastLED\pixelset.h	/^  const_iterator cbegin() const { return const_iterator(leds, dir); }$/;"	f	class:CPixelView
cbi	.\lib\I2Cdev\I2Cdev.h	262;"	d
cend	.\lib\FastLED\pixelset.h	/^  const_iterator cend() const { return const_iterator(end_pos, dir); }$/;"	f	class:CPixelView
char_traits	.\lib\avr-stl\include\char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<char> $/;"	c
char_traits	.\lib\avr-stl\include\char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<wchar_t>$/;"	c
char_traits	.\lib\avr-stl\include\char_traits.h	/^template <class _CharT> class char_traits$/;"	c
char_traits_off_type	.\lib\avr-stl\include\char_traits.h	/^  typedef signed int char_traits_off_type;$/;"	t	class:__char_traits_base
char_type	.\lib\avr-stl\include\char_traits.h	/^  typedef _CharT char_type;$/;"	t	class:__char_traits_base
char_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:istreambuf_iterator
char_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:ostreambuf_iterator
char_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:istream_iterator
char_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:ostream_iterator
cleanup_R1	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE void cleanup_R1()$/;"	f
clear	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::clear() {$/;"	f	class:Adafruit_NeoPixel
clear	.\lib\FastLED\FastLED.cpp	/^void CFastLED::clear(bool writeData) {$/;"	f	class:CFastLED
clear	.\lib\RunningMedian\RunningMedian.cpp	/^void RunningMedian::clear()$/;"	f	class:RunningMedian
clear	.\lib\avr-stl\include\stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:__BVECTOR
clear	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::clear()$/;"	f	class:deque
clear	.\lib\avr-stl\include\stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_map
clear	.\lib\avr-stl\include\stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_multimap
clear	.\lib\avr-stl\include\stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_multiset
clear	.\lib\avr-stl\include\stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_set
clear	.\lib\avr-stl\include\stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::clear()$/;"	f	class:hashtable
clear	.\lib\avr-stl\include\stl_list.h	/^  void clear() { _Base::clear(); }$/;"	f	class:list
clear	.\lib\avr-stl\include\stl_list.h	/^_List_base<_Tp,_Alloc>::clear() $/;"	f	class:_List_base
clear	.\lib\avr-stl\include\stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:map
clear	.\lib\avr-stl\include\stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:multimap
clear	.\lib\avr-stl\include\stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:multiset
clear	.\lib\avr-stl\include\stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:set
clear	.\lib\avr-stl\include\stl_slist.h	/^  void clear() { this->_M_erase_after(&this->_M_head, 0); }$/;"	f	class:slist
clear	.\lib\avr-stl\include\stl_tree.h	/^  void clear() {$/;"	f	class:_Rb_tree
clear	.\lib\avr-stl\include\stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:vector
clear	.\src\LightEffects.cpp	/^void LightEffects::clear() {$/;"	f	class:LightEffects
clearArea	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::clearArea(uint8_t x, uint8_t y, uint8_t w, uint8_t h)$/;"	f	class:GOFi2cOLED
clearData	.\lib\FastLED\FastLED.cpp	/^void CFastLED::clearData() {$/;"	f	class:CFastLED
clearDisplay	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::clearDisplay()$/;"	f	class:GOFi2cOLED
clearLedData	.\lib\FastLED\controller.h	/^    void clearLedData() {$/;"	f	class:CLEDController
clearLeds	.\lib\FastLED\controller.h	/^	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }$/;"	f	class:CLEDController
cli	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	22;"	d
cli	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	43;"	d
cli	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	35;"	d
cli	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	26;"	d
clock_ptr_t	.\lib\FastLED\fastspi_bitbang.h	/^	typedef typename FastPin<CLOCK_PIN>::port_ptr_t clock_ptr_t;$/;"	t	class:AVRSoftwareSPIOutput
clock_t	.\lib\FastLED\fastspi_bitbang.h	/^	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;$/;"	t	class:AVRSoftwareSPIOutput
comp	.\lib\avr-stl\include\stl_map.h	/^    _Compare comp;$/;"	m	class:map::value_compare
comp	.\lib\avr-stl\include\stl_multimap.h	/^    _Compare comp;$/;"	m	class:multimap::value_compare
comp	.\lib\avr-stl\include\stl_queue.h	/^  _Compare comp;$/;"	m	class:priority_queue
compare	.\lib\avr-stl\include\char_traits.h	/^  static int compare(const _CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base
compare	.\lib\avr-stl\include\char_traits.h	/^  static int compare(const char* __s1, const char* __s2, size_t __n) $/;"	f	class:char_traits
compose1	.\lib\avr-stl\include\stl_function.h	/^compose1(const _Operation1& __fn1, const _Operation2& __fn2)$/;"	f
compose2	.\lib\avr-stl\include\stl_function.h	/^compose2(const _Operation1& __fn1, const _Operation2& __fn2, $/;"	f
computeAdjustment	.\lib\FastLED\controller.h	/^    static CRGB computeAdjustment(uint8_t scale, const CRGB & colorCorrection, const CRGB & colorTemperature) {$/;"	f	class:CLEDController
const_iterator	.\lib\FastLED\pixelset.h	/^  typedef pixelset_iterator_base<const PIXEL_TYPE> const_iterator;$/;"	t	class:CPixelView
const_iterator	.\lib\avr-stl\include\container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(const_iterator);$/;"	v
const_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_const_iterator          const_iterator;$/;"	t	class:__BVECTOR
const_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:_Bit_const_iterator
const_iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:_Deque_iterator
const_iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Deque_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:_Deque_base
const_iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Base::const_iterator const_iterator;$/;"	t	class:deque
const_iterator	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_map
const_iterator	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_multimap
const_iterator	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_multiset
const_iterator	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_set
const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^          const_iterator;$/;"	t	class:hashtable
const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^          const_iterator;$/;"	t	struct:_Hashtable_const_iterator
const_iterator	.\lib\avr-stl\include\stl_hashtable.h	/^          const_iterator;$/;"	t	struct:_Hashtable_iterator
const_iterator	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:list
const_iterator	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	struct:_List_iterator
const_iterator	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:map
const_iterator	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::const_iterator const_iterator; $/;"	t	class:multimap
const_iterator	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:multiset
const_iterator	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:set
const_iterator	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:slist
const_iterator	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:_Slist_iterator
const_iterator	.\lib\avr-stl\include\stl_tree.h	/^          const_iterator;$/;"	t	class:_Rb_tree
const_iterator	.\lib\avr-stl\include\stl_tree.h	/^    const_iterator;$/;"	t	struct:_Rb_tree_iterator
const_iterator	.\lib\avr-stl\include\stl_vector.h	/^  typedef const value_type* const_iterator;$/;"	t	class:vector
const_mem_fun1_ref_t	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_ref_t
const_mem_fun1_ref_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c
const_mem_fun1_ref_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c
const_mem_fun1_t	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_t
const_mem_fun1_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {$/;"	c
const_mem_fun1_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun1_t<void, _Tp, _Arg> $/;"	c
const_mem_fun_ref_t	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_ref_t
const_mem_fun_ref_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c
const_mem_fun_ref_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c
const_mem_fun_t	.\lib\avr-stl\include\stl_function.h	/^  explicit const_mem_fun_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_t
const_mem_fun_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {$/;"	c
const_mem_fun_t	.\lib\avr-stl\include\stl_function.h	/^class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {$/;"	c
const_pointer	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(const_pointer);$/;"	v
const_pointer	.\lib\avr-stl\include\stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	class:allocator
const_pointer	.\lib\avr-stl\include\stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	struct:__allocator
const_pointer	.\lib\avr-stl\include\stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:allocator
const_pointer	.\lib\avr-stl\include\stl_bvector.h	/^  typedef const bool* const_pointer;$/;"	t	class:__BVECTOR
const_pointer	.\lib\avr-stl\include\stl_deque.h	/^  typedef const value_type* const_pointer;$/;"	t	class:deque
const_pointer	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_map
const_pointer	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_multimap
const_pointer	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_multiset
const_pointer	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_set
const_pointer	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef const value_type* const_pointer;$/;"	t	class:hashtable
const_pointer	.\lib\avr-stl\include\stl_list.h	/^  typedef const value_type* const_pointer;$/;"	t	class:list
const_pointer	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:map
const_pointer	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:multimap
const_pointer	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:multiset
const_pointer	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:set
const_pointer	.\lib\avr-stl\include\stl_slist.h	/^  typedef const value_type* const_pointer;$/;"	t	class:slist
const_pointer	.\lib\avr-stl\include\stl_tree.h	/^  typedef const value_type* const_pointer;$/;"	t	class:_Rb_tree
const_pointer	.\lib\avr-stl\include\stl_vector.h	/^  typedef const value_type* const_pointer;$/;"	t	class:vector
const_reference	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(const_reference);$/;"	v
const_reference	.\lib\avr-stl\include\stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	class:allocator
const_reference	.\lib\avr-stl\include\stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	struct:__allocator
const_reference	.\lib\avr-stl\include\stl_bvector.h	/^  typedef bool                 const_reference;$/;"	t	struct:_Bit_const_iterator
const_reference	.\lib\avr-stl\include\stl_bvector.h	/^  typedef bool const_reference;$/;"	t	class:__BVECTOR
const_reference	.\lib\avr-stl\include\stl_deque.h	/^  typedef const value_type& const_reference;$/;"	t	class:deque
const_reference	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_map
const_reference	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_multimap
const_reference	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_multiset
const_reference	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_set
const_reference	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef const value_type& const_reference;$/;"	t	class:hashtable
const_reference	.\lib\avr-stl\include\stl_list.h	/^  typedef const value_type& const_reference;$/;"	t	class:list
const_reference	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:map
const_reference	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:multimap
const_reference	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:multiset
const_reference	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:priority_queue
const_reference	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:queue
const_reference	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:set
const_reference	.\lib\avr-stl\include\stl_slist.h	/^  typedef const value_type& const_reference;$/;"	t	class:slist
const_reference	.\lib\avr-stl\include\stl_stack.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:stack
const_reference	.\lib\avr-stl\include\stl_tree.h	/^  typedef const value_type& const_reference;$/;"	t	class:_Rb_tree
const_reference	.\lib\avr-stl\include\stl_vector.h	/^  typedef const value_type& const_reference;$/;"	t	class:vector
const_reverse_iterator	.\lib\avr-stl\include\container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(const_reverse_iterator);$/;"	v
const_reverse_iterator	.\lib\avr-stl\include\stl_bvector.h	/^                           difference_type> const_reverse_iterator;$/;"	t	class:__BVECTOR
const_reverse_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:__BVECTOR
const_reverse_iterator	.\lib\avr-stl\include\stl_deque.h	/^          const_reverse_iterator;$/;"	t	class:deque
const_reverse_iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:deque
const_reverse_iterator	.\lib\avr-stl\include\stl_list.h	/^          const_reverse_iterator;$/;"	t	class:list
const_reverse_iterator	.\lib\avr-stl\include\stl_list.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:list
const_reverse_iterator	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:map
const_reverse_iterator	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:multimap
const_reverse_iterator	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:multiset
const_reverse_iterator	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:set
const_reverse_iterator	.\lib\avr-stl\include\stl_tree.h	/^          const_reverse_iterator;$/;"	t	class:_Rb_tree
const_reverse_iterator	.\lib\avr-stl\include\stl_tree.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:_Rb_tree
const_reverse_iterator	.\lib\avr-stl\include\stl_vector.h	/^                           difference_type>  const_reverse_iterator;$/;"	t	class:vector
const_reverse_iterator	.\lib\avr-stl\include\stl_vector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:vector
constant0	.\lib\avr-stl\include\stl_function.h	/^inline constant_void_fun<_Result> constant0(const _Result& __val)$/;"	f
constant1	.\lib\avr-stl\include\stl_function.h	/^inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val)$/;"	f
constant2	.\lib\avr-stl\include\stl_function.h	/^constant2(const _Result& __val)$/;"	f
constant_binary_fun	.\lib\avr-stl\include\stl_function.h	/^  constant_binary_fun(const _Result& __v)$/;"	f	struct:constant_binary_fun
constant_binary_fun	.\lib\avr-stl\include\stl_function.h	/^struct constant_binary_fun$/;"	s
constant_unary_fun	.\lib\avr-stl\include\stl_function.h	/^  constant_unary_fun(const _Result& __v)$/;"	f	struct:constant_unary_fun
constant_unary_fun	.\lib\avr-stl\include\stl_function.h	/^struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>$/;"	s
constant_void_fun	.\lib\avr-stl\include\stl_function.h	/^  constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}$/;"	f	struct:constant_void_fun
constant_void_fun	.\lib\avr-stl\include\stl_function.h	/^struct constant_void_fun : public _Constant_void_fun<_Result> {$/;"	s
constexpr	.\lib\FastLED\cpp_compat.h	9;"	d
construct	.\lib\avr-stl\include\stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:allocator
construct	.\lib\avr-stl\include\stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f
construct	.\lib\avr-stl\include\stl_construct.h	/^inline void construct(_T1* __p) {$/;"	f
construct	.\lib\avr-stl\include\stl_construct.h	/^inline void construct(_T1* __p, const _T2& __value) {$/;"	f
constructor	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::constructor(uint8_t w, uint8_t h) {$/;"	f	class:GOFi2cOLED
container	.\lib\avr-stl\include\stl_hash_map.h	/^  _Container* container;$/;"	m	class:insert_iterator
container	.\lib\avr-stl\include\stl_hash_set.h	/^  _Container* container;$/;"	m	class:insert_iterator
container	.\lib\avr-stl\include\stl_iterator.h	/^  _Container* container;$/;"	m	class:back_insert_iterator
container	.\lib\avr-stl\include\stl_iterator.h	/^  _Container* container;$/;"	m	class:front_insert_iterator
container	.\lib\avr-stl\include\stl_iterator.h	/^  _Container* container;$/;"	m	class:insert_iterator
container	.\lib\avr-stl\include\stl_slist.h	/^  _Container* container;$/;"	m	class:insert_iterator
container_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator
container_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator
container_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:back_insert_iterator
container_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:front_insert_iterator
container_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator
container_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:priority_queue
container_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:queue
container_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator
container_type	.\lib\avr-stl\include\stl_stack.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:stack
convert	.\src\iSin.h	/^int iSin::convert(long x)$/;"	f	class:iSin
copy	.\lib\avr-stl\include\char_traits.h	/^  static _CharT* copy(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base
copy	.\lib\avr-stl\include\stl_algobase.h	/^  static _BidirectionalIter2 copy(_BidirectionalIter1 __first, $/;"	f	struct:__copy_backward_dispatch
copy	.\lib\avr-stl\include\stl_algobase.h	/^  static _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	struct:__copy_dispatch
copy	.\lib\avr-stl\include\stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:__copy_backward_dispatch
copy	.\lib\avr-stl\include\stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:__copy_dispatch
copy	.\lib\avr-stl\include\stl_algobase.h	/^inline _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f
copy_backward	.\lib\avr-stl\include\stl_algobase.h	/^inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) {$/;"	f
copy_n	.\lib\avr-stl\include\stl_algobase.h	/^copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f
cos16	.\lib\FastLED\lib8tion\trig8.h	/^LIB8STATIC int16_t cos16( uint16_t theta)$/;"	f
cos8	.\lib\FastLED\lib8tion\trig8.h	/^LIB8STATIC uint8_t cos8( uint8_t theta)$/;"	f
count	.\lib\FastLED\FastLED.cpp	/^int CFastLED::count() {$/;"	f	class:CFastLED
count	.\lib\avr-stl\include\stl_algo.h	/^count(_InputIter __first, _InputIter __last, const _Tp& __value) {$/;"	f
count	.\lib\avr-stl\include\stl_algo.h	/^void count(_InputIter __first, _InputIter __last, const _Tp& __value,$/;"	f
count	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_map
count	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_multimap
count	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_multiset
count	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_set
count	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type count(const key_type& __key) const$/;"	f	class:hashtable
count	.\lib\avr-stl\include\stl_map.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:map
count	.\lib\avr-stl\include\stl_multimap.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:multimap
count	.\lib\avr-stl\include\stl_multiset.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:multiset
count	.\lib\avr-stl\include\stl_set.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:set
count	.\lib\avr-stl\include\stl_tree.h	/^  ::count(const _Key& __k) const$/;"	f	class:_Rb_tree
countFPS	.\lib\FastLED\FastLED.cpp	/^void CFastLED::countFPS(int nFrames) {$/;"	f	class:CFastLED
count_if	.\lib\avr-stl\include\stl_algo.h	/^count_if(_InputIter __first, _InputIter __last, _Predicate __pred) {$/;"	f
count_if	.\lib\avr-stl\include\stl_algo.h	/^void count_if(_InputIter __first, _InputIter __last, _Predicate __pred,$/;"	f
cport	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static port_ptr_t cport() __attribute__ ((always_inline)) { if (PIN<OUTPUT_PIN_LIMIT) {return &_GPB0._GPOC; }}$/;"	f	class:_ESPPIN
cport	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^	inline static port_ptr_t cport() __attribute__ ((always_inline)) { return &_GPB._GPOC; }$/;"	f	class:_ESPPIN
create	.\src\Entity.h	/^void Entity::create(int position, CRGB::HTMLColorCode color)  {$/;"	f	class:Entity
cubicwave8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t cubicwave8(uint8_t in)$/;"	f
current	.\lib\avr-stl\include\stl_iterator.h	/^  _BidirectionalIterator current;$/;"	m	class:reverse_bidirectional_iterator
current	.\lib\avr-stl\include\stl_iterator.h	/^  _Iterator current;$/;"	m	class:reverse_iterator
current	.\lib\avr-stl\include\stl_iterator.h	/^  _RandomAccessIterator current;$/;"	m	class:reverse_iterator
cursor_x	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  cursor_x, cursor_y;$/;"	m	class:GOFi2cOLED
cursor_y	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  cursor_x, cursor_y;$/;"	m	class:GOFi2cOLED
d	.\lib\FastLED\controller.h	/^        uint8_t d[3];$/;"	m	struct:PixelController
d	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^  uint8_t d[3];$/;"	m	struct:M0ClocklessData
d0	.\lib\FastLED\bitswap.h	/^  uint32_t d0:1;$/;"	m	struct:__anon21
d1	.\lib\FastLED\bitswap.h	/^  uint32_t d1:1;$/;"	m	struct:__anon21
d2	.\lib\FastLED\bitswap.h	/^  uint32_t d2:1;$/;"	m	struct:__anon21
d3	.\lib\FastLED\bitswap.h	/^  uint32_t d3:1;$/;"	m	struct:__anon21
d4	.\lib\FastLED\bitswap.h	/^  uint32_t d4:1;$/;"	m	struct:__anon21
d5	.\lib\FastLED\bitswap.h	/^  uint32_t d5:1;$/;"	m	struct:__anon21
d6	.\lib\FastLED\bitswap.h	/^  uint32_t d6:1;$/;"	m	struct:__anon21
d7	.\lib\FastLED\bitswap.h	/^  uint32_t d7:1;$/;"	m	struct:__anon21
data	.\lib\I2Cdev\I2Cdev.cpp	/^        uint8_t* data;$/;"	m	struct:__anon55	file:
data_ptr_t	.\lib\FastLED\fastspi_bitbang.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:AVRSoftwareSPIOutput
data_ptr_t	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:SixteenWayInlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:SixteenWayInlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_ptr_t	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController
data_ptr_t	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\fastspi_bitbang.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:AVRSoftwareSPIOutput
data_t	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController
data_t	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_t data_t;$/;"	t	class:SixteenWayInlineBlockClocklessController
data_t	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController
data_t	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_t data_t;$/;"	t	class:SixteenWayInlineBlockClocklessController
data_t	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController
data_t	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController
data_t	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_t	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController
data_t	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController
data_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:hash_map
data_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:hash_multimap
data_type	.\lib\avr-stl\include\stl_map.h	/^  typedef _Tp                   data_type;$/;"	t	class:map
data_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef _Tp                   data_type;$/;"	t	class:multimap
deactivateScroll	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::deactivateScroll()$/;"	f	class:GOFi2cOLED
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^    static void deallocate(_Tp* __p)$/;"	f	class:simple_alloc
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^    static void deallocate(_Tp* __p, size_t __n)$/;"	f	class:simple_alloc
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void deallocate(void* __p, size_t \/* __n *\/)$/;"	f	class:__malloc_alloc_template
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:__default_alloc_template
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:debug_alloc
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:allocator
deallocate	.\lib\avr-stl\include\stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f
debug_alloc	.\lib\avr-stl\include\stl_alloc.h	/^class debug_alloc {$/;"	c
delay	.\lib\FastLED\FastLED.cpp	/^void CFastLED::delay(unsigned long ms) {$/;"	f	class:CFastLED
delay_at_max_brightness_for_power	.\lib\FastLED\power_mgt.cpp	/^void delay_at_max_brightness_for_power( uint16_t ms)$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-10>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-5>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-6>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-7>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-8>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-9>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<0>() {}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<5>() {FL_NOP2;FL_NOP2;FL_NOP;}$/;"	f
delaycycles	.\lib\FastLED\fastled_delay.h	/^template<int CYCLES> __attribute__((always_inline)) inline void delaycycles() {$/;"	f
delaycycles_min1	.\lib\FastLED\fastled_delay.h	/^template<int CYCLES> inline void delaycycles_min1() {$/;"	f
deque	.\lib\avr-stl\include\stl_deque.h	/^  deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^  deque(const deque& __x) : _Base(__x.get_allocator(), __x.size()) $/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^  deque(const value_type* __first, const value_type* __last,$/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^  deque(const_iterator __first, const_iterator __last,$/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^  deque(size_type __n, const value_type& __value,$/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^  explicit deque(const allocator_type& __a = allocator_type()) $/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^  explicit deque(size_type __n) : _Base(allocator_type(), __n)$/;"	f	class:deque
deque	.\lib\avr-stl\include\stl_deque.h	/^class deque : protected _Deque_base<_Tp, _Alloc> {$/;"	c
description	.\lib\FastLED\library.json	/^    "description": "FastLED is a library for programming addressable rgb led strips (APA102\/Dotstar, WS2812\/Neopixel, LPD8806, and a dozen others) acting both as a driver and as a library for color management and fast math.",$/;"	f
description	.\lib\I2Cdev\library.json	/^  "description": "The I2C Device Library (I2Cdevlib) is a collection of uniform and well-documented classes to provide simple and intuitive interfaces to I2C devices.",$/;"	f
description	.\lib\RunningMedian\library.json	/^  "description": "The library stores the last N individual values in a buffer to select the median. It filters outliers.",$/;"	f
destroy	.\lib\avr-stl\include\stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:allocator
destroy	.\lib\avr-stl\include\stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f
destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f
destroy	.\lib\avr-stl\include\stl_construct.h	/^inline void destroy(_Tp* __pointer) {$/;"	f
destroy_node	.\lib\avr-stl\include\stl_tree.h	/^  void destroy_node(_Link_type __p)$/;"	f	class:_Rb_tree
devAddr	.\lib\MPU6050\MPU6050.h	/^        uint8_t devAddr;$/;"	m	class:MPU6050
difference_type	.\lib\avr-stl\include\concept_checks.h	/^          difference_type;$/;"	t	struct:__difference_type_type_definition_requirement_violation
difference_type	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(difference_type);$/;"	v
difference_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:allocator
difference_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:allocator
difference_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:__allocator
difference_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef ptrdiff_t difference_type; $/;"	t	class:__BVECTOR
difference_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:deque
difference_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Deque_iterator
difference_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_map
difference_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_multimap
difference_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator
difference_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_multiset
difference_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_set
difference_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator
difference_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:hashtable
difference_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Hashtable_const_iterator
difference_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Hashtable_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^          difference_type;$/;"	t	class:reverse_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Dist                          difference_type;$/;"	t	class:istream_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Dist               difference_type;$/;"	t	class:istream_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:reverse_bidirectional_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:reverse_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                           difference_type;$/;"	t	class:ostream_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:back_insert_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:front_insert_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator
difference_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:ostream_iterator
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:bidirectional_iterator
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:random_access_iterator
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Distance            difference_type;$/;"	t	struct:forward_iterator
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Distance          difference_type;$/;"	t	struct:input_iterator
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Distance  difference_type;$/;"	t	struct:iterator
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef ptrdiff_t                   difference_type;$/;"	t	struct:iterator_traits
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:iterator_traits
difference_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef void                difference_type;$/;"	t	struct:output_iterator
difference_type	.\lib\avr-stl\include\stl_list.h	/^  typedef ptrdiff_t                  difference_type;$/;"	t	struct:_List_iterator_base
difference_type	.\lib\avr-stl\include\stl_list.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:list
difference_type	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:map
difference_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:multimap
difference_type	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:multiset
difference_type	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  typedef void                difference_type;$/;"	t	class:raw_storage_iterator
difference_type	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:set
difference_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef ptrdiff_t            difference_type;$/;"	t	struct:_Slist_iterator_base
difference_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:slist
difference_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator
difference_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:_Rb_tree
difference_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Rb_tree_base_iterator
difference_type	.\lib\avr-stl\include\stl_vector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:vector
dim8_lin	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint8_t dim8_lin( uint8_t x )$/;"	f
dim8_raw	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint8_t dim8_raw( uint8_t x)$/;"	f
dim8_video	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint8_t dim8_video( uint8_t x)$/;"	f
dir	.\lib\FastLED\pixelset.h	/^    const int8_t dir;$/;"	m	class:CPixelView::pixelset_iterator_base
dir	.\lib\FastLED\pixelset.h	/^  const int8_t  dir;$/;"	m	class:CPixelView
disableConfig	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void disableConfig() { m_SPI->SPI_WPMR |= SPI_WPMR_WPEN; }$/;"	f	class:SAMHardwareSPIOutput
disableSPI	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void disableSPI() { m_SPI->SPI_CR = SPI_CR_SPIDIS; }$/;"	f	class:SAMHardwareSPIOutput
disable_pins	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	inline void disable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
disable_pins	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	inline void disable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
disable_pins	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void disable_pins() { }$/;"	f	class:AVRUSART0SPIOutput
disable_pins	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void disable_pins() { }$/;"	f	class:AVRUSART1SPIOutput
disable_pins	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void disable_pins() {$/;"	f	class:AVRHardwareSPIOutput
display	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::display(void) {$/;"	f	class:GOFi2cOLED
distance	.\lib\avr-stl\include\stl_iterator_base.h	/^distance(_InputIterator __first, _InputIterator __last) {$/;"	f
distance	.\lib\avr-stl\include\stl_iterator_base.h	/^inline void distance(_InputIterator __first, $/;"	f
distance_type	.\lib\avr-stl\include\stl_deque.h	/^inline ptrdiff_t* distance_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) {$/;"	f
distance_type	.\lib\avr-stl\include\stl_hashtable.h	/^distance_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_hashtable.h	/^distance_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator.h	/^distance_type(const istream_iterator<_Tp, _Dist>&) { return (_Dist*)0; }$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator.h	/^distance_type(const reverse_bidirectional_iterator<_BidirectionalIterator, $/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator.h	/^distance_type(const reverse_iterator<_RandomAccessIterator, $/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^distance_type(const _Iter& __i) { return __distance_type(__i); }$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^distance_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^distance_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Distance* distance_type(const forward_iterator<_Tp, _Distance>&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Distance* distance_type(const input_iterator<_Tp, _Distance>&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline ptrdiff_t* distance_type(const _Tp*) { return (ptrdiff_t*)(0); }$/;"	f
distance_type	.\lib\avr-stl\include\stl_list.h	/^distance_type(const _List_iterator_base&)$/;"	f
distance_type	.\lib\avr-stl\include\stl_slist.h	/^inline ptrdiff_t* distance_type(const _Slist_iterator_base&) {$/;"	f
distance_type	.\lib\avr-stl\include\stl_tree.h	/^distance_type(const _Rb_tree_base_iterator&) {$/;"	f
dither	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }$/;"	f	struct:PixelController
dither	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }$/;"	f	struct:PixelController
div1024_32_16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t div1024_32_16( uint32_t in32)$/;"	f
divides	.\lib\avr-stl\include\stl_function.h	/^struct divides : public binary_function<_Tp,_Tp,_Tp> {$/;"	s
dmpGetAccel	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetAccel	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetAccel(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetAccel	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetAccel(int32_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetAccel	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetAccel	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetAccel(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetAccel	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetAccel(int32_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetEuler	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetEuler(float *data, Quaternion *q) {$/;"	f	class:MPU6050
dmpGetEuler	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetEuler(float *data, Quaternion *q) {$/;"	f	class:MPU6050
dmpGetFIFOPacketSize	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint16_t MPU6050::dmpGetFIFOPacketSize() {$/;"	f	class:MPU6050
dmpGetFIFOPacketSize	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint16_t MPU6050::dmpGetFIFOPacketSize() {$/;"	f	class:MPU6050
dmpGetGravity	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {$/;"	f	class:MPU6050
dmpGetGravity	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {$/;"	f	class:MPU6050
dmpGetGyro	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetGyro(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetGyro	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetGyro(int32_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetGyro	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetGyro(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetGyro	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetGyro(int32_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetLinearAccel	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {$/;"	f	class:MPU6050
dmpGetLinearAccel	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {$/;"	f	class:MPU6050
dmpGetLinearAccelInWorld	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {$/;"	f	class:MPU6050
dmpGetLinearAccelInWorld	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {$/;"	f	class:MPU6050
dmpGetMag	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetMag(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetQuaternion	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetQuaternion	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetQuaternion	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetQuaternion(int32_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetQuaternion	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetQuaternion	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetQuaternion	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetQuaternion(int32_t *data, const uint8_t* packet) {$/;"	f	class:MPU6050
dmpGetYawPitchRoll	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {$/;"	f	class:MPU6050
dmpGetYawPitchRoll	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {$/;"	f	class:MPU6050
dmpInitialize	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpInitialize() {$/;"	f	class:MPU6050
dmpInitialize	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpInitialize() {$/;"	f	class:MPU6050
dmpPacketAvailable	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^bool MPU6050::dmpPacketAvailable() {$/;"	f	class:MPU6050
dmpPacketAvailable	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^bool MPU6050::dmpPacketAvailable() {$/;"	f	class:MPU6050
dmpPacketBuffer	.\lib\MPU6050\MPU6050.h	/^            uint8_t *dmpPacketBuffer;$/;"	m	class:MPU6050
dmpPacketSize	.\lib\MPU6050\MPU6050.h	/^            uint16_t dmpPacketSize;$/;"	m	class:MPU6050
dmpProcessFIFOPacket	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpProcessFIFOPacket(const unsigned char *dmpData) {$/;"	f	class:MPU6050
dmpProcessFIFOPacket	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpProcessFIFOPacket(const unsigned char *dmpData) {$/;"	f	class:MPU6050
dmpReadAndProcessFIFOPacket	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^uint8_t MPU6050::dmpReadAndProcessFIFOPacket(uint8_t numPackets, uint8_t *processed) {$/;"	f	class:MPU6050
dmpReadAndProcessFIFOPacket	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^uint8_t MPU6050::dmpReadAndProcessFIFOPacket(uint8_t numPackets, uint8_t *processed) {$/;"	f	class:MPU6050
drawBitmap	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawBitmap(uint8_t x, uint8_t y, $/;"	f	class:GOFi2cOLED
drawChar	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawChar(int8_t x, int8_t y, unsigned char c, int8_t color, int8_t bg, uint8_t size) {$/;"	f	class:GOFi2cOLED
drawCircle	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawCircle(uint8_t x0, uint8_t y0, uint8_t r, $/;"	f	class:GOFi2cOLED
drawCircleHelper	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawCircleHelper( uint8_t x0, uint8_t y0,$/;"	f	class:GOFi2cOLED
drawFastHLine	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawFastHLine(uint8_t x, uint8_t y, $/;"	f	class:GOFi2cOLED
drawFastVLine	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawFastVLine(uint8_t x, uint8_t y, $/;"	f	class:GOFi2cOLED
drawLine	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawLine(uint8_t x0, uint8_t y0, $/;"	f	class:GOFi2cOLED
drawPixel	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawPixel(uint8_t x, uint8_t y, uint8_t color) {$/;"	f	class:GOFi2cOLED
drawRect	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawRect(uint8_t x, uint8_t y, $/;"	f	class:GOFi2cOLED
drawRoundRect	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, uint8_t color) {$/;"	f	class:GOFi2cOLED
drawTriangle	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::drawTriangle(uint8_t x0, uint8_t y0,$/;"	f	class:GOFi2cOLED
drawbuffer	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:COctoWS2811Controller
drawbuffer	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:CWS2812SerialController
dump	.\lib\FastLED\pixelset.h	/^  void dump() const {$/;"	f	class:CPixelView
dword	.\lib\FastLED\colorutils.h	/^    uint32_t dword;$/;"	m	union:__anon27
e	.\lib\FastLED\controller.h	/^        uint8_t e[3];$/;"	m	struct:PixelController
e	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^  uint8_t e[3];$/;"	m	struct:M0ClocklessData
ease8InOutApprox	.\lib\FastLED\lib8tion.h	/^LIB8STATIC fract8 ease8InOutApprox( fract8 i)$/;"	f
ease8InOutApprox	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t ease8InOutApprox( fract8 i)$/;"	f
ease8InOutCubic	.\lib\FastLED\lib8tion.h	/^LIB8STATIC fract8 ease8InOutCubic( fract8 i)$/;"	f
ease8InOutQuad	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)$/;"	f
ease8InOutQuad	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t ease8InOutQuad(uint8_t val) {$/;"	f
elems_in_bucket	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_map
elems_in_bucket	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_multimap
elems_in_bucket	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_multiset
elems_in_bucket	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_set
elems_in_bucket	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type elems_in_bucket(size_type __bucket) const$/;"	f	class:hashtable
email	.\lib\RunningMedian\library.json	/^      "email": "Rob.Tillaart@gmail.com",$/;"	f
empty	.\lib\avr-stl\include\stl_bvector.h	/^  bool empty() const { return begin() == end(); }$/;"	f	class:__BVECTOR
empty	.\lib\avr-stl\include\stl_deque.h	/^  bool empty() const { return _M_finish == _M_start; }$/;"	f	class:deque
empty	.\lib\avr-stl\include\stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_map
empty	.\lib\avr-stl\include\stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_multimap
empty	.\lib\avr-stl\include\stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_multiset
empty	.\lib\avr-stl\include\stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_set
empty	.\lib\avr-stl\include\stl_hashtable.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:hashtable
empty	.\lib\avr-stl\include\stl_list.h	/^  bool empty() const { return _M_node->_M_next == _M_node; }$/;"	f	class:list
empty	.\lib\avr-stl\include\stl_map.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:map
empty	.\lib\avr-stl\include\stl_multimap.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:multimap
empty	.\lib\avr-stl\include\stl_multiset.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:multiset
empty	.\lib\avr-stl\include\stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:priority_queue
empty	.\lib\avr-stl\include\stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:queue
empty	.\lib\avr-stl\include\stl_set.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:set
empty	.\lib\avr-stl\include\stl_slist.h	/^  bool empty() const { return this->_M_head._M_next == 0; }$/;"	f	class:slist
empty	.\lib\avr-stl\include\stl_stack.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:stack
empty	.\lib\avr-stl\include\stl_tree.h	/^  bool empty() const { return _M_node_count == 0; }$/;"	f	class:_Rb_tree
empty	.\lib\avr-stl\include\stl_vector.h	/^  bool empty() const$/;"	f	class:vector
enable	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^    uint32_t enable;$/;"	m	struct:NRF51SPIOutput::saveData
enableConfig	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void enableConfig() { m_SPI->SPI_WPMR &= ~SPI_WPMR_WPEN; }$/;"	f	class:SAMHardwareSPIOutput
enableSPI	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void enableSPI() { m_SPI->SPI_CR = SPI_CR_SPIEN; }$/;"	f	class:SAMHardwareSPIOutput
enable_dithering	.\lib\FastLED\controller.h	/^        void enable_dithering(EDitherMode dither) {$/;"	f	struct:PixelController
enable_pins	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	inline void enable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
enable_pins	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	inline void enable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
enable_pins	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  static inline void enable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
enable_pins	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void enable_pins() { }$/;"	f	class:AVRUSART0SPIOutput
enable_pins	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void enable_pins() { }$/;"	f	class:AVRUSART1SPIOutput
enable_pins	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void enable_pins() {$/;"	f	class:AVRHardwareSPIOutput
end	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^void BLESerial::end() {$/;"	f	class:BLESerial
end	.\lib\FastLED\pixelset.h	/^  iterator end() const { return iterator(end_pos, dir); }$/;"	f	class:CPixelView
end	.\lib\FastLED\pixelset.h	/^  iterator end() { return iterator(end_pos, dir); }$/;"	f	class:CPixelView
end	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:__BVECTOR
end	.\lib\avr-stl\include\stl_bvector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:__BVECTOR
end	.\lib\avr-stl\include\stl_deque.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:deque
end	.\lib\avr-stl\include\stl_deque.h	/^  iterator end() { return _M_finish; }$/;"	f	class:deque
end	.\lib\avr-stl\include\stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_map
end	.\lib\avr-stl\include\stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_multimap
end	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:hash_map
end	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:hash_multimap
end	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_multiset
end	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_set
end	.\lib\avr-stl\include\stl_hashtable.h	/^  const_iterator end() const { return const_iterator(0, this); }$/;"	f	class:hashtable
end	.\lib\avr-stl\include\stl_hashtable.h	/^  iterator end() { return iterator(0, this); }$/;"	f	class:hashtable
end	.\lib\avr-stl\include\stl_list.h	/^  const_iterator end() const { return _M_node; }$/;"	f	class:list
end	.\lib\avr-stl\include\stl_list.h	/^  iterator end()             { return _M_node; }$/;"	f	class:list
end	.\lib\avr-stl\include\stl_map.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:map
end	.\lib\avr-stl\include\stl_map.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:map
end	.\lib\avr-stl\include\stl_multimap.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:multimap
end	.\lib\avr-stl\include\stl_multimap.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:multimap
end	.\lib\avr-stl\include\stl_multiset.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:multiset
end	.\lib\avr-stl\include\stl_set.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:set
end	.\lib\avr-stl\include\stl_slist.h	/^  const_iterator end() const { return const_iterator(0); }$/;"	f	class:slist
end	.\lib\avr-stl\include\stl_slist.h	/^  iterator end() { return iterator(0); }$/;"	f	class:slist
end	.\lib\avr-stl\include\stl_tempbuf.h	/^  _Tp* end() { return _M_buffer + _M_len; }$/;"	f	class:_Temporary_buffer
end	.\lib\avr-stl\include\stl_tree.h	/^  const_iterator end() const { return _M_header; }$/;"	f	class:_Rb_tree
end	.\lib\avr-stl\include\stl_tree.h	/^  iterator end() { return _M_header; }$/;"	f	class:_Rb_tree
end	.\lib\avr-stl\include\stl_vector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:vector
end	.\lib\avr-stl\include\stl_vector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:vector
endBoundary	.\lib\FastLED\chipsets.h	/^	void endBoundary(int nLeds) { int nDWords = (nLeds\/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }$/;"	f	class:APA102Controller
endBoundary	.\lib\FastLED\chipsets.h	/^	void endBoundary(int nLeds) { int nLongWords = (nLeds\/32); do { mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nLongWords--); }$/;"	f	class:SK9822Controller
endTime	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    endTime;       \/\/ Latch timing reference$/;"	m	class:Adafruit_NeoPixel
endTransmission	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::endTransmission(uint16_t timeout) {$/;"	f	class:TwoWire
end_pos	.\lib\FastLED\pixelset.h	/^  PIXEL_TYPE * const end_pos;$/;"	m	class:CPixelView
entries	.\lib\FastLED\colorutils.h	/^    CHSV entries[16];$/;"	m	class:CHSVPalette16
entries	.\lib\FastLED\colorutils.h	/^    CHSV entries[256];$/;"	m	class:CHSVPalette256
entries	.\lib\FastLED\colorutils.h	/^    CHSV entries[32];$/;"	m	class:CHSVPalette32
entries	.\lib\FastLED\colorutils.h	/^    CRGB entries[16];$/;"	m	class:CRGBPalette16
entries	.\lib\FastLED\colorutils.h	/^    CRGB entries[256];$/;"	m	class:CRGBPalette256
entries	.\lib\FastLED\colorutils.h	/^    CRGB entries[32];$/;"	m	class:CRGBPalette32
eof	.\lib\avr-stl\include\char_traits.h	/^  static int_type eof() {$/;"	f	class:__char_traits_base
eq	.\lib\avr-stl\include\char_traits.h	/^  static bool eq(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:__char_traits_base
eq_int_type	.\lib\avr-stl\include\char_traits.h	/^  static bool eq_int_type(const int_type& __c1, const int_type& __c2) {$/;"	f	class:__char_traits_base
equal	.\lib\avr-stl\include\stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
equal	.\lib\avr-stl\include\stl_iterator.h	/^  bool equal(const istreambuf_iterator& __i) const {$/;"	f	class:istreambuf_iterator
equal_range	.\lib\avr-stl\include\stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {$/;"	f
equal_range	.\lib\avr-stl\include\stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f
equal_range	.\lib\avr-stl\include\stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:hash_map
equal_range	.\lib\avr-stl\include\stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:hash_multimap
equal_range	.\lib\avr-stl\include\stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:hash_map
equal_range	.\lib\avr-stl\include\stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:hash_multimap
equal_range	.\lib\avr-stl\include\stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:hash_multiset
equal_range	.\lib\avr-stl\include\stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:hash_set
equal_range	.\lib\avr-stl\include\stl_hashtable.h	/^  ::equal_range(const key_type& __key) const$/;"	f	class:hashtable
equal_range	.\lib\avr-stl\include\stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::equal_range(const key_type& __key)$/;"	f	class:hashtable
equal_range	.\lib\avr-stl\include\stl_map.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:map
equal_range	.\lib\avr-stl\include\stl_map.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:map
equal_range	.\lib\avr-stl\include\stl_multimap.h	/^   pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:multimap
equal_range	.\lib\avr-stl\include\stl_multimap.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:multimap
equal_range	.\lib\avr-stl\include\stl_multiset.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:multiset
equal_range	.\lib\avr-stl\include\stl_set.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:set
equal_range	.\lib\avr-stl\include\stl_tree.h	/^  ::equal_range(const _Key& __k) const$/;"	f	class:_Rb_tree
equal_range	.\lib\avr-stl\include\stl_tree.h	/^  ::equal_range(const _Key& __k)$/;"	f	class:_Rb_tree
equal_to	.\lib\avr-stl\include\stl_function.h	/^struct equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s
erase	.\lib\avr-stl\include\stl_bvector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:__BVECTOR
erase	.\lib\avr-stl\include\stl_bvector.h	/^  iterator erase(iterator __position) {$/;"	f	class:__BVECTOR
erase	.\lib\avr-stl\include\stl_deque.h	/^  iterator erase(iterator __pos) {$/;"	f	class:deque
erase	.\lib\avr-stl\include\stl_deque.h	/^deque<_Tp,_Alloc>::erase(iterator __first, iterator __last)$/;"	f	class:deque
erase	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_map
erase	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_multimap
erase	.\lib\avr-stl\include\stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_map
erase	.\lib\avr-stl\include\stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_multimap
erase	.\lib\avr-stl\include\stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_map
erase	.\lib\avr-stl\include\stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_multimap
erase	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_multiset
erase	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_set
erase	.\lib\avr-stl\include\stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_multiset
erase	.\lib\avr-stl\include\stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_set
erase	.\lib\avr-stl\include\stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_multiset
erase	.\lib\avr-stl\include\stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_set
erase	.\lib\avr-stl\include\stl_hashtable.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:hashtable
erase	.\lib\avr-stl\include\stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const const_iterator& __it)$/;"	f	class:hashtable
erase	.\lib\avr-stl\include\stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const key_type& __key)$/;"	f	class:hashtable
erase	.\lib\avr-stl\include\stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const_iterator __first,$/;"	f	class:hashtable
erase	.\lib\avr-stl\include\stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const iterator& __it)$/;"	f	class:hashtable
erase	.\lib\avr-stl\include\stl_list.h	/^  iterator erase(iterator __position) {$/;"	f	class:list
erase	.\lib\avr-stl\include\stl_list.h	/^typename list<_Tp,_Alloc>::iterator list<_Tp, _Alloc>::erase(iterator __first, $/;"	f	class:list
erase	.\lib\avr-stl\include\stl_map.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:map
erase	.\lib\avr-stl\include\stl_map.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:map
erase	.\lib\avr-stl\include\stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:map
erase	.\lib\avr-stl\include\stl_multimap.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:multimap
erase	.\lib\avr-stl\include\stl_multimap.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:multimap
erase	.\lib\avr-stl\include\stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:multimap
erase	.\lib\avr-stl\include\stl_multiset.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:multiset
erase	.\lib\avr-stl\include\stl_multiset.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:multiset
erase	.\lib\avr-stl\include\stl_multiset.h	/^  void erase(iterator __position) { $/;"	f	class:multiset
erase	.\lib\avr-stl\include\stl_set.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:set
erase	.\lib\avr-stl\include\stl_set.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:set
erase	.\lib\avr-stl\include\stl_set.h	/^  void erase(iterator __position) { $/;"	f	class:set
erase	.\lib\avr-stl\include\stl_slist.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:slist
erase	.\lib\avr-stl\include\stl_slist.h	/^  iterator erase(iterator __pos) {$/;"	f	class:slist
erase	.\lib\avr-stl\include\stl_tree.h	/^  ::erase(const _Key* __first, const _Key* __last) $/;"	f	class:_Rb_tree
erase	.\lib\avr-stl\include\stl_tree.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:_Rb_tree
erase	.\lib\avr-stl\include\stl_tree.h	/^  ::erase(iterator __position)$/;"	f	class:_Rb_tree
erase	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)$/;"	f	class:_Rb_tree
erase	.\lib\avr-stl\include\stl_vector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:vector
erase	.\lib\avr-stl\include\stl_vector.h	/^  iterator erase(iterator __position) {$/;"	f	class:vector
erase_after	.\lib\avr-stl\include\stl_slist.h	/^  iterator erase_after(iterator __before_first, iterator __last) {$/;"	f	class:slist
erase_after	.\lib\avr-stl\include\stl_slist.h	/^  iterator erase_after(iterator __pos) {$/;"	f	class:slist
espShow	.\lib\Adafruit_NeoPixel\esp8266.c	/^void ICACHE_RAM_ATTR espShow($/;"	f
examples	.\lib\FastLED\library.json	/^    "examples": [$/;"	f
exp_	.\lib\FastLED\lib8tion.h	/^        uint32_t exp_  :  8;$/;"	m	struct:__anon30::__anon32
explicit	.\lib\avr-stl\include\stl_config.h	474;"	d
exponent	.\lib\FastLED\lib8tion.h	/^        uint32_t exponent:  8;$/;"	m	struct:__anon30::__anon31
export	.\lib\RunningMedian\library.json	/^  "export": {$/;"	f
f	.\lib\FastLED\lib8tion.h	/^    float    f;$/;"	m	union:__anon30
fNextInterruptFunction	.\lib\I2Cdev\I2Cdev.cpp	/^    static void (*fNextInterruptFunction)(void) = 0;$/;"	v	file:
fadeLightBy	.\lib\FastLED\colorutils.cpp	/^void fadeLightBy(CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f
fadeLightBy	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fadeLightBy(uint8_t fadefactor) { return nscale8_video(255 - fadefactor); }$/;"	f	class:CPixelView
fadeLightBy	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& fadeLightBy (uint8_t fadefactor )$/;"	f	struct:CRGB
fadeToBlackBy	.\lib\FastLED\colorutils.cpp	/^void fadeToBlackBy( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f
fadeToBlackBy	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fadeToBlackBy(uint8_t fade) { return nscale8(255 - fade); }$/;"	f	class:CPixelView
fadeToBlackBy	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& fadeToBlackBy (uint8_t fadefactor )$/;"	f	struct:CRGB
fadeUsingColor	.\lib\FastLED\colorutils.cpp	/^void fadeUsingColor( CRGB* leds, uint16_t numLeds, const CRGB& colormask)$/;"	f
fade_raw	.\lib\FastLED\colorutils.cpp	/^void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f
fade_video	.\lib\FastLED\colorutils.cpp	/^void fade_video(CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f
failed	.\lib\avr-stl\include\stl_iterator.h	/^  bool failed() const { return !_M_ok; }$/;"	f	class:ostreambuf_iterator
false	.\lib\avr-stl\include\stl_config.h	454;"	d
fastset	.\lib\FastLED\fastpin.h	/^	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port  = val; }$/;"	f	class:FastPin
fastset	.\lib\FastLED\fastpin.h	/^	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
fastset	.\lib\FastLED\fastpin.h	/^	inline void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port  = val; }$/;"	f	class:Pin
fastset	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }$/;"	f	class:_ARMPIN
fastset	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }$/;"	f	class:_ESPPIN
fastset	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }$/;"	f	class:_ESPPIN
fill	.\lib\avr-stl\include\stl_algobase.h	/^inline void fill(char* __first, char* __last, const char& __c) {$/;"	f
fill	.\lib\avr-stl\include\stl_algobase.h	/^inline void fill(signed char* __first, signed char* __last,$/;"	f
fill	.\lib\avr-stl\include\stl_algobase.h	/^inline void fill(unsigned char* __first, unsigned char* __last,$/;"	f
fill	.\lib\avr-stl\include\stl_algobase.h	/^void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value) {$/;"	f
fillCircle	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::fillCircle(uint8_t x0, uint8_t y0, uint8_t r, $/;"	f	class:GOFi2cOLED
fillCircleHelper	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::fillCircleHelper(uint8_t x0, uint8_t y0, uint8_t r,$/;"	f	class:GOFi2cOLED
fillRect	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, $/;"	f	class:GOFi2cOLED
fillRoundRect	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::fillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, uint8_t color) {$/;"	f	class:GOFi2cOLED
fillTriangle	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::fillTriangle (uint8_t x0, uint8_t y0,$/;"	f	class:GOFi2cOLED
fill_2dnoise16	.\lib\FastLED\noise.cpp	/^void fill_2dnoise16(CRGB *leds, int width, int height, bool serpentine,$/;"	f
fill_2dnoise8	.\lib\FastLED\noise.cpp	/^void fill_2dnoise8(CRGB *leds, int width, int height, bool serpentine,$/;"	f
fill_gradient	.\lib\FastLED\colorutils.h	/^void fill_gradient( T* targetArray, uint16_t numLeds, const CHSV& c1, const CHSV& c2,$/;"	f
fill_gradient	.\lib\FastLED\colorutils.h	/^void fill_gradient( T* targetArray, uint16_t numLeds,$/;"	f
fill_gradient	.\lib\FastLED\colorutils.h	/^void fill_gradient( T* targetArray,$/;"	f
fill_gradient	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_gradient(const CHSV & c1, const CHSV & c2, const CHSV &  c3, TGradientDirectionCode directionCode = SHORTEST_HUES) {$/;"	f	class:CPixelView
fill_gradient	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_gradient(const CHSV & c1, const CHSV & c2, const CHSV & c3, const CHSV & c4, TGradientDirectionCode directionCode = SHORTEST_HUES) {$/;"	f	class:CPixelView
fill_gradient	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_gradient(const CHSV & startcolor, const CHSV & endcolor, TGradientDirectionCode directionCode  = SHORTEST_HUES) {$/;"	f	class:CPixelView
fill_gradient_HSV	.\lib\FastLED\colorutils.h	215;"	d
fill_gradient_RGB	.\lib\FastLED\colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2)$/;"	f
fill_gradient_RGB	.\lib\FastLED\colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f
fill_gradient_RGB	.\lib\FastLED\colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f
fill_gradient_RGB	.\lib\FastLED\colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds,$/;"	f
fill_gradient_RGB	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & c1, const PIXEL_TYPE & c2, const PIXEL_TYPE &  c3) {$/;"	f	class:CPixelView
fill_gradient_RGB	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & c1, const PIXEL_TYPE & c2, const PIXEL_TYPE & c3, const PIXEL_TYPE & c4) {$/;"	f	class:CPixelView
fill_gradient_RGB	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & startcolor, const PIXEL_TYPE & endcolor, TGradientDirectionCode directionCode  = SHORTEST_HUES) {$/;"	f	class:CPixelView
fill_n	.\lib\avr-stl\include\stl_algobase.h	/^_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value) {$/;"	f
fill_n	.\lib\avr-stl\include\stl_algobase.h	/^inline char* fill_n(char* __first, _Size __n, const char& __c) {$/;"	f
fill_n	.\lib\avr-stl\include\stl_algobase.h	/^inline signed char* fill_n(char* __first, _Size __n,$/;"	f
fill_n	.\lib\avr-stl\include\stl_algobase.h	/^inline unsigned char* fill_n(unsigned char* __first, _Size __n,$/;"	f
fill_noise16	.\lib\FastLED\noise.cpp	/^void fill_noise16(CRGB *leds, int num_leds,$/;"	f
fill_noise8	.\lib\FastLED\noise.cpp	/^void fill_noise8(CRGB *leds, int num_leds,$/;"	f
fill_palette	.\lib\FastLED\colorutils.h	/^void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,$/;"	f
fill_rainbow	.\lib\FastLED\colorutils.cpp	/^void fill_rainbow( struct CHSV * targetArray, int numToFill,$/;"	f
fill_rainbow	.\lib\FastLED\colorutils.cpp	/^void fill_rainbow( struct CRGB * pFirstLED, int numToFill,$/;"	f
fill_rainbow	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_rainbow(uint8_t initialhue, uint8_t deltahue=5) {$/;"	f	class:CPixelView
fill_raw_2dnoise16	.\lib\FastLED\noise.cpp	/^void fill_raw_2dnoise16(uint16_t *pData, int width, int height, uint8_t octaves, q88 freq88, fract16 amplitude, int skip, uint32_t x, int scalex, uint32_t y, int scaley, uint32_t time) {$/;"	f
fill_raw_2dnoise16into8	.\lib\FastLED\noise.cpp	/^void fill_raw_2dnoise16into8(uint8_t *pData, int width, int height, uint8_t octaves, q44 freq44, fract8 amplitude, int skip, uint32_t x, int scalex, uint32_t y, int scaley, uint32_t time) {$/;"	f
fill_raw_2dnoise16into8	.\lib\FastLED\noise.cpp	/^void fill_raw_2dnoise16into8(uint8_t *pData, int width, int height, uint8_t octaves, uint32_t x, int scalex, uint32_t y, int scaley, uint32_t time) {$/;"	f
fill_raw_2dnoise8	.\lib\FastLED\noise.cpp	/^void fill_raw_2dnoise8(uint8_t *pData, int width, int height, uint8_t octaves, q44 freq44, fract8 amplitude, int skip, uint16_t x, int scalex, uint16_t y, int scaley, uint16_t time) {$/;"	f
fill_raw_2dnoise8	.\lib\FastLED\noise.cpp	/^void fill_raw_2dnoise8(uint8_t *pData, int width, int height, uint8_t octaves, uint16_t x, int scalex, uint16_t y, int scaley, uint16_t time) {$/;"	f
fill_raw_noise16into8	.\lib\FastLED\noise.cpp	/^void fill_raw_noise16into8(uint8_t *pData, uint8_t num_points, uint8_t octaves, uint32_t x, int scale, uint32_t time) {$/;"	f
fill_raw_noise8	.\lib\FastLED\noise.cpp	/^void fill_raw_noise8(uint8_t *pData, uint8_t num_points, uint8_t octaves, uint16_t x, int scale, uint16_t time) {$/;"	f
fill_solid	.\lib\FastLED\colorutils.cpp	/^void fill_solid( struct CHSV * targetArray, int numToFill,$/;"	f
fill_solid	.\lib\FastLED\colorutils.cpp	/^void fill_solid( struct CRGB * leds, int numToFill,$/;"	f
fill_solid	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_solid(const CHSV & color) { if(dir>0) { *this = color; return *this; } }$/;"	f	class:CPixelView
fill_solid	.\lib\FastLED\pixelset.h	/^  inline CPixelView & fill_solid(const PIXEL_TYPE & color) { *this = color; return *this; }$/;"	f	class:CPixelView
find	.\lib\avr-stl\include\char_traits.h	/^  static const _CharT* find(const _CharT* __s, size_t __n, const _CharT& __c)$/;"	f	class:__char_traits_base
find	.\lib\avr-stl\include\stl_algo.h	/^_RandomAccessIter find(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
find	.\lib\avr-stl\include\stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f
find	.\lib\avr-stl\include\stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:hash_map
find	.\lib\avr-stl\include\stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:hash_multimap
find	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:hash_map
find	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:hash_multimap
find	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:hash_multiset
find	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:hash_set
find	.\lib\avr-stl\include\stl_hashtable.h	/^  const_iterator find(const key_type& __key) const$/;"	f	class:hashtable
find	.\lib\avr-stl\include\stl_hashtable.h	/^  iterator find(const key_type& __key) $/;"	f	class:hashtable
find	.\lib\avr-stl\include\stl_map.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:map
find	.\lib\avr-stl\include\stl_map.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:map
find	.\lib\avr-stl\include\stl_multimap.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:multimap
find	.\lib\avr-stl\include\stl_multimap.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:multimap
find	.\lib\avr-stl\include\stl_multiset.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:multiset
find	.\lib\avr-stl\include\stl_set.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:set
find	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k) const$/;"	f	class:_Rb_tree
find	.\lib\avr-stl\include\stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k)$/;"	f	class:_Rb_tree
find_end	.\lib\avr-stl\include\stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f
find_first_of	.\lib\avr-stl\include\stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f
find_if	.\lib\avr-stl\include\stl_algo.h	/^_RandomAccessIter find_if(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
find_if	.\lib\avr-stl\include\stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f
find_or_insert	.\lib\avr-stl\include\stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::find_or_insert(const value_type& __obj)$/;"	f	class:hashtable
first	.\lib\avr-stl\include\stl_pair.h	/^  _T1 first;$/;"	m	struct:pair
first_argument_type	.\lib\avr-stl\include\stl_function.h	/^  typedef  _Arg1   first_argument_type;$/;"	t	struct:_Constant_binary_fun
first_argument_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Arg1 first_argument_type;$/;"	t	struct:binary_function
first_type	.\lib\avr-stl\include\stl_pair.h	/^  typedef _T1 first_type;$/;"	t	struct:pair
flip	.\lib\avr-stl\include\stl_bvector.h	/^  void flip() { *_M_p ^= _M_mask; }$/;"	f	struct:_Bit_reference
flip	.\lib\avr-stl\include\stl_bvector.h	/^  void flip() {$/;"	f	class:__BVECTOR
floatToSfract15	.\lib\FastLED\lib8tion.h	/^LIB8STATIC sfract15 floatToSfract15( float f)$/;"	f
flush	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^void BLESerial::flush(void) {$/;"	f	class:BLESerial
for_each	.\lib\avr-stl\include\stl_algo.h	/^_Function for_each(_InputIter __first, _InputIter __last, _Function __f) {$/;"	f
forward_iterator	.\lib\avr-stl\include\stl_iterator_base.h	/^template <class _Tp, class _Distance> struct forward_iterator {$/;"	s
forward_iterator_tag	.\lib\avr-stl\include\stl_iterator_base.h	/^struct forward_iterator_tag : public input_iterator_tag {};$/;"	s
fract16	.\lib\FastLED\lib8tion.h	/^typedef uint16_t  fract16;  \/\/\/< ANSI: unsigned       _Fract$/;"	t
fract8	.\lib\FastLED\lib8tion.h	/^typedef uint8_t   fract8;   \/\/\/< ANSI: unsigned short _Fract$/;"	t
framebuffer	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:COctoWS2811Controller
framebuffer	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:CWS2812SerialController
frameworks	.\lib\FastLED\library.json	/^    "frameworks": "arduino",$/;"	f
frameworks	.\lib\I2Cdev\library.json	/^  "frameworks": "arduino",$/;"	f
frameworks	.\lib\RunningMedian\library.json	/^  "frameworks": "arduino",$/;"	f
freq	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^    uint32_t freq;$/;"	m	struct:NRF51SPIOutput::saveData
front	.\lib\avr-stl\include\stl_bvector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:__BVECTOR
front	.\lib\avr-stl\include\stl_bvector.h	/^  reference front() { return *begin(); }$/;"	f	class:__BVECTOR
front	.\lib\avr-stl\include\stl_deque.h	/^  const_reference front() const { return *_M_start; }$/;"	f	class:deque
front	.\lib\avr-stl\include\stl_deque.h	/^  reference front() { return *_M_start; }$/;"	f	class:deque
front	.\lib\avr-stl\include\stl_list.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:list
front	.\lib\avr-stl\include\stl_list.h	/^  reference front() { return *begin(); }$/;"	f	class:list
front	.\lib\avr-stl\include\stl_queue.h	/^  const_reference front() const { return c.front(); }$/;"	f	class:queue
front	.\lib\avr-stl\include\stl_queue.h	/^  reference front() { return c.front(); }$/;"	f	class:queue
front	.\lib\avr-stl\include\stl_slist.h	/^  const_reference front() const $/;"	f	class:slist
front	.\lib\avr-stl\include\stl_slist.h	/^  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }$/;"	f	class:slist
front	.\lib\avr-stl\include\stl_vector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:vector
front	.\lib\avr-stl\include\stl_vector.h	/^  reference front() { return *begin(); }$/;"	f	class:vector
front_insert_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  explicit front_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:front_insert_iterator
front_insert_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class front_insert_iterator {$/;"	c
front_inserter	.\lib\avr-stl\include\stl_iterator.h	/^inline front_insert_iterator<_Container> front_inserter(_Container& __x) {$/;"	f
fuckit	.\lib\FastLED\FastLED.cpp	/^volatile uint32_t fuckit;$/;"	v
g	.\lib\FastLED\colorutils.h	/^        uint8_t g;$/;"	m	struct:__anon27::__anon28
g	.\lib\FastLED\pixeltypes.h	/^                uint8_t g;$/;"	m	union:CRGB::__anon40::__anon41::__anon43
gBlue_mW	.\lib\FastLED\power_mgt.cpp	/^static const uint8_t gBlue_mW  = 15 * 5; \/\/ 15mA @ 5v = 75mW$/;"	v	file:
gDark_mW	.\lib\FastLED\power_mgt.cpp	/^static const uint8_t gDark_mW  =  1 * 5; \/\/  1mA @ 5v =  5mW$/;"	v	file:
gGreen_mW	.\lib\FastLED\power_mgt.cpp	/^static const uint8_t gGreen_mW = 11 * 5; \/\/ 11mA @ 5v = 55mW$/;"	v	file:
gMCU_mW	.\lib\FastLED\power_mgt.cpp	/^static const uint8_t gMCU_mW  =  25 * 5; \/\/ 25mA @ 5v = 125 mW$/;"	v	file:
gMaxPowerIndicatorLEDPinNumber	.\lib\FastLED\power_mgt.cpp	/^static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; \/\/ default = Arduino onboard LED pin.  set to zero to skip this.$/;"	v	file:
gOffset	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    gOffset,       \/\/ Index of green byte$/;"	m	class:Adafruit_NeoPixel
gRed_mW	.\lib\FastLED\power_mgt.cpp	/^static const uint8_t gRed_mW   = 16 * 5; \/\/ 16mA @ 5v = 80mW$/;"	v	file:
gState	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	SPIState gState;$/;"	m	class:ARMHardwareSPIOutput
gState	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	SPIState gState;$/;"	m	class:ARMHardwareSPIOutput
gTimeErrorAccum256ths	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^static uint8_t gTimeErrorAccum256ths;$/;"	v
gamma8	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint8_t Adafruit_NeoPixel::gamma8(uint8_t x) const {$/;"	f	class:Adafruit_NeoPixel
generate	.\lib\avr-stl\include\stl_algo.h	/^void generate(_ForwardIter __first, _ForwardIter __last, _Generator __gen) {$/;"	f
generate_n	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter generate_n(_OutputIter __first, _Size __n, _Generator __gen) {$/;"	f
getAccelFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getAccelFIFOEnabled() {$/;"	f	class:MPU6050
getAccelXSelfTest	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getAccelXSelfTest() {$/;"	f	class:MPU6050
getAccelYSelfTest	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getAccelYSelfTest() {$/;"	f	class:MPU6050
getAccelZSelfTest	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getAccelZSelfTest() {$/;"	f	class:MPU6050
getAcceleration	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::getAcceleration(int16_t* x, int16_t* y, int16_t* z) {$/;"	f	class:MPU6050
getAccelerationX	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getAccelerationX() {$/;"	f	class:MPU6050
getAccelerationY	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getAccelerationY() {$/;"	f	class:MPU6050
getAccelerationZ	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getAccelerationZ() {$/;"	f	class:MPU6050
getAccelerometerPowerOnDelay	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getAccelerometerPowerOnDelay() {$/;"	f	class:MPU6050
getAdjustment	.\lib\FastLED\controller.h	/^    CRGB getAdjustment(uint8_t scale) {$/;"	f	class:CLEDController
getAuxVDDIOLevel	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getAuxVDDIOLevel() {$/;"	f	class:MPU6050
getAverage	.\lib\RunningMedian\RunningMedian.cpp	/^float RunningMedian::getAverage()$/;"	f	class:RunningMedian
getAverage	.\lib\RunningMedian\RunningMedian.cpp	/^float RunningMedian::getAverage(uint8_t nMedians)$/;"	f	class:RunningMedian
getAverageLight	.\lib\FastLED\pixeltypes.h	/^    inline uint8_t getAverageLight( )  const {$/;"	f	struct:CRGB
getBrightness	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint8_t Adafruit_NeoPixel::getBrightness(void) const {$/;"	f	class:Adafruit_NeoPixel
getBrightness	.\lib\FastLED\FastLED.h	/^	uint8_t getBrightness() { return m_Scale; }$/;"	f	class:CFastLED
getClockOutputEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getClockOutputEnabled() {$/;"	f	class:MPU6050
getClockSource	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getClockSource() {$/;"	f	class:MPU6050
getColor	.\src\Entity.h	/^CRGB::HTMLColorCode Entity::getColor() {$/;"	f	class:Entity
getConjugate	.\lib\MPU6050\helper_3dmath.h	/^        Quaternion getConjugate() {$/;"	f	class:Quaternion
getCorrection	.\lib\FastLED\controller.h	/^    CRGB getCorrection() { return m_ColorCorrection; }$/;"	f	class:CLEDController
getCount	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t getCount() { return _cnt; };  \/\/ returns current used elements, getCount() <= getSize()$/;"	f	class:RunningMedian
getDHPFMode	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getDHPFMode() {$/;"	f	class:MPU6050
getDLPFMode	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getDLPFMode() {$/;"	f	class:MPU6050
getDMPConfig1	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getDMPConfig1() {$/;"	f	class:MPU6050
getDMPConfig2	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getDMPConfig2() {$/;"	f	class:MPU6050
getDMPEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPEnabled() {$/;"	f	class:MPU6050
getDMPInt0Status	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPInt0Status() {$/;"	f	class:MPU6050
getDMPInt1Status	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPInt1Status() {$/;"	f	class:MPU6050
getDMPInt2Status	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPInt2Status() {$/;"	f	class:MPU6050
getDMPInt3Status	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPInt3Status() {$/;"	f	class:MPU6050
getDMPInt4Status	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPInt4Status() {$/;"	f	class:MPU6050
getDMPInt5Status	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getDMPInt5Status() {$/;"	f	class:MPU6050
getDeviceID	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getDeviceID() {$/;"	f	class:MPU6050
getDirection	.\src\Water.h	/^bool Water::getDirection() {$/;"	f	class:Water
getDither	.\lib\FastLED\controller.h	/^    inline uint8_t getDither() { return m_DitherMode; }$/;"	f	class:CLEDController
getElapsed	.\lib\FastLED\lib8tion.h	/^    timeType getElapsed() { return getTime() - mPrevTrigger; }$/;"	f	class:CEveryNTimePeriods
getElement	.\lib\RunningMedian\RunningMedian.cpp	/^float RunningMedian::getElement(const uint8_t n)$/;"	f	class:RunningMedian
getExternalFrameSync	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getExternalFrameSync() {$/;"	f	class:MPU6050
getExternalSensorByte	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getExternalSensorByte(int position) {$/;"	f	class:MPU6050
getExternalSensorDWord	.\lib\MPU6050\MPU6050.cpp	/^uint32_t MPU6050::getExternalSensorDWord(int position) {$/;"	f	class:MPU6050
getExternalSensorWord	.\lib\MPU6050\MPU6050.cpp	/^uint16_t MPU6050::getExternalSensorWord(int position) {$/;"	f	class:MPU6050
getExternalShadowDelayEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getExternalShadowDelayEnabled() {$/;"	f	class:MPU6050
getFIFOByte	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getFIFOByte() {$/;"	f	class:MPU6050
getFIFOBytes	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {$/;"	f	class:MPU6050
getFIFOCount	.\lib\MPU6050\MPU6050.cpp	/^uint16_t MPU6050::getFIFOCount() {$/;"	f	class:MPU6050
getFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getFIFOEnabled() {$/;"	f	class:MPU6050
getFPS	.\lib\FastLED\FastLED.h	/^	uint16_t getFPS() { return m_nFPS; }$/;"	f	class:CFastLED
getFSyncInterruptEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getFSyncInterruptEnabled() {$/;"	f	class:MPU6050
getFSyncInterruptLevel	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getFSyncInterruptLevel() {$/;"	f	class:MPU6050
getFreefallDetectionCounterDecrement	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getFreefallDetectionCounterDecrement() {$/;"	f	class:MPU6050
getFreefallDetectionDuration	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getFreefallDetectionDuration() {$/;"	f	class:MPU6050
getFreefallDetectionThreshold	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getFreefallDetectionThreshold() {$/;"	f	class:MPU6050
getFullScaleAccelRange	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getFullScaleAccelRange() {$/;"	f	class:MPU6050
getFullScaleGyroRange	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getFullScaleGyroRange() {$/;"	f	class:MPU6050
getHighest	.\lib\RunningMedian\RunningMedian.h	/^  float getHighest() { return getSortedElement(_cnt - 1); };$/;"	f	class:RunningMedian
getI2CBypassEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getI2CBypassEnabled() {$/;"	f	class:MPU6050
getI2CMasterModeEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getI2CMasterModeEnabled() {$/;"	f	class:MPU6050
getIntDMPEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntDMPEnabled() {$/;"	f	class:MPU6050
getIntDMPStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntDMPStatus() {$/;"	f	class:MPU6050
getIntDataReadyEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntDataReadyEnabled() {$/;"	f	class:MPU6050
getIntDataReadyStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntDataReadyStatus() {$/;"	f	class:MPU6050
getIntEnabled	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getIntEnabled() {$/;"	f	class:MPU6050
getIntFIFOBufferOverflowEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntFIFOBufferOverflowEnabled() {$/;"	f	class:MPU6050
getIntFIFOBufferOverflowStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntFIFOBufferOverflowStatus() {$/;"	f	class:MPU6050
getIntFreefallEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntFreefallEnabled() {$/;"	f	class:MPU6050
getIntFreefallStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntFreefallStatus() {$/;"	f	class:MPU6050
getIntI2CMasterEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntI2CMasterEnabled() {$/;"	f	class:MPU6050
getIntI2CMasterStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntI2CMasterStatus() {$/;"	f	class:MPU6050
getIntMotionEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntMotionEnabled() {$/;"	f	class:MPU6050
getIntMotionStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntMotionStatus() {$/;"	f	class:MPU6050
getIntPLLReadyEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntPLLReadyEnabled() {$/;"	f	class:MPU6050
getIntPLLReadyStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntPLLReadyStatus() {$/;"	f	class:MPU6050
getIntStatus	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getIntStatus() {$/;"	f	class:MPU6050
getIntZeroMotionEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntZeroMotionEnabled() {$/;"	f	class:MPU6050
getIntZeroMotionStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getIntZeroMotionStatus() {$/;"	f	class:MPU6050
getInterruptDrive	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getInterruptDrive() {$/;"	f	class:MPU6050
getInterruptLatch	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getInterruptLatch() {$/;"	f	class:MPU6050
getInterruptLatchClear	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getInterruptLatchClear() {$/;"	f	class:MPU6050
getInterruptMode	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getInterruptMode() {$/;"	f	class:MPU6050
getLastTriggerTime	.\lib\FastLED\lib8tion.h	/^    timeType getLastTriggerTime() { return mPrevTrigger; }$/;"	f	class:CEveryNTimePeriods
getLives	.\src\Player.h	/^short Player::getLives() {$/;"	f	class:Player
getLostArbitration	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getLostArbitration() {$/;"	f	class:MPU6050
getLowest	.\lib\RunningMedian\RunningMedian.h	/^  float getLowest()  { return getSortedElement(0); };$/;"	f	class:RunningMedian
getLuma	.\lib\FastLED\pixeltypes.h	/^    inline uint8_t getLuma ( )  const {$/;"	f	struct:CRGB
getMagnitude	.\lib\MPU6050\helper_3dmath.h	/^        float getMagnitude() {$/;"	f	class:Quaternion
getMagnitude	.\lib\MPU6050\helper_3dmath.h	/^        float getMagnitude() {$/;"	f	class:VectorFloat
getMagnitude	.\lib\MPU6050\helper_3dmath.h	/^        float getMagnitude() {$/;"	f	class:VectorInt16
getMasterClockSpeed	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getMasterClockSpeed() {$/;"	f	class:MPU6050
getMaxRefreshRate	.\lib\FastLED\controller.h	/^    virtual uint16_t getMaxRefreshRate() const { return 0; }$/;"	f	class:CLEDController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^  virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController
getMaxRefreshRate	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController
getMedian	.\lib\RunningMedian\RunningMedian.cpp	/^float RunningMedian::getMedian()$/;"	f	class:RunningMedian
getMotion6	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {$/;"	f	class:MPU6050
getMotion9	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::getMotion9(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* mx, int16_t* my, int16_t* mz) {$/;"	f	class:MPU6050
getMotionDetectionCounterDecrement	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getMotionDetectionCounterDecrement() {$/;"	f	class:MPU6050
getMotionDetectionDuration	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getMotionDetectionDuration() {$/;"	f	class:MPU6050
getMotionDetectionThreshold	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getMotionDetectionThreshold() {$/;"	f	class:MPU6050
getMultiMasterEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getMultiMasterEnabled() {$/;"	f	class:MPU6050
getNormalized	.\lib\MPU6050\helper_3dmath.h	/^        Quaternion getNormalized() {$/;"	f	class:Quaternion
getNormalized	.\lib\MPU6050\helper_3dmath.h	/^        VectorFloat getNormalized() {$/;"	f	class:VectorFloat
getNormalized	.\lib\MPU6050\helper_3dmath.h	/^        VectorInt16 getNormalized() {$/;"	f	class:VectorInt16
getOTPBankValid	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getOTPBankValid() {$/;"	f	class:MPU6050
getParity	.\lib\FastLED\pixeltypes.h	/^    inline uint8_t getParity()$/;"	f	struct:CRGB
getPassthroughStatus	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getPassthroughStatus() {$/;"	f	class:MPU6050
getPeriod	.\lib\FastLED\lib8tion.h	/^    timeType getPeriod() { return mPeriod; };$/;"	f	class:CEveryNTimePeriods
getPin	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    getPin(void) { return pin; };$/;"	f	class:Adafruit_NeoPixel
getPixelColor	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {$/;"	f	class:Adafruit_NeoPixel
getPixels	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint8_t *Adafruit_NeoPixel::getPixels(void) const {$/;"	f	class:Adafruit_NeoPixel
getPosition	.\src\Entity.h	/^int Entity::getPosition() {$/;"	f	class:Entity
getProduct	.\lib\MPU6050\helper_3dmath.h	/^        Quaternion getProduct(Quaternion q) {$/;"	f	class:Quaternion
getRate	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getRate() {$/;"	f	class:MPU6050
getRemaining	.\lib\FastLED\lib8tion.h	/^    timeType getRemaining() { return mPeriod - getElapsed(); }$/;"	f	class:CEveryNTimePeriods
getRotated	.\lib\MPU6050\helper_3dmath.h	/^        VectorFloat getRotated(Quaternion *q) {$/;"	f	class:VectorFloat
getRotated	.\lib\MPU6050\helper_3dmath.h	/^        VectorInt16 getRotated(Quaternion *q) {$/;"	f	class:VectorInt16
getRotation	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^uint8_t GOFi2cOLED::getRotation(void) {$/;"	f	class:GOFi2cOLED
getRotation	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::getRotation(int16_t* x, int16_t* y, int16_t* z) {$/;"	f	class:MPU6050
getRotationX	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getRotationX() {$/;"	f	class:MPU6050
getRotationY	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getRotationY() {$/;"	f	class:MPU6050
getRotationZ	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getRotationZ() {$/;"	f	class:MPU6050
getScalars	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^template <int VAL> void getScalars(uint32_t & preScalar, uint32_t & scalar, uint32_t & dbl) {$/;"	f
getScalars	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^template <int VAL> void getScalars(uint32_t & preScalar, uint32_t & scalar, uint32_t & dbl) {$/;"	f
getScalars	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^template <int VAL> void getScalars(uint8_t & sppr, uint8_t & spr) {$/;"	f
getSize	.\lib\RunningMedian\RunningMedian.h	/^  uint8_t getSize() { return _size; };  \/\/ returns size of internal buffer$/;"	f	class:RunningMedian
getSize	.\src\Water.h	/^uint8_t Water::getSize() {$/;"	f	class:Water
getSlate4InputByte	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlate4InputByte() {$/;"	f	class:MPU6050
getSlave0FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave0FIFOEnabled() {$/;"	f	class:MPU6050
getSlave0Nack	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave0Nack() {$/;"	f	class:MPU6050
getSlave1FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave1FIFOEnabled() {$/;"	f	class:MPU6050
getSlave1Nack	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave1Nack() {$/;"	f	class:MPU6050
getSlave2FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave2FIFOEnabled() {$/;"	f	class:MPU6050
getSlave2Nack	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave2Nack() {$/;"	f	class:MPU6050
getSlave3FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave3FIFOEnabled() {$/;"	f	class:MPU6050
getSlave3Nack	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave3Nack() {$/;"	f	class:MPU6050
getSlave4Address	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlave4Address() {$/;"	f	class:MPU6050
getSlave4Enabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave4Enabled() {$/;"	f	class:MPU6050
getSlave4InterruptEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave4InterruptEnabled() {$/;"	f	class:MPU6050
getSlave4IsDone	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave4IsDone() {$/;"	f	class:MPU6050
getSlave4MasterDelay	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlave4MasterDelay() {$/;"	f	class:MPU6050
getSlave4Nack	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave4Nack() {$/;"	f	class:MPU6050
getSlave4Register	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlave4Register() {$/;"	f	class:MPU6050
getSlave4WriteMode	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlave4WriteMode() {$/;"	f	class:MPU6050
getSlaveAddress	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlaveAddress(uint8_t num) {$/;"	f	class:MPU6050
getSlaveDataLength	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlaveDataLength(uint8_t num) {$/;"	f	class:MPU6050
getSlaveDelayEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlaveDelayEnabled(uint8_t num) {$/;"	f	class:MPU6050
getSlaveEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlaveEnabled(uint8_t num) {$/;"	f	class:MPU6050
getSlaveReadWriteTransitionEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlaveReadWriteTransitionEnabled() {$/;"	f	class:MPU6050
getSlaveRegister	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getSlaveRegister(uint8_t num) {$/;"	f	class:MPU6050
getSlaveWordByteSwap	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlaveWordByteSwap(uint8_t num) {$/;"	f	class:MPU6050
getSlaveWordGroupOffset	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlaveWordGroupOffset(uint8_t num) {$/;"	f	class:MPU6050
getSlaveWriteMode	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSlaveWriteMode(uint8_t num) {$/;"	f	class:MPU6050
getSleepEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getSleepEnabled() {$/;"	f	class:MPU6050
getSortedElement	.\lib\RunningMedian\RunningMedian.cpp	/^float RunningMedian::getSortedElement(const uint8_t n)$/;"	f	class:RunningMedian
getSpawnColor	.\src\SpawnPoint.h	/^CRGB::HTMLColorCode SpawnPoint::getSpawnColor() {$/;"	f	class:SpawnPoint
getSpawnTick	.\src\SpawnPoint.h	/^short SpawnPoint::getSpawnTick() {$/;"	f	class:SpawnPoint
getStandbyXAccelEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getStandbyXAccelEnabled() {$/;"	f	class:MPU6050
getStandbyXGyroEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getStandbyXGyroEnabled() {$/;"	f	class:MPU6050
getStandbyYAccelEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getStandbyYAccelEnabled() {$/;"	f	class:MPU6050
getStandbyYGyroEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getStandbyYGyroEnabled() {$/;"	f	class:MPU6050
getStandbyZAccelEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getStandbyZAccelEnabled() {$/;"	f	class:MPU6050
getStandbyZGyroEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getStandbyZGyroEnabled() {$/;"	f	class:MPU6050
getTempFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getTempFIFOEnabled() {$/;"	f	class:MPU6050
getTempSensorEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getTempSensorEnabled() {$/;"	f	class:MPU6050
getTemperature	.\lib\FastLED\controller.h	/^    CRGB getTemperature() { return m_ColorTemperature; }$/;"	f	class:CLEDController
getTemperature	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getTemperature() {$/;"	f	class:MPU6050
getTime	.\lib\FastLED\lib8tion.h	/^    timeType getTime() { return (timeType)(timeGetter()); };$/;"	f	class:CEveryNTimePeriods
getType	.\src\Entity.h	/^char* Entity::getType() {$/;"	f	class:Entity
getWaitForExternalSensorEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getWaitForExternalSensorEnabled() {$/;"	f	class:MPU6050
getWakeCycleEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getWakeCycleEnabled() {$/;"	f	class:MPU6050
getWakeFrequency	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getWakeFrequency() {$/;"	f	class:MPU6050
getXAccelOffset	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getXAccelOffset() {$/;"	f	class:MPU6050
getXFineGain	.\lib\MPU6050\MPU6050.cpp	/^int8_t MPU6050::getXFineGain() {$/;"	f	class:MPU6050
getXGyroFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getXGyroFIFOEnabled() {$/;"	f	class:MPU6050
getXGyroOffset	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getXGyroOffset() {$/;"	f	class:MPU6050
getXGyroOffsetTC	.\lib\MPU6050\MPU6050.cpp	/^int8_t MPU6050::getXGyroOffsetTC() {$/;"	f	class:MPU6050
getXNegMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getXNegMotionDetected() {$/;"	f	class:MPU6050
getXPosMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getXPosMotionDetected() {$/;"	f	class:MPU6050
getYAccelOffset	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getYAccelOffset() {$/;"	f	class:MPU6050
getYFineGain	.\lib\MPU6050\MPU6050.cpp	/^int8_t MPU6050::getYFineGain() {$/;"	f	class:MPU6050
getYGyroFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getYGyroFIFOEnabled() {$/;"	f	class:MPU6050
getYGyroOffset	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getYGyroOffset() {$/;"	f	class:MPU6050
getYGyroOffsetTC	.\lib\MPU6050\MPU6050.cpp	/^int8_t MPU6050::getYGyroOffsetTC() {$/;"	f	class:MPU6050
getYNegMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getYNegMotionDetected() {$/;"	f	class:MPU6050
getYPosMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getYPosMotionDetected() {$/;"	f	class:MPU6050
getZAccelOffset	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getZAccelOffset() {$/;"	f	class:MPU6050
getZFineGain	.\lib\MPU6050\MPU6050.cpp	/^int8_t MPU6050::getZFineGain() {$/;"	f	class:MPU6050
getZGyroFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getZGyroFIFOEnabled() {$/;"	f	class:MPU6050
getZGyroOffset	.\lib\MPU6050\MPU6050.cpp	/^int16_t MPU6050::getZGyroOffset() {$/;"	f	class:MPU6050
getZGyroOffsetTC	.\lib\MPU6050\MPU6050.cpp	/^int8_t MPU6050::getZGyroOffsetTC() {$/;"	f	class:MPU6050
getZNegMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getZNegMotionDetected() {$/;"	f	class:MPU6050
getZPosMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getZPosMotionDetected() {$/;"	f	class:MPU6050
getZeroMotionDetected	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::getZeroMotionDetected() {$/;"	f	class:MPU6050
getZeroMotionDetectionDuration	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getZeroMotionDetectionDuration() {$/;"	f	class:MPU6050
getZeroMotionDetectionThreshold	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::getZeroMotionDetectionThreshold() {$/;"	f	class:MPU6050
get_allocator	.\lib\avr-stl\include\stl_bvector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Bvector_alloc_base
get_allocator	.\lib\avr-stl\include\stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Bvector_alloc_base
get_allocator	.\lib\avr-stl\include\stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Bvector_base
get_allocator	.\lib\avr-stl\include\stl_bvector.h	/^  allocator_type get_allocator() const {$/;"	f	class:__BVECTOR
get_allocator	.\lib\avr-stl\include\stl_deque.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:deque
get_allocator	.\lib\avr-stl\include\stl_deque.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Deque_alloc_base
get_allocator	.\lib\avr-stl\include\stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Deque_alloc_base
get_allocator	.\lib\avr-stl\include\stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Deque_base
get_allocator	.\lib\avr-stl\include\stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_map
get_allocator	.\lib\avr-stl\include\stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_multimap
get_allocator	.\lib\avr-stl\include\stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_multiset
get_allocator	.\lib\avr-stl\include\stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_set
get_allocator	.\lib\avr-stl\include\stl_hashtable.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:hashtable
get_allocator	.\lib\avr-stl\include\stl_hashtable.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:hashtable
get_allocator	.\lib\avr-stl\include\stl_list.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:list
get_allocator	.\lib\avr-stl\include\stl_list.h	/^  allocator_type get_allocator() const { return _Node_allocator; }$/;"	f	class:_List_alloc_base
get_allocator	.\lib\avr-stl\include\stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_List_alloc_base
get_allocator	.\lib\avr-stl\include\stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_List_base
get_allocator	.\lib\avr-stl\include\stl_map.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:map
get_allocator	.\lib\avr-stl\include\stl_multimap.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:multimap
get_allocator	.\lib\avr-stl\include\stl_multiset.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:multiset
get_allocator	.\lib\avr-stl\include\stl_set.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:set
get_allocator	.\lib\avr-stl\include\stl_slist.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:slist
get_allocator	.\lib\avr-stl\include\stl_slist.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Slist_alloc_base
get_allocator	.\lib\avr-stl\include\stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Slist_alloc_base
get_allocator	.\lib\avr-stl\include\stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:_Slist_base
get_allocator	.\lib\avr-stl\include\stl_tree.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:_Rb_tree
get_allocator	.\lib\avr-stl\include\stl_tree.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Rb_tree_alloc_base
get_allocator	.\lib\avr-stl\include\stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rb_tree_alloc_base
get_allocator	.\lib\avr-stl\include\stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:_Rb_tree_base
get_allocator	.\lib\avr-stl\include\stl_vector.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:vector
get_allocator	.\lib\avr-stl\include\stl_vector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Vector_alloc_base
get_allocator	.\lib\avr-stl\include\stl_vector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Vector_alloc_base
get_temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {$/;"	f
get_temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len, _Tp*) {$/;"	f
getd	.\lib\FastLED\controller.h	/^        template<int SLOT> __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }$/;"	f	struct:PixelController
getscale	.\lib\FastLED\controller.h	/^        template<int SLOT> __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }$/;"	f	struct:PixelController
grad16	.\lib\FastLED\noise.cpp	/^static int16_t inline __attribute__((always_inline))  grad16(uint8_t hash, int16_t x, int16_t y, int16_t z) {$/;"	f	file:
grad16	.\lib\FastLED\noise.cpp	/^static int16_t inline __attribute__((always_inline)) grad16(uint8_t hash, int16_t x) {$/;"	f	file:
grad16	.\lib\FastLED\noise.cpp	/^static int16_t inline __attribute__((always_inline)) grad16(uint8_t hash, int16_t x, int16_t y) {$/;"	f	file:
grad8	.\lib\FastLED\noise.cpp	/^static int8_t  inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x, int8_t y, int8_t z) {$/;"	f	file:
grad8	.\lib\FastLED\noise.cpp	/^static int8_t inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x)$/;"	f	file:
grad8	.\lib\FastLED\noise.cpp	/^static int8_t inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x, int8_t y)$/;"	f	file:
greater	.\lib\avr-stl\include\stl_function.h	/^struct greater : public binary_function<_Tp,_Tp,bool> $/;"	s
greater_equal	.\lib\avr-stl\include\stl_function.h	/^struct greater_equal : public binary_function<_Tp,_Tp,bool>$/;"	s
green	.\lib\FastLED\pixeltypes.h	/^                uint8_t green;$/;"	m	union:CRGB::__anon40::__anon41::__anon43
h	.\lib\FastLED\pixeltypes.h	/^		        uint8_t h; };$/;"	m	union:CHSV::__anon34::__anon35::__anon36
has	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline bool has(int n) {$/;"	f	struct:PixelController
has_trivial_assignment_operator	.\lib\avr-stl\include\type_traits.h	/^   typedef __false_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits
has_trivial_assignment_operator	.\lib\avr-stl\include\type_traits.h	/^   typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits
has_trivial_copy_constructor	.\lib\avr-stl\include\type_traits.h	/^   typedef __false_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits
has_trivial_copy_constructor	.\lib\avr-stl\include\type_traits.h	/^   typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits
has_trivial_default_constructor	.\lib\avr-stl\include\type_traits.h	/^   typedef __false_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits
has_trivial_default_constructor	.\lib\avr-stl\include\type_traits.h	/^   typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits
has_trivial_destructor	.\lib\avr-stl\include\type_traits.h	/^   typedef __false_type    has_trivial_destructor;$/;"	t	struct:__type_traits
has_trivial_destructor	.\lib\avr-stl\include\type_traits.h	/^   typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char*>$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<const char*>$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<int> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<long> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<short> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<signed char> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned char> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned int> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned long> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned short> {$/;"	s
hash	.\lib\avr-stl\include\stl_hash_fun.h	/^template <class _Key> struct hash { };$/;"	s
hash_funct	.\lib\avr-stl\include\stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_map
hash_funct	.\lib\avr-stl\include\stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_multimap
hash_funct	.\lib\avr-stl\include\stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_multiset
hash_funct	.\lib\avr-stl\include\stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_set
hash_funct	.\lib\avr-stl\include\stl_hashtable.h	/^  hasher hash_funct() const { return _M_hash; }$/;"	f	class:hashtable
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  explicit hash_map(size_type __n)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf)$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_map
hash_map	.\lib\avr-stl\include\stl_hash_map.h	/^class hash_map$/;"	c
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  explicit hash_multimap(size_type __n)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf)$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_multimap
hash_multimap	.\lib\avr-stl\include\stl_hash_map.h	/^class hash_multimap$/;"	c
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  explicit hash_multiset(size_type __n)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset()$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf)$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_multiset
hash_multiset	.\lib\avr-stl\include\stl_hash_set.h	/^class hash_multiset$/;"	c
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  explicit hash_set(size_type __n)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set()$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf)$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_set
hash_set	.\lib\avr-stl\include\stl_hash_set.h	/^class hash_set$/;"	c
hasher	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_map
hasher	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_multimap
hasher	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_multiset
hasher	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_set
hasher	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _HashFcn hasher;$/;"	t	class:hashtable
hashtable	.\lib\avr-stl\include\stl_hashtable.h	/^class hashtable {$/;"	c
head	.\lib\FastLED\controller.h	/^    static CLEDController *head() { return m_pHead; }$/;"	f	class:CLEDController
height	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^uint8_t GOFi2cOLED::height(void) { $/;"	f	class:GOFi2cOLED
hi	.\lib\FastLED\fastpin.h	/^	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }$/;"	f	class:FastPin
hi	.\lib\FastLED\fastpin.h	/^	inline static void hi() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
hi	.\lib\FastLED\fastpin.h	/^	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { *port |= sPinMask; }$/;"	f	class:FastPin
hi	.\lib\FastLED\fastpin.h	/^	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
hi	.\lib\FastLED\fastpin.h	/^	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }$/;"	f	class:Pin
hi	.\lib\FastLED\fastpin.h	/^	inline void hi(register port_ptr_t port) __attribute__ ((always_inline)) { *port |= mPinMask; }$/;"	f	class:Pin
hi	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void hi() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUTSET = _MASK; }$/;"	f	class:_ARMPIN
hi	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }$/;"	f	class:_ARMPIN
hi	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void hi() __attribute__ ((always_inline)) { if(PIN < OUTPUT_PIN_LIMIT) { _GPB0._GPOS = MASK; } }$/;"	f	class:_ESPPIN
hi	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }$/;"	f	class:_ESPPIN
hi	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void hi() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPOS = MASK; } else { GP16O |= MASK; } }$/;"	f	class:_ESPPIN
hi	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }$/;"	f	class:_ESPPIN
highestBit	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static int highestBit() __attribute__((always_inline)) { return (VAL & 1 << BIT) ? BIT : BitWork<VAL, BIT-1>::highestBit(); }$/;"	f	class:BitWork
highestBit	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static int highestBit() __attribute__((always_inline)) { return 0; }$/;"	f	class:BitWork
highestBit	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static int highestBit() __attribute__((always_inline)) { return (VAL & 1 << BIT) ? BIT : BitWork<VAL, BIT-1>::highestBit(); }$/;"	f	class:BitWork
highestBit	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static int highestBit() __attribute__((always_inline)) { return 0; }$/;"	f	class:BitWork
hival	.\lib\FastLED\fastpin.h	/^	port_t hival() __attribute__ ((always_inline)) { return *mPort | mPinMask;  }$/;"	f	class:Pin
hival	.\lib\FastLED\fastpin.h	/^	static port_t hival() __attribute__ ((always_inline)) { return *sPort | sPinMask;  }$/;"	f	class:FastPin
hival	.\lib\FastLED\fastpin.h	/^	static port_t hival() __attribute__ ((always_inline)) { return 0; }$/;"	f	class:FastPin
hival	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static port_t hival() __attribute__ ((always_inline)) { return FL_NRF_GPIO->OUT | _MASK; }$/;"	f	class:_ARMPIN
hival	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static port_t hival() __attribute__ ((always_inline)) { if (PIN<OUTPUT_PIN_LIMIT) { return GPIO_OUT_REG | MASK;    }}$/;"	f	class:_ESPPIN
hival	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static port_t hival() __attribute__ ((always_inline)) { if (PIN<16) { return GPO | MASK;  } else { return GP16O | MASK; } }$/;"	f	class:_ESPPIN
homepage	.\lib\FastLED\library.json	/^    "homepage": "http:\/\/fastled.io",$/;"	f
hours8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t hours8()$/;"	f
hsv2rgb_rainbow	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)$/;"	f
hsv2rgb_rainbow	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_rainbow( const struct CHSV* phsv, struct CRGB * prgb, int numLeds) {$/;"	f
hsv2rgb_raw	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_raw(const struct CHSV & hsv, struct CRGB & rgb)$/;"	f
hsv2rgb_raw	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_raw(const struct CHSV * phsv, struct CRGB * prgb, int numLeds) {$/;"	f
hsv2rgb_raw_C	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_raw_C (const struct CHSV & hsv, struct CRGB & rgb)$/;"	f
hsv2rgb_raw_avr	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_raw_avr(const struct CHSV & hsv, struct CRGB & rgb)$/;"	f
hsv2rgb_spectrum	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_spectrum( const CHSV& hsv, CRGB& rgb)$/;"	f
hsv2rgb_spectrum	.\lib\FastLED\hsv2rgb.cpp	/^void hsv2rgb_spectrum( const struct CHSV* phsv, struct CRGB * prgb, int numLeds) {$/;"	f
hue	.\lib\FastLED\pixeltypes.h	/^		        uint8_t hue;$/;"	m	union:CHSV::__anon34::__anon35::__anon36
i	.\lib\FastLED\lib8tion.h	/^    uint32_t i;$/;"	m	union:__anon30
i	.\lib\I2Cdev\I2Cdev.cpp	/^        uint8_t i;$/;"	m	struct:__anon55	file:
iSin	.\src\iSin.h	/^class iSin$/;"	c
identity	.\lib\avr-stl\include\stl_function.h	/^template <class _Tp> struct identity : public _Identity<_Tp> {};$/;"	s
identity_element	.\lib\avr-stl\include\stl_function.h	/^template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {$/;"	f
identity_element	.\lib\avr-stl\include\stl_function.h	/^template <class _Tp> inline _Tp identity_element(plus<_Tp>) {$/;"	f
include	.\lib\I2Cdev\library.json	/^  "include": "Arduino\/I2Cdev",$/;"	f
include	.\lib\RunningMedian\library.json	/^    "include": "libraries\/RunningMedian"$/;"	f
includes	.\lib\avr-stl\include\stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
index	.\lib\FastLED\colorutils.h	/^        uint8_t index;$/;"	m	struct:__anon27::__anon28
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:APA102Controller
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:LPD8806Controller
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:P9813Controller
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:PixieController
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:SK9822Controller
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:SM16716Controller
init	.\lib\FastLED\chipsets.h	/^	virtual void init() {$/;"	f	class:WS2801Controller
init	.\lib\FastLED\dmx.h	/^	virtual void init() { DMXSerial.init(DMXController); }$/;"	f	class:DMXSerialController
init	.\lib\FastLED\dmx.h	/^	virtual void init() { DmxSimple.usePin(DATA_PIN); }$/;"	f	class:DMXSimpleController
init	.\lib\FastLED\fastspi_bitbang.h	/^	void init() {$/;"	f	class:AVRSoftwareSPIOutput
init	.\lib\FastLED\fastspi_nop.h	/^	void init() { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
init	.\lib\FastLED\fastspi_ref.h	/^	void init() { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput
init	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController
init	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	virtual void init() {$/;"	f	class:SixteenWayInlineBlockClocklessController
init	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void init() {$/;"	f	class:ARMHardwareSPIOutput
init	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  virtual void init() { \/* do nothing yet *\/ }$/;"	f	class:COctoWS2811Controller
init	.\lib\FastLED\platforms\arm\k20\smartmatrix_t3.h	/^  virtual void init() {$/;"	f	class:CSmartMatrixController
init	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  virtual void init() { \/* do nothing yet *\/ }$/;"	f	class:CWS2812SerialController
init	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController
init	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	virtual void init() {$/;"	f	class:SixteenWayInlineBlockClocklessController
init	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void init() {$/;"	f	class:ARMHardwareSPIOutput
init	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void init() {$/;"	f	class:ARMHardwareSPIOutput
init	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void init() {$/;"	f	class:NRF51SPIOutput
init	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController
init	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void init() {$/;"	f	class:SAMHardwareSPIOutput
init	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void init() {$/;"	f	class:AVRHardwareSPIOutput
init	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void init() {$/;"	f	class:AVRUSART0SPIOutput
init	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void init() {$/;"	f	class:AVRUSART1SPIOutput
init	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    virtual void init() {$/;"	f	class:InlineBlockClocklessController
init	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^  virtual void init() {$/;"	f	class:InlineBlockClocklessController
init	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	virtual void init() {$/;"	f	class:ClocklessController
init	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::init(uint8_t address)$/;"	f	class:GOFi2cOLED
initOffsets	.\lib\FastLED\controller.h	/^        void initOffsets(int len) {$/;"	f	struct:PixelController
initPin	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    template<int PIN> static void initPin() {$/;"	f	class:InlineBlockClocklessController
initPin	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^  template<int PIN> static void initPin() {$/;"	f	class:InlineBlockClocklessController
init_binary_dithering	.\lib\FastLED\controller.h	/^        void init_binary_dithering() {$/;"	f	struct:PixelController
initialize	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::initialize() {$/;"	f	class:MPU6050
inner_product	.\lib\avr-stl\include\stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f
inoise16	.\lib\FastLED\noise.cpp	/^uint16_t inoise16(uint32_t x) {$/;"	f
inoise16	.\lib\FastLED\noise.cpp	/^uint16_t inoise16(uint32_t x, uint32_t y) {$/;"	f
inoise16	.\lib\FastLED\noise.cpp	/^uint16_t inoise16(uint32_t x, uint32_t y, uint32_t z) {$/;"	f
inoise16_raw	.\lib\FastLED\noise.cpp	/^int16_t inoise16_raw(uint32_t x)$/;"	f
inoise16_raw	.\lib\FastLED\noise.cpp	/^int16_t inoise16_raw(uint32_t x, uint32_t y)$/;"	f
inoise16_raw	.\lib\FastLED\noise.cpp	/^int16_t inoise16_raw(uint32_t x, uint32_t y, uint32_t z)$/;"	f
inoise8	.\lib\FastLED\noise.cpp	/^uint8_t inoise8(uint16_t x) {$/;"	f
inoise8	.\lib\FastLED\noise.cpp	/^uint8_t inoise8(uint16_t x, uint16_t y) {$/;"	f
inoise8	.\lib\FastLED\noise.cpp	/^uint8_t inoise8(uint16_t x, uint16_t y, uint16_t z) {$/;"	f
inoise8_raw	.\lib\FastLED\noise.cpp	/^int8_t inoise8_raw(uint16_t x)$/;"	f
inoise8_raw	.\lib\FastLED\noise.cpp	/^int8_t inoise8_raw(uint16_t x, uint16_t y)$/;"	f
inoise8_raw	.\lib\FastLED\noise.cpp	/^int8_t inoise8_raw(uint16_t x, uint16_t y, uint16_t z)$/;"	f
inplace_merge	.\lib\avr-stl\include\stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f
input_iterator	.\lib\avr-stl\include\stl_iterator_base.h	/^template <class _Tp, class _Distance> struct input_iterator {$/;"	s
input_iterator_tag	.\lib\avr-stl\include\stl_iterator_base.h	/^struct input_iterator_tag {};$/;"	s
insert	.\lib\avr-stl\include\stl_bvector.h	/^  iterator insert(iterator __position, bool __x = bool()) {$/;"	f	class:__BVECTOR
insert	.\lib\avr-stl\include\stl_bvector.h	/^  void insert(iterator __position, const bool* __first, const bool* __last) {$/;"	f	class:__BVECTOR
insert	.\lib\avr-stl\include\stl_bvector.h	/^  void insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:__BVECTOR
insert	.\lib\avr-stl\include\stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:__BVECTOR
insert	.\lib\avr-stl\include\stl_deque.h	/^  iterator insert(iterator __position)$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_deque.h	/^  iterator insert(iterator position, const value_type& __x) {$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_deque.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x)$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_deque.h	/^deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp, _Alloc>::insert(iterator __pos,$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator insert(const value_type& __obj) $/;"	f	class:hash_multimap
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  pair<iterator,bool> insert(const value_type& __obj)$/;"	f	class:hash_map
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_multimap
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_map
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_map
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_multimap
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_multimap
insert	.\lib\avr-stl\include\stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l)$/;"	f	class:hash_map
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator insert(const value_type& __obj)$/;"	f	class:hash_multiset
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  pair<iterator, bool> insert(const value_type& __obj)$/;"	f	class:hash_set
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_multiset
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_set
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_multiset
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_set
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_multiset
insert	.\lib\avr-stl\include\stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_set
insert	.\lib\avr-stl\include\stl_list.h	/^  iterator insert(iterator __position) { return insert(__position, _Tp()); }$/;"	f	class:list
insert	.\lib\avr-stl\include\stl_list.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:list
insert	.\lib\avr-stl\include\stl_list.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:list
insert	.\lib\avr-stl\include\stl_list.h	/^  void insert(iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:list
insert	.\lib\avr-stl\include\stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:list
insert	.\lib\avr-stl\include\stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position,$/;"	f	class:list
insert	.\lib\avr-stl\include\stl_map.h	/^  iterator insert(iterator position, const value_type& __x)$/;"	f	class:map
insert	.\lib\avr-stl\include\stl_map.h	/^  pair<iterator,bool> insert(const value_type& __x) $/;"	f	class:map
insert	.\lib\avr-stl\include\stl_map.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:map
insert	.\lib\avr-stl\include\stl_map.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:map
insert	.\lib\avr-stl\include\stl_map.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:map
insert	.\lib\avr-stl\include\stl_multimap.h	/^  iterator insert(const value_type& __x) { return _M_t.insert_equal(__x); }$/;"	f	class:multimap
insert	.\lib\avr-stl\include\stl_multimap.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:multimap
insert	.\lib\avr-stl\include\stl_multimap.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:multimap
insert	.\lib\avr-stl\include\stl_multimap.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:multimap
insert	.\lib\avr-stl\include\stl_multimap.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:multimap
insert	.\lib\avr-stl\include\stl_multiset.h	/^  iterator insert(const value_type& __x) { $/;"	f	class:multiset
insert	.\lib\avr-stl\include\stl_multiset.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:multiset
insert	.\lib\avr-stl\include\stl_multiset.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:multiset
insert	.\lib\avr-stl\include\stl_multiset.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:multiset
insert	.\lib\avr-stl\include\stl_multiset.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:multiset
insert	.\lib\avr-stl\include\stl_set.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:set
insert	.\lib\avr-stl\include\stl_set.h	/^  pair<iterator,bool> insert(const value_type& __x) { $/;"	f	class:set
insert	.\lib\avr-stl\include\stl_set.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:set
insert	.\lib\avr-stl\include\stl_set.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:set
insert	.\lib\avr-stl\include\stl_set.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:set
insert	.\lib\avr-stl\include\stl_slist.h	/^  iterator insert(iterator __pos) {$/;"	f	class:slist
insert	.\lib\avr-stl\include\stl_slist.h	/^  iterator insert(iterator __pos, const value_type& __x) {$/;"	f	class:slist
insert	.\lib\avr-stl\include\stl_slist.h	/^  void insert(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:slist
insert	.\lib\avr-stl\include\stl_slist.h	/^  void insert(iterator __pos, const value_type* __first, $/;"	f	class:slist
insert	.\lib\avr-stl\include\stl_slist.h	/^  void insert(iterator __pos, const_iterator __first, const_iterator __last) {$/;"	f	class:slist
insert	.\lib\avr-stl\include\stl_slist.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:slist
insert	.\lib\avr-stl\include\stl_vector.h	/^  iterator insert(iterator __position) {$/;"	f	class:vector
insert	.\lib\avr-stl\include\stl_vector.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:vector
insert	.\lib\avr-stl\include\stl_vector.h	/^  void insert (iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:vector
insert	.\lib\avr-stl\include\stl_vector.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:vector
insert	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:vector
insert_after	.\lib\avr-stl\include\stl_slist.h	/^  iterator insert_after(iterator __pos) {$/;"	f	class:slist
insert_after	.\lib\avr-stl\include\stl_slist.h	/^  iterator insert_after(iterator __pos, const value_type& __x) {$/;"	f	class:slist
insert_after	.\lib\avr-stl\include\stl_slist.h	/^  void insert_after(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:slist
insert_after	.\lib\avr-stl\include\stl_slist.h	/^  void insert_after(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:slist
insert_after	.\lib\avr-stl\include\stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:slist
insert_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  iterator insert_equal(const value_type& __obj)$/;"	f	class:hashtable
insert_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_equal(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:hashtable
insert_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l)$/;"	f	class:hashtable
insert_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l,$/;"	f	class:hashtable
insert_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_equal(const value_type* __f, const value_type* __l)$/;"	f	class:hashtable
insert_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_equal(const_iterator __f, const_iterator __l)$/;"	f	class:hashtable
insert_equal	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_equal(_II __first, _II __last)$/;"	f	class:_Rb_tree
insert_equal	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_equal(const _Val* __first, const _Val* __last)$/;"	f	class:_Rb_tree
insert_equal	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_equal(const _Value& __v)$/;"	f	class:_Rb_tree
insert_equal	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_equal(const_iterator __first, const_iterator __last)$/;"	f	class:_Rb_tree
insert_equal	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_equal(iterator __position, const _Val& __v)$/;"	f	class:_Rb_tree
insert_equal_noresize	.\lib\avr-stl\include\stl_hashtable.h	/^  ::insert_equal_noresize(const value_type& __obj)$/;"	f	class:hashtable
insert_iterator	.\lib\avr-stl\include\stl_hash_map.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:insert_iterator
insert_iterator	.\lib\avr-stl\include\stl_hash_map.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:insert_iterator
insert_iterator	.\lib\avr-stl\include\stl_hash_map.h	/^class insert_iterator<hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c
insert_iterator	.\lib\avr-stl\include\stl_hash_map.h	/^class insert_iterator<hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c
insert_iterator	.\lib\avr-stl\include\stl_hash_set.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:insert_iterator
insert_iterator	.\lib\avr-stl\include\stl_hash_set.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:insert_iterator
insert_iterator	.\lib\avr-stl\include\stl_hash_set.h	/^class insert_iterator<hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c
insert_iterator	.\lib\avr-stl\include\stl_hash_set.h	/^class insert_iterator<hash_set<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c
insert_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:insert_iterator
insert_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class insert_iterator {$/;"	c
insert_iterator	.\lib\avr-stl\include\stl_slist.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:insert_iterator
insert_iterator	.\lib\avr-stl\include\stl_slist.h	/^class insert_iterator<slist<_Tp, _Alloc> > {$/;"	c
insert_noresize	.\lib\avr-stl\include\stl_hash_map.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:hash_multimap
insert_noresize	.\lib\avr-stl\include\stl_hash_map.h	/^  pair<iterator,bool> insert_noresize(const value_type& __obj)$/;"	f	class:hash_map
insert_noresize	.\lib\avr-stl\include\stl_hash_set.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:hash_multiset
insert_noresize	.\lib\avr-stl\include\stl_hash_set.h	/^  pair<iterator, bool> insert_noresize(const value_type& __obj)$/;"	f	class:hash_set
insert_unique	.\lib\avr-stl\include\stl_hashtable.h	/^  pair<iterator, bool> insert_unique(const value_type& __obj)$/;"	f	class:hashtable
insert_unique	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_unique(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:hashtable
insert_unique	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l)$/;"	f	class:hashtable
insert_unique	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l,$/;"	f	class:hashtable
insert_unique	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_unique(const value_type* __f, const value_type* __l)$/;"	f	class:hashtable
insert_unique	.\lib\avr-stl\include\stl_hashtable.h	/^  void insert_unique(const_iterator __f, const_iterator __l)$/;"	f	class:hashtable
insert_unique	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_unique(_II __first, _II __last) {$/;"	f	class:_Rb_tree
insert_unique	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_unique(const _Val* __first, const _Val* __last)$/;"	f	class:_Rb_tree
insert_unique	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_unique(const _Value& __v)$/;"	f	class:_Rb_tree
insert_unique	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_unique(const_iterator __first, const_iterator __last)$/;"	f	class:_Rb_tree
insert_unique	.\lib\avr-stl\include\stl_tree.h	/^  ::insert_unique(iterator __position, const _Val& __v)$/;"	f	class:_Rb_tree
insert_unique_noresize	.\lib\avr-stl\include\stl_hashtable.h	/^  ::insert_unique_noresize(const value_type& __obj)$/;"	f	class:hashtable
inserter	.\lib\avr-stl\include\stl_iterator.h	/^insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)$/;"	f
int_type	.\lib\avr-stl\include\char_traits.h	/^  typedef _IntT int_type;$/;"	t	class:__char_traits_base
int_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:istreambuf_iterator
int_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:ostreambuf_iterator
iota	.\lib\avr-stl\include\stl_numeric.h	/^iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)$/;"	f
is800KHz	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    is800KHz,      \/\/ ...true if 800 KHz pixels$/;"	m	class:Adafruit_NeoPixel
isActive	.\src\Trap.h	/^bool Trap::isActive() {$/;"	f	class:Trap
isSelected	.\lib\FastLED\fastpin.h	/^	virtual bool isSelected() { return (*mPort & mPinMask) == mPinMask; }$/;"	f	class:Pin
is_POD_type	.\lib\avr-stl\include\type_traits.h	/^   typedef __false_type    is_POD_type;$/;"	t	struct:__type_traits
is_POD_type	.\lib\avr-stl\include\type_traits.h	/^   typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits
is_heap	.\lib\avr-stl\include\stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last)$/;"	f
is_heap	.\lib\avr-stl\include\stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
is_sorted	.\lib\avr-stl\include\stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last)$/;"	f
is_sorted	.\lib\avr-stl\include\stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last,$/;"	f
isinTable8	.\src\iSin.h	/^      uint8_t isinTable8[91] = { $/;"	m	class:iSin
isset	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static bool isset() __attribute__ ((always_inline)) { return (FL_NRF_GPIO->IN & _MASK) != 0; }$/;"	f	class:_ARMPIN
isset	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static bool isset() __attribute__ ((always_inline)) { return (0x004 & MASK); }$/;"	f	class:_ESPPIN
isset	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static bool isset() __attribute__ ((always_inline)) { return (PIN < 16) ? (GPO & MASK) : (GP16O & MASK); }$/;"	f	class:_ESPPIN
istream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator() : _M_stream(&cin), _M_end_marker(false) {}$/;"	f	class:istream_iterator
istream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator() : _M_stream(0), _M_ok(false) {}$/;"	f	class:istream_iterator
istream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator(istream& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:istream_iterator
istream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:istream_iterator
istream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class istream_iterator {$/;"	c
istream_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits>   istream_type;$/;"	t	class:istreambuf_iterator
istream_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:istream_iterator
istreambuf_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  istreambuf_iterator(istream_type& __is) { this->_M_init(__is.rdbuf()); }$/;"	f	class:istreambuf_iterator
istreambuf_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }$/;"	f	class:istreambuf_iterator
istreambuf_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class istreambuf_iterator$/;"	c
iter	.\lib\avr-stl\include\stl_hash_map.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator
iter	.\lib\avr-stl\include\stl_hash_set.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator
iter	.\lib\avr-stl\include\stl_iterator.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator
iter	.\lib\avr-stl\include\stl_slist.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator
iter_swap	.\lib\avr-stl\include\stl_algobase.h	/^inline void iter_swap(_ForwardIter1 __a, _ForwardIter2 __b) {$/;"	f
iterator	.\lib\FastLED\pixelset.h	/^  typedef pixelset_iterator_base<PIXEL_TYPE> iterator;$/;"	t	class:CPixelView
iterator	.\lib\avr-stl\include\container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(iterator);$/;"	v
iterator	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_iterator                iterator;$/;"	t	class:__BVECTOR
iterator	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_iterator   iterator;$/;"	t	struct:_Bit_iterator
iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:_Deque_iterator
iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Deque_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:_Deque_base
iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef typename _Base::iterator       iterator;$/;"	t	class:deque
iterator	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:hash_map
iterator	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:hash_multimap
iterator	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:hash_multiset
iterator	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:hash_set
iterator	.\lib\avr-stl\include\stl_hashtable.h	/^          iterator;$/;"	t	class:hashtable
iterator	.\lib\avr-stl\include\stl_hashtable.h	/^          iterator;$/;"	t	struct:_Hashtable_const_iterator
iterator	.\lib\avr-stl\include\stl_hashtable.h	/^          iterator;$/;"	t	struct:_Hashtable_iterator
iterator	.\lib\avr-stl\include\stl_iterator_base.h	/^struct iterator {$/;"	s
iterator	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:list
iterator	.\lib\avr-stl\include\stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	struct:_List_iterator
iterator	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:map
iterator	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:multimap
iterator	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:multiset
iterator	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:set
iterator	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:slist
iterator	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:_Slist_iterator
iterator	.\lib\avr-stl\include\stl_tree.h	/^    iterator;$/;"	t	struct:_Rb_tree_iterator
iterator	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Rb_tree_iterator<value_type, reference, pointer> iterator;$/;"	t	class:_Rb_tree
iterator	.\lib\avr-stl\include\stl_vector.h	/^  typedef value_type* iterator;$/;"	t	class:vector
iterator_category	.\lib\avr-stl\include\concept_checks.h	/^          iterator_category;$/;"	t	struct:__iterator_category_type_definition_requirement_violation
iterator_category	.\lib\avr-stl\include\stl_deque.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:_Deque_iterator
iterator_category	.\lib\avr-stl\include\stl_deque.h	/^iterator_category(const _Deque_iterator<_Tp,_Ref,_Ptr>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator
iterator_category	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator
iterator_category	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Hashtable_const_iterator
iterator_category	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Hashtable_iterator
iterator_category	.\lib\avr-stl\include\stl_hashtable.h	/^iterator_category(const _Hashtable_const_iterator<_Val,_Key,_HF,$/;"	f
iterator_category	.\lib\avr-stl\include\stl_hashtable.h	/^iterator_category(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^          iterator_category;$/;"	t	class:reverse_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	class:reverse_bidirectional_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef input_iterator_tag             iterator_category;$/;"	t	class:istream_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef input_iterator_tag  iterator_category;$/;"	t	class:istream_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef output_iterator_tag            iterator_category;$/;"	t	class:ostream_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:back_insert_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:front_insert_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:ostream_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	class:reverse_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const back_insert_iterator<_Container>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const front_insert_iterator<_Container>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const insert_iterator<_Container>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const istream_iterator<_Tp, _Dist>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const ostream_iterator<_Tp>&) {$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const reverse_bidirectional_iterator<_BidirectionalIterator,$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator.h	/^iterator_category(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Category  iterator_category;$/;"	t	struct:iterator
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:bidirectional_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:forward_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef input_iterator_tag iterator_category;$/;"	t	struct:input_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	struct:output_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:iterator_traits
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:random_access_iterator
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:iterator_traits
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^inline output_iterator_tag iterator_category(const output_iterator&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^inline random_access_iterator_tag iterator_category(const _Tp*)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^iterator_category(const _Iter& __i) { return __iterator_category(__i); }$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^iterator_category(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^iterator_category(const forward_iterator<_Tp, _Distance>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^iterator_category(const input_iterator<_Tp, _Distance>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_iterator_base.h	/^iterator_category(const random_access_iterator<_Tp, _Distance>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_list.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:_List_iterator_base
iterator_category	.\lib\avr-stl\include\stl_list.h	/^iterator_category(const _List_iterator_base&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:raw_storage_iterator
iterator_category	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^iterator_category(const raw_storage_iterator<_ForwardIterator, _Tp>&)$/;"	f
iterator_category	.\lib\avr-stl\include\stl_slist.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Slist_iterator_base
iterator_category	.\lib\avr-stl\include\stl_slist.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator
iterator_category	.\lib\avr-stl\include\stl_slist.h	/^inline forward_iterator_tag iterator_category(const _Slist_iterator_base&) {$/;"	f
iterator_category	.\lib\avr-stl\include\stl_tree.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:_Rb_tree_base_iterator
iterator_category	.\lib\avr-stl\include\stl_tree.h	/^iterator_category(const _Rb_tree_base_iterator&) {$/;"	f
iterator_traits	.\lib\avr-stl\include\stl_iterator_base.h	/^struct iterator_traits {$/;"	s
iterator_traits	.\lib\avr-stl\include\stl_iterator_base.h	/^struct iterator_traits<_Tp*> {$/;"	s
iterator_traits	.\lib\avr-stl\include\stl_iterator_base.h	/^struct iterator_traits<const _Tp*> {$/;"	s
iterator_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Iterator iterator_type;$/;"	t	class:reverse_iterator
just8bits	.\lib\FastLED\bitswap.h	/^} just8bits;$/;"	t	typeref:union:__anon19
key_comp	.\lib\avr-stl\include\stl_map.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:map
key_comp	.\lib\avr-stl\include\stl_multimap.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:multimap
key_comp	.\lib\avr-stl\include\stl_multiset.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:multiset
key_comp	.\lib\avr-stl\include\stl_set.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:set
key_comp	.\lib\avr-stl\include\stl_tree.h	/^  _Compare key_comp() const { return _M_key_compare; }$/;"	f	class:_Rb_tree
key_compare	.\lib\avr-stl\include\stl_map.h	/^  typedef _Compare              key_compare;$/;"	t	class:map
key_compare	.\lib\avr-stl\include\stl_multimap.h	/^  typedef _Compare              key_compare;$/;"	t	class:multimap
key_compare	.\lib\avr-stl\include\stl_multiset.h	/^  typedef _Compare key_compare;$/;"	t	class:multiset
key_compare	.\lib\avr-stl\include\stl_set.h	/^  typedef _Compare key_compare;$/;"	t	class:set
key_eq	.\lib\avr-stl\include\stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_map
key_eq	.\lib\avr-stl\include\stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_multimap
key_eq	.\lib\avr-stl\include\stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_multiset
key_eq	.\lib\avr-stl\include\stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_set
key_eq	.\lib\avr-stl\include\stl_hashtable.h	/^  key_equal key_eq() const { return _M_equals; }$/;"	f	class:hashtable
key_equal	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_map
key_equal	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_multimap
key_equal	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_multiset
key_equal	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_set
key_equal	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _EqualKey key_equal;$/;"	t	class:hashtable
key_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_map
key_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_multimap
key_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_multiset
key_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_set
key_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Key key_type;$/;"	t	class:hashtable
key_type	.\lib\avr-stl\include\stl_map.h	/^  typedef _Key                  key_type;$/;"	t	class:map
key_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef _Key                  key_type;$/;"	t	class:multimap
key_type	.\lib\avr-stl\include\stl_multiset.h	/^  typedef _Key     key_type;$/;"	t	class:multiset
key_type	.\lib\avr-stl\include\stl_set.h	/^  typedef _Key     key_type;$/;"	t	class:set
key_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Key key_type;$/;"	t	class:_Rb_tree
keywords	.\lib\FastLED\library.json	/^    "keywords": "led,noise,rgb,math,fast",$/;"	f
keywords	.\lib\I2Cdev\library.json	/^  "keywords": "i2cdevlib, i2c",$/;"	f
keywords	.\lib\RunningMedian\library.json	/^  "keywords": "running,moving,median,average,outliers",$/;"	f
lastshow	.\lib\FastLED\FastLED.cpp	/^static uint32_t lastshow = 0;$/;"	v	file:
leds	.\lib\FastLED\FastLED.h	/^	CRGB *leds() { return (*this)[0].leds(); }$/;"	f	class:CFastLED
leds	.\lib\FastLED\controller.h	/^    CRGB* leds() { return m_Data; }$/;"	f	class:CLEDController
leds	.\lib\FastLED\pixelset.h	/^    T * leds;$/;"	m	class:CPixelView::pixelset_iterator_base
leds	.\lib\FastLED\pixelset.h	/^  PIXEL_TYPE * const leds;$/;"	m	class:CPixelView
leds	.\src\LightEffects.h	/^    CRGB leds[NUM_LED];$/;"	m	class:LightEffects
len	.\lib\FastLED\pixelset.h	/^  const int   len;$/;"	m	class:CPixelView
length	.\lib\I2Cdev\I2Cdev.cpp	/^        uint8_t length;$/;"	m	struct:__anon55	file:
length	.\lib\avr-stl\include\char_traits.h	/^  static size_t length(const _CharT* __s) {$/;"	f	class:__char_traits_base
length	.\lib\avr-stl\include\char_traits.h	/^  static size_t length(const char* __s) { return strlen(__s); }$/;"	f	class:char_traits
lerp15by12	.\lib\FastLED\noise.cpp	/^static int16_t inline __attribute__((always_inline)) lerp15by12( int16_t a, int16_t b, fract16 frac)$/;"	f	file:
lerp15by16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC int16_t lerp15by16( int16_t a, int16_t b, fract16 frac)$/;"	f
lerp15by8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC int16_t lerp15by8( int16_t a, int16_t b, fract8 frac)$/;"	f
lerp16	.\lib\FastLED\pixeltypes.h	/^    inline CRGB lerp16( const CRGB& other, fract16 frac) const$/;"	f	struct:CRGB
lerp16by16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t lerp16by16( uint16_t a, uint16_t b, fract16 frac)$/;"	f
lerp16by8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t lerp16by8( uint16_t a, uint16_t b, fract8 frac)$/;"	f
lerp7by8	.\lib\FastLED\noise.cpp	/^static int8_t inline __attribute__((always_inline)) lerp7by8( int8_t a, int8_t b, fract8 frac)$/;"	f	file:
lerp8	.\lib\FastLED\pixeltypes.h	/^    inline CRGB lerp8( const CRGB& other, fract8 frac) const$/;"	f	struct:CRGB
lerp8by8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t lerp8by8( uint8_t a, uint8_t b, fract8 frac)$/;"	f
less	.\lib\avr-stl\include\stl_function.h	/^struct less : public binary_function<_Tp,_Tp,bool> $/;"	s
less_equal	.\lib\avr-stl\include\stl_function.h	/^struct less_equal : public binary_function<_Tp,_Tp,bool> $/;"	s
lexicographical_compare	.\lib\avr-stl\include\stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
lexicographical_compare	.\lib\avr-stl\include\stl_algobase.h	/^inline bool lexicographical_compare(const char* __first1, const char* __last1,$/;"	f
lexicographical_compare	.\lib\avr-stl\include\stl_algobase.h	/^lexicographical_compare(const unsigned char* __first1,$/;"	f
lexicographical_compare_3way	.\lib\avr-stl\include\stl_algobase.h	/^int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
license	.\lib\FastLED\library.json	/^    "license": "MIT",$/;"	f
list	.\lib\avr-stl\include\stl_list.h	/^  explicit list(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^  explicit list(size_type __n)$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^  list(_InputIterator __first, _InputIterator __last,$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^  list(const _Tp* __first, const _Tp* __last,$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^  list(const list<_Tp, _Alloc>& __x) : _Base(__x.get_allocator())$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^  list(const_iterator __first, const_iterator __last,$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^  list(size_type __n, const _Tp& __value,$/;"	f	class:list
list	.\lib\avr-stl\include\stl_list.h	/^class list : protected _List_base<_Tp, _Alloc> {$/;"	c
lo	.\lib\FastLED\fastpin.h	/^	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }$/;"	f	class:FastPin
lo	.\lib\FastLED\fastpin.h	/^	inline static void lo() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
lo	.\lib\FastLED\fastpin.h	/^	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { *port &= ~sPinMask; }$/;"	f	class:FastPin
lo	.\lib\FastLED\fastpin.h	/^	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
lo	.\lib\FastLED\fastpin.h	/^	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }$/;"	f	class:Pin
lo	.\lib\FastLED\fastpin.h	/^	inline void lo(register port_ptr_t port) __attribute__ ((always_inline)) { *port &= ~mPinMask; }$/;"	f	class:Pin
lo	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void lo() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUTCLR= _MASK; }$/;"	f	class:_ARMPIN
lo	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }$/;"	f	class:_ARMPIN
lo	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void lo() __attribute__ ((always_inline)) { if (PIN < OUTPUT_PIN_LIMIT){ _GPB0._GPOC = MASK; } }$/;"	f	class:_ESPPIN
lo	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }$/;"	f	class:_ESPPIN
lo	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void lo() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPOC = MASK; } else { GP16O &= ~MASK; } }$/;"	f	class:_ESPPIN
lo	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }$/;"	f	class:_ESPPIN
loadAndScale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }$/;"	f	struct:PixelController
loadAndScale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc, int lane) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc, lane))); }$/;"	f	struct:PixelController
loadAndScale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc, int lane, uint8_t d, uint8_t scale) { return scale8(pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc, lane), d), scale); }$/;"	f	struct:PixelController
loadAndScale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc, int lane, uint8_t scale) { return scale8(pc.loadByte<SLOT>(pc, lane), scale); }$/;"	f	struct:PixelController
loadAndScale0	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale0() { return loadAndScale<0>(*this); }$/;"	f	struct:PixelController
loadAndScale0	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale0(int lane) { return loadAndScale<0>(*this, lane); }$/;"	f	struct:PixelController
loadAndScale1	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale1() { return loadAndScale<1>(*this); }$/;"	f	struct:PixelController
loadAndScale1	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale1(int lane) { return loadAndScale<1>(*this, lane); }$/;"	f	struct:PixelController
loadAndScale2	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale2() { return loadAndScale<2>(*this); }$/;"	f	struct:PixelController
loadAndScale2	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale2(int lane) { return loadAndScale<2>(*this, lane); }$/;"	f	struct:PixelController
loadByte	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }$/;"	f	struct:PixelController
loadByte	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }$/;"	f	struct:PixelController
loadDynamicGradientPalette	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )$/;"	f	class:CRGBPalette16
loadDynamicGradientPalette	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )$/;"	f	class:CRGBPalette256
loadDynamicGradientPalette	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )$/;"	f	class:CRGBPalette32
logfade12	.\lib\FastLED\noise.cpp	/^uint16_t logfade12(uint16_t val) {$/;"	f
logical_and	.\lib\avr-stl\include\stl_function.h	/^struct logical_and : public binary_function<_Tp,_Tp,bool>$/;"	s
logical_not	.\lib\avr-stl\include\stl_function.h	/^struct logical_not : public unary_function<_Tp,bool>$/;"	s
logical_or	.\lib\avr-stl\include\stl_function.h	/^struct logical_or : public binary_function<_Tp,_Tp,bool>$/;"	s
loval	.\lib\FastLED\fastpin.h	/^	port_t loval() __attribute__ ((always_inline)) { return *mPort & ~mPinMask; }$/;"	f	class:Pin
loval	.\lib\FastLED\fastpin.h	/^	static port_t loval() __attribute__ ((always_inline)) { return *sPort & ~sPinMask; }$/;"	f	class:FastPin
loval	.\lib\FastLED\fastpin.h	/^	static port_t loval() __attribute__ ((always_inline)) { return 0;}$/;"	f	class:FastPin
loval	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static port_t loval() __attribute__ ((always_inline)) { return FL_NRF_GPIO->OUT & ~_MASK; }$/;"	f	class:_ARMPIN
loval	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static port_t loval() __attribute__ ((always_inline)) { if (PIN<OUTPUT_PIN_LIMIT) { return GPIO_OUT_REG & ~MASK;   }}$/;"	f	class:_ESPPIN
loval	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static port_t loval() __attribute__ ((always_inline)) { if (PIN<16) { return GPO & ~MASK; } else { return GP16O & ~MASK; } }$/;"	f	class:_ESPPIN
lower_bound	.\lib\avr-stl\include\stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f
lower_bound	.\lib\avr-stl\include\stl_map.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:map
lower_bound	.\lib\avr-stl\include\stl_map.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:map
lower_bound	.\lib\avr-stl\include\stl_multimap.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:multimap
lower_bound	.\lib\avr-stl\include\stl_multimap.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:multimap
lower_bound	.\lib\avr-stl\include\stl_multiset.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:multiset
lower_bound	.\lib\avr-stl\include\stl_set.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:set
lower_bound	.\lib\avr-stl\include\stl_tree.h	/^  ::lower_bound(const _Key& __k) const$/;"	f	class:_Rb_tree
lower_bound	.\lib\avr-stl\include\stl_tree.h	/^  ::lower_bound(const _Key& __k)$/;"	f	class:_Rb_tree
lsrX4	.\lib\FastLED\colorutils.cpp	/^inline uint8_t lsrX4( uint8_t dividend)$/;"	f
lt	.\lib\avr-stl\include\char_traits.h	/^  static bool lt(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:__char_traits_base
mAdvance	.\lib\FastLED\controller.h	/^        int8_t mAdvance;$/;"	m	struct:PixelController
mData	.\lib\FastLED\controller.h	/^        const uint8_t *mData;$/;"	m	struct:PixelController
mInPort	.\lib\FastLED\fastpin.h	/^	volatile RoReg *mInPort;$/;"	m	class:Pin
mLastMicros	.\lib\FastLED\fastled_delay.h	/^	uint16_t mLastMicros;$/;"	m	class:CMinWait
mLen	.\lib\FastLED\controller.h	/^        int mLen,mLenRemaining;$/;"	m	struct:PixelController
mLenRemaining	.\lib\FastLED\controller.h	/^        int mLen,mLenRemaining;$/;"	m	struct:PixelController
mOffsets	.\lib\FastLED\controller.h	/^        int mOffsets[LANES];$/;"	m	struct:PixelController
mPeriod	.\lib\FastLED\lib8tion.h	/^    timeType mPeriod;$/;"	m	class:CEveryNTimePeriods
mPin	.\lib\FastLED\fastpin.h	/^	uint8_t mPin;$/;"	m	class:Pin
mPinMask	.\lib\FastLED\fastpin.h	/^	RwReg mPinMask;$/;"	m	class:Pin
mPinMask	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController
mPinMask	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	data_t mPinMask;$/;"	m	class:SixteenWayInlineBlockClocklessController
mPinMask	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController
mPinMask	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	data_t mPinMask;$/;"	m	class:SixteenWayInlineBlockClocklessController
mPinMask	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController
mPinMask	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    data_t mPinMask;$/;"	m	class:InlineBlockClocklessController
mPinMask	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    data_t mPinMask;$/;"	m	class:ClocklessController
mPinMask	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\fastpin.h	/^	volatile RwReg *mPort;$/;"	m	class:Pin
mPort	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController
mPort	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	data_ptr_t mPort;$/;"	m	class:SixteenWayInlineBlockClocklessController
mPort	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController
mPort	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	data_ptr_t mPort;$/;"	m	class:SixteenWayInlineBlockClocklessController
mPort	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController
mPort	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController
mPort	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    data_ptr_t mPort;$/;"	m	class:ClocklessController
mPort	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController
mPrevTrigger	.\lib\FastLED\lib8tion.h	/^    timeType mPrevTrigger;$/;"	m	class:CEveryNTimePeriods
mSPI	.\lib\FastLED\chipsets.h	/^	SPI mSPI;$/;"	m	class:APA102Controller
mSPI	.\lib\FastLED\chipsets.h	/^	SPI mSPI;$/;"	m	class:LPD8806Controller
mSPI	.\lib\FastLED\chipsets.h	/^	SPI mSPI;$/;"	m	class:P9813Controller
mSPI	.\lib\FastLED\chipsets.h	/^	SPI mSPI;$/;"	m	class:SK9822Controller
mSPI	.\lib\FastLED\chipsets.h	/^	SPI mSPI;$/;"	m	class:SM16716Controller
mSPI	.\lib\FastLED\chipsets.h	/^	SPI mSPI;$/;"	m	class:WS2801Controller
mSavedData	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  } mSavedData;$/;"	m	class:NRF51SPIOutput	typeref:struct:NRF51SPIOutput::saveData
mScale	.\lib\FastLED\controller.h	/^        CRGB mScale;$/;"	m	struct:PixelController
mWait	.\lib\FastLED\chipsets.h	/^	CMinWait<2000> mWait;$/;"	m	class:PixieController
mWait	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController
mWait	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:SixteenWayInlineBlockClocklessController
mWait	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController
mWait	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:SixteenWayInlineBlockClocklessController
mWait	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController
mWait	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	bool mWait;$/;"	m	class:AVRHardwareSPIOutput
mWait	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController
mWait	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWait	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController
mWait	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController
mWaitDelay	.\lib\FastLED\chipsets.h	/^	CMinWait<1000>  mWaitDelay;$/;"	m	class:WS2801Controller
m_ColorCorrection	.\lib\FastLED\controller.h	/^    CRGB m_ColorCorrection;$/;"	m	class:CLEDController
m_ColorTemperature	.\lib\FastLED\controller.h	/^    CRGB m_ColorTemperature;$/;"	m	class:CLEDController
m_Data	.\lib\FastLED\controller.h	/^    CRGB *m_Data;$/;"	m	class:CLEDController
m_DitherMode	.\lib\FastLED\controller.h	/^    EDitherMode m_DitherMode;$/;"	m	class:CLEDController
m_SPI	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	7;"	d
m_Scale	.\lib\FastLED\FastLED.h	/^	uint8_t  m_Scale; 				\/\/\/< The current global brightness scale setting$/;"	m	class:CFastLED
m_nFPS	.\lib\FastLED\FastLED.h	/^	uint16_t m_nFPS;					\/\/\/< Tracking for current FPS value$/;"	m	class:CFastLED
m_nLeds	.\lib\FastLED\controller.h	/^    int m_nLeds;$/;"	m	class:CLEDController
m_nMinMicros	.\lib\FastLED\FastLED.h	/^	uint32_t m_nMinMicros;		\/\/\/< minimum µs between frames, used for capping frame rates.$/;"	m	class:CFastLED
m_nPowerData	.\lib\FastLED\FastLED.h	/^	uint32_t m_nPowerData;		\/\/\/< max power use parameter$/;"	m	class:CFastLED
m_pHead	.\lib\FastLED\FastLED.cpp	/^CLEDController *CLEDController::m_pHead = NULL;$/;"	m	class:CLEDController	file:
m_pHead	.\lib\FastLED\controller.h	/^    static CLEDController *m_pHead;$/;"	m	class:CLEDController
m_pNext	.\lib\FastLED\controller.h	/^    CLEDController *m_pNext;$/;"	m	class:CLEDController
m_pPowerFunc	.\lib\FastLED\FastLED.h	/^	power_func m_pPowerFunc;	\/\/\/< function for overriding brightness when using FastLED.show();$/;"	m	class:CFastLED
m_pSelect	.\lib\FastLED\fastspi_bitbang.h	/^	Selectable 	*m_pSelect;$/;"	m	class:AVRSoftwareSPIOutput
m_pSelect	.\lib\FastLED\fastspi_nop.h	/^	Selectable *m_pSelect;$/;"	m	class:NOPSPIOutput
m_pSelect	.\lib\FastLED\fastspi_ref.h	/^	Selectable *m_pSelect;$/;"	m	class:REFHardwareSPIOutput
m_pSelect	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	Selectable *m_pSelect;$/;"	m	class:ARMHardwareSPIOutput
m_pSelect	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	Selectable *m_pSelect;$/;"	m	class:ARMHardwareSPIOutput
m_pSelect	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  Selectable *m_pSelect;$/;"	m	class:ARMHardwareSPIOutput
m_pSelect	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	Selectable *m_pSelect;$/;"	m	class:SAMHardwareSPIOutput
m_pSelect	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	Selectable *m_pSelect;$/;"	m	class:AVRHardwareSPIOutput
m_pSelect	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	Selectable *m_pSelect;$/;"	m	class:AVRUSART0SPIOutput
m_pSelect	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	Selectable *m_pSelect;$/;"	m	class:AVRUSART1SPIOutput
m_pTail	.\lib\FastLED\FastLED.cpp	/^CLEDController *CLEDController::m_pTail = NULL;$/;"	m	class:CLEDController	file:
m_pTail	.\lib\FastLED\controller.h	/^    static CLEDController *m_pTail;$/;"	m	class:CLEDController
maintainer	.\lib\FastLED\library.json	/^            "maintainer": true$/;"	f
maintainer	.\lib\RunningMedian\library.json	/^      "maintainer": true$/;"	f
make_heap	.\lib\avr-stl\include\stl_heap.h	/^make_heap(_RandomAccessIterator __first, $/;"	f
make_heap	.\lib\avr-stl\include\stl_heap.h	/^make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f
make_pair	.\lib\avr-stl\include\stl_pair.h	/^inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)$/;"	f
malloc_alloc	.\lib\avr-stl\include\stl_alloc.h	/^typedef __malloc_alloc_template<0> malloc_alloc;$/;"	t
mant16	.\lib\FastLED\lib8tion.h	/^        uint32_t mant16: 16;$/;"	m	struct:__anon30::__anon32
mant7	.\lib\FastLED\lib8tion.h	/^        uint32_t mant7 :  7;$/;"	m	struct:__anon30::__anon32
mant_hi16_exp_lo1	.\lib\FastLED\lib8tion.h	/^        uint32_t mant_hi16_exp_lo1 : 16;$/;"	m	struct:__anon30::__anon33
mant_lo8	.\lib\FastLED\lib8tion.h	/^        uint32_t mant_lo8 : 8;$/;"	m	struct:__anon30::__anon33
mantissa	.\lib\FastLED\lib8tion.h	/^        uint32_t mantissa: 23;$/;"	m	struct:__anon30::__anon31
map	.\lib\avr-stl\include\stl_map.h	/^  explicit map(const _Compare& __comp,$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(_InputIterator __first, _InputIterator __last)$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(const map<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(const value_type* __first, const value_type* __last)$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(const value_type* __first,$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(const_iterator __first, const_iterator __last)$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^  map(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:map
map	.\lib\avr-stl\include\stl_map.h	/^class map {$/;"	c
map8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t map8( uint8_t in, uint8_t rangeStart, uint8_t rangeEnd)$/;"	f
map_data_into_colors_through_palette	.\lib\FastLED\colorutils.h	/^void map_data_into_colors_through_palette($/;"	f
mapped_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:hash_map
mapped_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:hash_multimap
mapped_type	.\lib\avr-stl\include\stl_map.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:map
mapped_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:multimap
mark	.\lib\FastLED\fastled_delay.h	/^	void mark() { mLastMicros = micros() & 0xFFFF; }$/;"	f	class:CMinWait
mask	.\lib\FastLED\fastpin.h	/^	port_t mask() __attribute__ ((always_inline)) { return mPinMask; }$/;"	f	class:Pin
mask	.\lib\FastLED\fastpin.h	/^	static port_t mask() __attribute__ ((always_inline)) { return 0; }$/;"	f	class:FastPin
mask	.\lib\FastLED\fastpin.h	/^	static port_t mask() __attribute__ ((always_inline)) { return sPinMask; }$/;"	f	class:FastPin
mask	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static port_t mask() __attribute__ ((always_inline)) { return _MASK; }$/;"	f	class:_ARMPIN
mask	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static port_t mask() __attribute__ ((always_inline)) { return MASK; }$/;"	f	class:_ESPPIN
mask	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static port_t mask() __attribute__ ((always_inline)) { return MASK; }$/;"	f	class:_ESPPIN
matrix	.\lib\FastLED\platforms\arm\k20\smartmatrix_t3.h	/^  SmartMatrix matrix;$/;"	m	class:CSmartMatrixController
max	.\lib\avr-stl\include\stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b) {$/;"	f
max	.\lib\avr-stl\include\stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f
max	.\lib\avr-stl\include\stl_algobase.h	105;"	d
max	.\lib\avr-stl\include\stl_config.h	410;"	d
max_bucket_count	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_map
max_bucket_count	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_multimap
max_bucket_count	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_multiset
max_bucket_count	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_set
max_bucket_count	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type max_bucket_count() const$/;"	f	class:hashtable
max_element	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f
max_element	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last,$/;"	f
max_size	.\lib\avr-stl\include\stl_bvector.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:__BVECTOR
max_size	.\lib\avr-stl\include\stl_deque.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:deque
max_size	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_map
max_size	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_multimap
max_size	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_multiset
max_size	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_set
max_size	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:hashtable
max_size	.\lib\avr-stl\include\stl_list.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:list
max_size	.\lib\avr-stl\include\stl_map.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:map
max_size	.\lib\avr-stl\include\stl_multimap.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:multimap
max_size	.\lib\avr-stl\include\stl_multiset.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:multiset
max_size	.\lib\avr-stl\include\stl_set.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:set
max_size	.\lib\avr-stl\include\stl_slist.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:slist
max_size	.\lib\avr-stl\include\stl_tree.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:_Rb_tree
max_size	.\lib\avr-stl\include\stl_vector.h	/^  size_type max_size() const$/;"	f	class:vector
maximizeBrightness	.\lib\FastLED\pixeltypes.h	/^    inline void maximizeBrightness( uint8_t limit = 255 )  {$/;"	f	struct:CRGB
mem_fun1_ref_t	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_ref_t
mem_fun1_ref_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c
mem_fun1_ref_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c
mem_fun1_t	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_t
mem_fun1_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {$/;"	c
mem_fun1_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {$/;"	c
mem_fun_ref_t	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun_ref_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_ref_t
mem_fun_ref_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c
mem_fun_ref_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c
mem_fun_t	.\lib\avr-stl\include\stl_function.h	/^  explicit mem_fun_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_t
mem_fun_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun_t : public unary_function<_Tp*,_Ret> {$/;"	c
mem_fun_t	.\lib\avr-stl\include\stl_function.h	/^class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {$/;"	c
memcpy8	.\lib\FastLED\lib8tion.cpp	/^void * memcpy8 ( void * dst, const void* src, uint16_t num )$/;"	f
memcpy8	.\lib\FastLED\lib8tion.h	437;"	d
memmove8	.\lib\FastLED\lib8tion.cpp	/^void * memmove8 ( void * dst, const void* src, uint16_t num )$/;"	f
memmove8	.\lib\FastLED\lib8tion.h	436;"	d
memset8	.\lib\FastLED\lib8tion.cpp	/^void * memset8 ( void * ptr, uint8_t val, uint16_t num )$/;"	f
memset8	.\lib\FastLED\lib8tion.h	438;"	d
merge	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
merge	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x)$/;"	f	class:list
merge	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x,$/;"	f	class:list
merge	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x)$/;"	f	class:slist
merge	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x,$/;"	f	class:slist
min	.\lib\avr-stl\include\stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b) {$/;"	f
min	.\lib\avr-stl\include\stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f
min	.\lib\avr-stl\include\stl_algobase.h	104;"	d
min	.\lib\avr-stl\include\stl_config.h	409;"	d
min_element	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f
min_element	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last,$/;"	f
minus	.\lib\avr-stl\include\stl_function.h	/^struct minus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s
minutes16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t minutes16()$/;"	f
mismatch	.\lib\avr-stl\include\stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f
miso	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^    uint32_t miso;$/;"	m	struct:NRF51SPIOutput::saveData
mod8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t mod8( uint8_t a, uint8_t m)$/;"	f
modulus	.\lib\avr-stl\include\stl_function.h	/^struct modulus : public binary_function<_Tp,_Tp,_Tp> $/;"	s
mosi	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^    uint32_t mosi;$/;"	m	struct:NRF51SPIOutput::saveData
move	.\lib\avr-stl\include\char_traits.h	/^  static _CharT* move(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base
move	.\src\Enemy.h	/^int Enemy::move(int playerPosition, int tick) {$/;"	f	class:Enemy
move	.\src\Player.h	/^void Player::move(int input) {$/;"	f	class:Player
mul8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t mul8( uint8_t i, uint8_t j)$/;"	f
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  explicit multimap(const _Compare& __comp,$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap() : _M_t(_Compare(), allocator_type()) { }$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) { }$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last)$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last,$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last)$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last,$/;"	f	class:multimap
multimap	.\lib\avr-stl\include\stl_multimap.h	/^class multimap {$/;"	c
multiplies	.\lib\avr-stl\include\stl_function.h	/^struct multiplies : public binary_function<_Tp,_Tp,_Tp> {$/;"	s
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  explicit multiset(const _Compare& __comp,$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(const multiset<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last)$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last,$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last)$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last,$/;"	f	class:multiset
multiset	.\lib\avr-stl\include\stl_multiset.h	/^class multiset {$/;"	c
name	.\lib\FastLED\library.json	/^            "name": "Daniel Garcia",$/;"	f
name	.\lib\FastLED\library.json	/^            "name": "Mark Kriegsman",$/;"	f
name	.\lib\FastLED\library.json	/^    "name": "FastLED",$/;"	f
name	.\lib\I2Cdev\library.json	/^  "name": "I2Cdevlib-Core",$/;"	f
name	.\lib\RunningMedian\library.json	/^      "name": "Rob Tillaart",$/;"	f
name	.\lib\RunningMedian\library.json	/^  "name": "RunningMedian",$/;"	f
napplyGamma_video	.\lib\FastLED\colorutils.cpp	/^CRGB& napplyGamma_video( CRGB& rgb, float gamma)$/;"	f
napplyGamma_video	.\lib\FastLED\colorutils.cpp	/^CRGB& napplyGamma_video( CRGB& rgb, float gammaR, float gammaG, float gammaB)$/;"	f
napplyGamma_video	.\lib\FastLED\colorutils.cpp	/^void napplyGamma_video( CRGB* rgbarray, uint16_t count, float gamma)$/;"	f
napplyGamma_video	.\lib\FastLED\colorutils.cpp	/^void napplyGamma_video( CRGB* rgbarray, uint16_t count, float gammaR, float gammaG, float gammaB)$/;"	f
napplyGamma_video	.\lib\FastLED\pixelset.h	/^  inline CPixelView & napplyGamma_video(float gamma) {$/;"	f	class:CPixelView
napplyGamma_video	.\lib\FastLED\pixelset.h	/^  inline CPixelView & napplyGamma_video(float gammaR, float gammaG, float gammaB) {$/;"	f	class:CPixelView
nbendTransmission	.\lib\I2Cdev\I2Cdev.cpp	/^    void TwoWire::nbendTransmission(void (*function)(int)) {$/;"	f	class:TwoWire
nblend	.\lib\FastLED\colorutils.cpp	/^CHSV& nblend( CHSV& existing, const CHSV& overlay, fract8 amountOfOverlay, TGradientDirectionCode directionCode)$/;"	f
nblend	.\lib\FastLED\colorutils.cpp	/^CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )$/;"	f
nblend	.\lib\FastLED\colorutils.cpp	/^void nblend( CHSV* existing, CHSV* overlay, uint16_t count, fract8 amountOfOverlay, TGradientDirectionCode directionCode )$/;"	f
nblend	.\lib\FastLED\colorutils.cpp	/^void nblend( CRGB* existing, CRGB* overlay, uint16_t count, fract8 amountOfOverlay)$/;"	f
nblend	.\lib\FastLED\pixelset.h	/^  inline CPixelView & nblend(const CPixelView & rhs, fract8 amountOfOverlay) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { ::nblend((*pixel), (*rhspixel), amountOfOverlay); } return *this; }$/;"	f	class:CPixelView
nblend	.\lib\FastLED\pixelset.h	/^  inline CPixelView & nblend(const PIXEL_TYPE & overlay, fract8 amountOfOverlay) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { ::nblend((*pixel), overlay, amountOfOverlay); } return *this; }$/;"	f	class:CPixelView
nblendPaletteTowardPalette	.\lib\FastLED\colorutils.cpp	/^void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)$/;"	f
nbrequestFrom	.\lib\I2Cdev\I2Cdev.cpp	/^    void TwoWire::nbrequestFrom(uint8_t address, int quantity, void (*function)(int)) {$/;"	f	class:TwoWire
needwait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }$/;"	f	class:ARMHardwareSPIOutput
needwait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }$/;"	f	class:ARMHardwareSPIOutput
negate	.\lib\avr-stl\include\stl_function.h	/^struct negate : public unary_function<_Tp,_Tp> $/;"	s
neoPixelType	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^typedef uint16_t neoPixelType;$/;"	t
neoPixelType	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^typedef uint8_t  neoPixelType;$/;"	t
next	.\lib\FastLED\controller.h	/^    CLEDController *next() { return m_pNext; }$/;"	f	class:CLEDController
next_permutation	.\lib\avr-stl\include\stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f
next_permutation	.\lib\avr-stl\include\stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f
nmax	.\lib\FastLED\noise.cpp	/^int32_t nmax=0;$/;"	v
nmin	.\lib\FastLED\noise.cpp	/^int32_t nmin=11111110;$/;"	v
noToneAC	.\lib\toneAC\toneAC.cpp	/^void noToneAC() {$/;"	f
normalize	.\lib\MPU6050\helper_3dmath.h	/^        void normalize() {$/;"	f	class:Quaternion
normalize	.\lib\MPU6050\helper_3dmath.h	/^        void normalize() {$/;"	f	class:VectorFloat
normalize	.\lib\MPU6050\helper_3dmath.h	/^        void normalize() {$/;"	f	class:VectorInt16
not1	.\lib\avr-stl\include\stl_function.h	/^not1(const _Predicate& __pred)$/;"	f
not2	.\lib\avr-stl\include\stl_function.h	/^not2(const _Predicate& __pred)$/;"	f
not_eof	.\lib\avr-stl\include\char_traits.h	/^  static int_type not_eof(const int_type& __c) {$/;"	f	class:__char_traits_base
not_equal_to	.\lib\avr-stl\include\stl_function.h	/^struct not_equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s
nscale8	.\lib\FastLED\colorutils.cpp	/^void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)$/;"	f
nscale8	.\lib\FastLED\pixelset.h	/^  inline CPixelView & nscale8(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel).nscale8((*rhspixel)); } return *this; }$/;"	f	class:CPixelView
nscale8	.\lib\FastLED\pixelset.h	/^  inline CPixelView & nscale8(PIXEL_TYPE & scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8(scaledown); } return *this; }$/;"	f	class:CPixelView
nscale8	.\lib\FastLED\pixelset.h	/^  inline CPixelView & nscale8(uint8_t scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8(scaledown); } return *this; }$/;"	f	class:CPixelView
nscale8	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& nscale8 (const CRGB & scaledown )$/;"	f	struct:CRGB
nscale8	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& nscale8 (uint8_t scaledown )$/;"	f	struct:CRGB
nscale8_LEAVING_R1_DIRTY	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE void nscale8_LEAVING_R1_DIRTY( uint8_t& i, fract8 scale)$/;"	f
nscale8_raw	.\lib\FastLED\colorutils.cpp	/^void nscale8_raw( CRGB* leds, uint16_t num_leds, uint8_t scale)$/;"	f
nscale8_video	.\lib\FastLED\colorutils.cpp	/^void nscale8_video( CRGB* leds, uint16_t num_leds, uint8_t scale)$/;"	f
nscale8_video	.\lib\FastLED\pixelset.h	/^  inline CPixelView & nscale8_video(uint8_t scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8_video(scaledown); } return *this;}$/;"	f	class:CPixelView
nscale8_video	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& nscale8_video (uint8_t scaledown )$/;"	f	struct:CRGB
nscale8_video_LEAVING_R1_DIRTY	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE void nscale8_video_LEAVING_R1_DIRTY( uint8_t & i, fract8 scale)$/;"	f
nscale8x2	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC void nscale8x2( uint8_t& i, uint8_t& j, fract8 scale)$/;"	f
nscale8x2_video	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC void nscale8x2_video( uint8_t& i, uint8_t& j, fract8 scale)$/;"	f
nscale8x3	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)$/;"	f
nscale8x3_video	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)$/;"	f
nth_element	.\lib\avr-stl\include\stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f
numBytes	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    numBytes;      \/\/ Size of 'pixels' buffer below (3 or 4 bytes\/pixel)$/;"	m	class:Adafruit_NeoPixel
numLEDs	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    numLEDs,       \/\/ Number of RGB LEDs in strip$/;"	m	class:Adafruit_NeoPixel
numPixels	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint16_t Adafruit_NeoPixel::numPixels(void) const {$/;"	f	class:Adafruit_NeoPixel
off_type	.\lib\avr-stl\include\char_traits.h	/^	typedef char_traits_off_type off_type;$/;"	t	class:__char_traits_base
off_type	.\lib\avr-stl\include\char_traits.h	/^  typedef streamoff off_type;$/;"	t	class:__char_traits_base
op	.\lib\avr-stl\include\stl_function.h	/^  _Operation op;$/;"	m	class:binder1st
op	.\lib\avr-stl\include\stl_function.h	/^  _Operation op;$/;"	m	class:binder2nd
operator !=	.\lib\FastLED\colorutils.h	/^    bool operator!=( const CHSVPalette16 rhs)$/;"	f	class:CHSVPalette16
operator !=	.\lib\FastLED\colorutils.h	/^    bool operator!=( const CHSVPalette256 rhs)$/;"	f	class:CHSVPalette256
operator !=	.\lib\FastLED\colorutils.h	/^    bool operator!=( const CHSVPalette32 rhs)$/;"	f	class:CHSVPalette32
operator !=	.\lib\FastLED\colorutils.h	/^    bool operator!=( const CRGBPalette16 rhs)$/;"	f	class:CRGBPalette16
operator !=	.\lib\FastLED\colorutils.h	/^    bool operator!=( const CRGBPalette256 rhs)$/;"	f	class:CRGBPalette256
operator !=	.\lib\FastLED\colorutils.h	/^    bool operator!=( const CRGBPalette32 rhs)$/;"	f	class:CRGBPalette32
operator !=	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline bool operator!=(pixelset_iterator_base & other) const { return leds != other.leds; } \/\/ || set != other.set; }$/;"	f	class:CPixelView::pixelset_iterator_base
operator !=	.\lib\FastLED\pixelset.h	/^  bool operator!=(const CPixelView & rhs) const { return leds != rhs.leds || len != rhs.len || dir != rhs.dir; }$/;"	f	class:CPixelView
operator !=	.\lib\FastLED\pixeltypes.h	/^inline __attribute__((always_inline)) bool operator!= (const CRGB& lhs, const CRGB& rhs)$/;"	f
operator !=	.\lib\avr-stl\include\stl_alloc.h	/^inline bool operator!=(const __default_alloc_template<__threads, __inst>&,$/;"	f
operator !=	.\lib\avr-stl\include\stl_alloc.h	/^inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f
operator !=	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator!=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base
operator !=	.\lib\avr-stl\include\stl_bvector.h	/^operator!=(const bit_vector& __x, const bit_vector& __y)$/;"	f
operator !=	.\lib\avr-stl\include\stl_deque.h	/^  bool operator!=(const _Self& __x) const { return !(*this == __x); }$/;"	f	struct:_Deque_iterator
operator !=	.\lib\avr-stl\include\stl_deque.h	/^inline bool operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f
operator !=	.\lib\avr-stl\include\stl_hash_map.h	/^operator!=(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f
operator !=	.\lib\avr-stl\include\stl_hash_map.h	/^operator!=(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f
operator !=	.\lib\avr-stl\include\stl_hash_set.h	/^operator!=(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f
operator !=	.\lib\avr-stl\include\stl_hash_set.h	/^operator!=(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f
operator !=	.\lib\avr-stl\include\stl_hashtable.h	/^  bool operator!=(const const_iterator& __it) const $/;"	f	struct:_Hashtable_const_iterator
operator !=	.\lib\avr-stl\include\stl_hashtable.h	/^  bool operator!=(const iterator& __it) const$/;"	f	struct:_Hashtable_iterator
operator !=	.\lib\avr-stl\include\stl_hashtable.h	/^inline bool operator!=(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f
operator !=	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator!=($/;"	f
operator !=	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator!=(const istream_iterator<_Tp, _Distance>& __x,$/;"	f
operator !=	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f
operator !=	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator!=(const reverse_iterator<_Iterator>& __x, $/;"	f
operator !=	.\lib\avr-stl\include\stl_iterator.h	/^operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f
operator !=	.\lib\avr-stl\include\stl_iterator.h	/^operator!=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator !=	.\lib\avr-stl\include\stl_list.h	/^  bool operator!=(const _List_iterator_base& __x) const {$/;"	f	struct:_List_iterator_base
operator !=	.\lib\avr-stl\include\stl_list.h	/^inline bool operator!=(const list<_Tp,_Alloc>& __x,$/;"	f
operator !=	.\lib\avr-stl\include\stl_map.h	/^inline bool operator!=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator !=	.\lib\avr-stl\include\stl_multimap.h	/^inline bool operator!=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator !=	.\lib\avr-stl\include\stl_multiset.h	/^inline bool operator!=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
operator !=	.\lib\avr-stl\include\stl_pair.h	/^inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f
operator !=	.\lib\avr-stl\include\stl_queue.h	/^operator!=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f
operator !=	.\lib\avr-stl\include\stl_relops.h	/^inline bool operator!=(const _Tp& __x, const _Tp& __y) {$/;"	f
operator !=	.\lib\avr-stl\include\stl_set.h	/^inline bool operator!=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f
operator !=	.\lib\avr-stl\include\stl_slist.h	/^  bool operator!=(const _Slist_iterator_base& __x) const {$/;"	f	struct:_Slist_iterator_base
operator !=	.\lib\avr-stl\include\stl_slist.h	/^operator!=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f
operator !=	.\lib\avr-stl\include\stl_stack.h	/^bool operator!=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f
operator !=	.\lib\avr-stl\include\stl_tree.h	/^inline bool operator!=(const _Rb_tree_base_iterator& __x,$/;"	f
operator !=	.\lib\avr-stl\include\stl_tree.h	/^operator!=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
operator !=	.\lib\avr-stl\include\stl_vector.h	/^operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f
operator %	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator%( const CRGB& p1, uint8_t d)$/;"	f
operator %=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator%=(uint8_t scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8_video(scaledown); } return *this; }$/;"	f	class:CPixelView
operator %=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator%= (uint8_t scaledown )$/;"	f	struct:CRGB
operator &	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator&( const CRGB& p1, const CRGB& p2)$/;"	f
operator &=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator&=(const CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) &= (*rhspixel); } return *this; }$/;"	f	class:CPixelView
operator &=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator&=(const PIXEL_TYPE & rhs) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) &= rhs; } return *this; }$/;"	f	class:CPixelView
operator &=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator&=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) &= d; } return *this; }$/;"	f	class:CPixelView
operator &=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator&= (const CRGB& rhs )$/;"	f	struct:CRGB
operator &=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator&= (uint8_t d )$/;"	f	struct:CRGB
operator ()	.\lib\FastLED\pixelset.h	/^  inline CPixelView operator()(int start, int end) { return CPixelView(leds, start, end); }$/;"	f	class:CPixelView
operator ()	.\lib\avr-stl\include\stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Eq_int_traits
operator ()	.\lib\avr-stl\include\stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Eq_traits
operator ()	.\lib\avr-stl\include\stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Lt_traits
operator ()	.\lib\avr-stl\include\stl_function.h	/^    _Result operator()(_Arg1 __x, _Arg2 __y) const {$/;"	f	class:pointer_to_binary_function
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }$/;"	f	struct:_Project1st
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }$/;"	f	struct:_Project2nd
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Result operator()(_Arg __x) const { return _M_ptr(__x); }$/;"	f	class:pointer_to_unary_function
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:mem_fun_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:mem_fun1_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:mem_fun_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }$/;"	f	class:mem_fun1_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:const_mem_fun_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:const_mem_fun1_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:const_mem_fun_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Ret operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:const_mem_fun1_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Tp operator()(const _Tp& __x) const { return -__x; }$/;"	f	struct:negate
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }$/;"	f	struct:modulus
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }$/;"	f	struct:multiplies
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }$/;"	f	struct:plus
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }$/;"	f	struct:minus
operator ()	.\lib\avr-stl\include\stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x \/ __y; }$/;"	f	struct:divides
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x) const { return !__x; }$/;"	f	struct:logical_not
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }$/;"	f	struct:not_equal_to
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }$/;"	f	struct:logical_and
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }$/;"	f	struct:less
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }$/;"	f	struct:less_equal
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }$/;"	f	struct:equal_to
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }$/;"	f	struct:greater
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }$/;"	f	struct:greater_equal
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }$/;"	f	struct:logical_or
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const typename _Predicate::argument_type& __x) const {$/;"	f	class:unary_negate
operator ()	.\lib\avr-stl\include\stl_function.h	/^  bool operator()(const typename _Predicate::first_argument_type& __x, $/;"	f	class:binary_negate
operator ()	.\lib\avr-stl\include\stl_function.h	/^  const _Tp& operator()(const _Tp& __x) const { return __x; }$/;"	f	struct:_Identity
operator ()	.\lib\avr-stl\include\stl_function.h	/^  const result_type& operator()() const { return _M_val; }$/;"	f	struct:_Constant_void_fun
operator ()	.\lib\avr-stl\include\stl_function.h	/^  const result_type& operator()(const _Arg1&, const _Arg2&) const {$/;"	f	struct:_Constant_binary_fun
operator ()	.\lib\avr-stl\include\stl_function.h	/^  const result_type& operator()(const _Argument&) const { return _M_val; }$/;"	f	struct:_Constant_unary_fun
operator ()	.\lib\avr-stl\include\stl_function.h	/^  const typename _Pair::first_type& operator()(const _Pair& __x) const {$/;"	f	struct:_Select1st
operator ()	.\lib\avr-stl\include\stl_function.h	/^  const typename _Pair::second_type& operator()(const _Pair& __x) const {$/;"	f	struct:_Select2nd
operator ()	.\lib\avr-stl\include\stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:binary_compose
operator ()	.\lib\avr-stl\include\stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:unary_compose
operator ()	.\lib\avr-stl\include\stl_function.h	/^  operator()(const typename _Operation::first_argument_type& __x) const {$/;"	f	class:binder2nd
operator ()	.\lib\avr-stl\include\stl_function.h	/^  operator()(const typename _Operation::second_argument_type& __x) const {$/;"	f	class:binder1st
operator ()	.\lib\avr-stl\include\stl_function.h	/^  unsigned int operator()(unsigned int __limit) {$/;"	f	class:subtractive_rng
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:mem_fun_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:mem_fun1_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:mem_fun_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:mem_fun1_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:const_mem_fun_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:const_mem_fun1_ref_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:const_mem_fun_t
operator ()	.\lib\avr-stl\include\stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:const_mem_fun1_t
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(char __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(int __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(long __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(short __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(unsigned char __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(unsigned int __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(unsigned long __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_hash_fun.h	/^  size_t operator()(unsigned short __x) const { return __x; }$/;"	f	struct:hash
operator ()	.\lib\avr-stl\include\stl_map.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:map::value_compare
operator ()	.\lib\avr-stl\include\stl_multimap.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:multimap::value_compare
operator *	.\lib\FastLED\lib8tion.h	/^  int operator*(int v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q
operator *	.\lib\FastLED\lib8tion.h	/^  int16_t operator*(int16_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q
operator *	.\lib\FastLED\lib8tion.h	/^  int32_t operator*(int32_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q
operator *	.\lib\FastLED\lib8tion.h	/^  uint16_t operator*(uint16_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q
operator *	.\lib\FastLED\lib8tion.h	/^  uint32_t operator*(uint32_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q
operator *	.\lib\FastLED\lib8tion.h	/^template<class T, int F, int I> static int operator*(int v, q<T,F,I> & q) { return q * v; }$/;"	f
operator *	.\lib\FastLED\lib8tion.h	/^template<class T, int F, int I> static int16_t operator*(int16_t v, q<T,F,I> & q) { return q * v; }$/;"	f
operator *	.\lib\FastLED\lib8tion.h	/^template<class T, int F, int I> static int32_t operator*(int32_t v, q<T,F,I> & q) { return q * v; }$/;"	f
operator *	.\lib\FastLED\lib8tion.h	/^template<class T, int F, int I> static uint16_t operator*(uint16_t v, q<T,F,I> & q) { return q * v; }$/;"	f
operator *	.\lib\FastLED\lib8tion.h	/^template<class T, int F, int I> static uint32_t operator*(uint32_t v, q<T,F,I> & q) { return q * v; }$/;"	f
operator *	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline PIXEL_TYPE& operator*() const { return *leds; }$/;"	f	class:CPixelView::pixelset_iterator_base
operator *	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator*( const CRGB& p1, uint8_t d)$/;"	f
operator *	.\lib\avr-stl\include\stl_bvector.h	/^  const_reference operator*() const {$/;"	f	struct:_Bit_const_iterator
operator *	.\lib\avr-stl\include\stl_bvector.h	/^  reference operator*() const { return reference(_M_p, 1U << _M_offset); }$/;"	f	struct:_Bit_iterator
operator *	.\lib\avr-stl\include\stl_deque.h	/^  reference operator*() const { return *_M_cur; }$/;"	f	struct:_Deque_iterator
operator *	.\lib\avr-stl\include\stl_hash_map.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator
operator *	.\lib\avr-stl\include\stl_hash_set.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator
operator *	.\lib\avr-stl\include\stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:_Hashtable_const_iterator
operator *	.\lib\avr-stl\include\stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:_Hashtable_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  _Reference operator*() const { return *(current - 1); }$/;"	f	class:reverse_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  _Reference operator*() const {$/;"	f	class:reverse_bidirectional_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  back_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:back_insert_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  char_type operator*() const $/;"	f	class:istreambuf_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  front_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:front_insert_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator<_Tp>& operator*() { return *this; }$/;"	f	class:ostream_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  ostreambuf_iterator& operator*()     { return *this; }$/;"	f	class:ostreambuf_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  reference operator*() const { return _M_value; }$/;"	f	class:istream_iterator
operator *	.\lib\avr-stl\include\stl_iterator.h	/^  reference operator*() const {$/;"	f	class:reverse_iterator
operator *	.\lib\avr-stl\include\stl_list.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:_List_iterator
operator *	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  raw_storage_iterator& operator*() { return *this; }$/;"	f	class:raw_storage_iterator
operator *	.\lib\avr-stl\include\stl_slist.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator
operator *	.\lib\avr-stl\include\stl_slist.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:_Slist_iterator
operator *	.\lib\avr-stl\include\stl_tree.h	/^  reference operator*() const { return _Link_type(_M_node)->_M_value_field; }$/;"	f	struct:_Rb_tree_iterator
operator *=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator*=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) *= d; } return *this; }$/;"	f	class:CPixelView
operator *=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator*= (uint8_t d )$/;"	f	struct:CRGB
operator +	.\lib\FastLED\pixelset.h	/^inline CRGB *operator+(const CRGBSet & pixels, int offset) { return (CRGB*)pixels + offset; }$/;"	f
operator +	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator+( const CRGB& p1, const CRGB& p2)$/;"	f
operator +	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator operator+(difference_type __i) const {$/;"	f	struct:_Bit_const_iterator
operator +	.\lib\avr-stl\include\stl_bvector.h	/^  iterator operator+(difference_type __i) const {$/;"	f	struct:_Bit_iterator
operator +	.\lib\avr-stl\include\stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_const_iterator& __x) { return __x + __n; }$/;"	f
operator +	.\lib\avr-stl\include\stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_iterator& __x) { return __x + __n; }$/;"	f
operator +	.\lib\avr-stl\include\stl_deque.h	/^  _Self operator+(difference_type __n) const$/;"	f	struct:_Deque_iterator
operator +	.\lib\avr-stl\include\stl_deque.h	/^operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f
operator +	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator+(_Distance __n) const {$/;"	f	class:reverse_iterator
operator +	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator+(difference_type __n) const {$/;"	f	class:reverse_iterator
operator +	.\lib\avr-stl\include\stl_iterator.h	/^operator+(_Dist __n,$/;"	f
operator +	.\lib\avr-stl\include\stl_iterator.h	/^operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f
operator ++	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline pixelset_iterator_base operator++(int) { pixelset_iterator_base tmp(*this); leds += dir; return tmp; }$/;"	f	class:CPixelView::pixelset_iterator_base
operator ++	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline pixelset_iterator_base& operator++() { leds += dir; return *this; }$/;"	f	class:CPixelView::pixelset_iterator_base
operator ++	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator++() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)++; } return *this; }$/;"	f	class:CPixelView
operator ++	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator++(int DUMMY_ARG) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)++; } return *this; }$/;"	f	class:CPixelView
operator ++	.\lib\FastLED\pixeltypes.h	/^    inline CRGB operator++ (int )  __attribute__((always_inline))$/;"	f	struct:CRGB
operator ++	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator++ ()  __attribute__((always_inline))$/;"	f	struct:CRGB
operator ++	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator operator++(int) {$/;"	f	struct:_Bit_const_iterator
operator ++	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator& operator++() {$/;"	f	struct:_Bit_const_iterator
operator ++	.\lib\avr-stl\include\stl_bvector.h	/^  iterator operator++(int) {$/;"	f	struct:_Bit_iterator
operator ++	.\lib\avr-stl\include\stl_bvector.h	/^  iterator& operator++() {$/;"	f	struct:_Bit_iterator
operator ++	.\lib\avr-stl\include\stl_deque.h	/^  _Self operator++(int)  {$/;"	f	struct:_Deque_iterator
operator ++	.\lib\avr-stl\include\stl_deque.h	/^  _Self& operator++() {$/;"	f	struct:_Deque_iterator
operator ++	.\lib\avr-stl\include\stl_hash_map.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_hash_map.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_hash_set.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_hash_set.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:_Hashtable_const_iterator
operator ++	.\lib\avr-stl\include\stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:_Hashtable_const_iterator
operator ++	.\lib\avr-stl\include\stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:_Hashtable_iterator
operator ++	.\lib\avr-stl\include\stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:_Hashtable_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:reverse_bidirectional_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:reverse_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:reverse_bidirectional_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:reverse_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  back_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:back_insert_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  back_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:back_insert_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  front_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:front_insert_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  front_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:front_insert_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator operator++(int)  {$/;"	f	class:istream_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator& operator++() { $/;"	f	class:istream_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator<_Tp, _Dist> operator++(int)  {$/;"	f	class:istream_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  istream_iterator<_Tp, _Dist>& operator++() { $/;"	f	class:istream_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  istreambuf_iterator  operator++(int) {$/;"	f	class:istreambuf_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  istreambuf_iterator& operator++() { this->_M_nextc(); return *this; }$/;"	f	class:istreambuf_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator<_Tp>& operator++() { return *this; } $/;"	f	class:ostream_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator<_Tp>& operator++(int) { return *this; } $/;"	f	class:ostream_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  ostreambuf_iterator& operator++()    { return *this; }$/;"	f	class:ostreambuf_iterator
operator ++	.\lib\avr-stl\include\stl_iterator.h	/^  ostreambuf_iterator& operator++(int) { return *this; }$/;"	f	class:ostreambuf_iterator
operator ++	.\lib\avr-stl\include\stl_list.h	/^  _Self operator++(int) { $/;"	f	struct:_List_iterator
operator ++	.\lib\avr-stl\include\stl_list.h	/^  _Self& operator++() { $/;"	f	struct:_List_iterator
operator ++	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp> operator++(int) {$/;"	f	class:raw_storage_iterator
operator ++	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp>& operator++() {$/;"	f	class:raw_storage_iterator
operator ++	.\lib\avr-stl\include\stl_slist.h	/^  _Self operator++(int)$/;"	f	struct:_Slist_iterator
operator ++	.\lib\avr-stl\include\stl_slist.h	/^  _Self& operator++()$/;"	f	struct:_Slist_iterator
operator ++	.\lib\avr-stl\include\stl_slist.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_slist.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator
operator ++	.\lib\avr-stl\include\stl_tree.h	/^  _Self operator++(int) {$/;"	f	struct:_Rb_tree_iterator
operator ++	.\lib\avr-stl\include\stl_tree.h	/^  _Self& operator++() { _M_increment(); return *this; }$/;"	f	struct:_Rb_tree_iterator
operator +=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator+=(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) += (*rhspixel); } return *this; }$/;"	f	class:CPixelView
operator +=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator+= (const CRGB& rhs )$/;"	f	struct:CRGB
operator +=	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator& operator+=(difference_type __i) {$/;"	f	struct:_Bit_const_iterator
operator +=	.\lib\avr-stl\include\stl_bvector.h	/^  iterator& operator+=(difference_type __i) {$/;"	f	struct:_Bit_iterator
operator +=	.\lib\avr-stl\include\stl_deque.h	/^  _Self& operator+=(difference_type __n)$/;"	f	struct:_Deque_iterator
operator +=	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator+=(_Distance __n) {$/;"	f	class:reverse_iterator
operator +=	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator+=(difference_type __n) {$/;"	f	class:reverse_iterator
operator -	.\lib\FastLED\pixelset.h	/^  inline CPixelView operator-() { return CPixelView(leds + len - dir, len - dir, 0); }$/;"	f	class:CPixelView
operator -	.\lib\FastLED\pixeltypes.h	/^    inline CRGB operator- ()$/;"	f	struct:CRGB
operator -	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator-( const CRGB& p1, const CRGB& p2)$/;"	f
operator -	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator operator-(difference_type __i) const {$/;"	f	struct:_Bit_const_iterator
operator -	.\lib\avr-stl\include\stl_bvector.h	/^  iterator operator-(difference_type __i) const {$/;"	f	struct:_Bit_iterator
operator -	.\lib\avr-stl\include\stl_bvector.h	/^operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {$/;"	f
operator -	.\lib\avr-stl\include\stl_deque.h	/^  _Self operator-(difference_type __n) const {$/;"	f	struct:_Deque_iterator
operator -	.\lib\avr-stl\include\stl_deque.h	/^  difference_type operator-(const _Self& __x) const {$/;"	f	struct:_Deque_iterator
operator -	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator-(_Distance __n) const {$/;"	f	class:reverse_iterator
operator -	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator-(difference_type __n) const {$/;"	f	class:reverse_iterator
operator -	.\lib\avr-stl\include\stl_iterator.h	/^operator-(const reverse_iterator<_Iterator>& __x, $/;"	f
operator -	.\lib\avr-stl\include\stl_iterator.h	/^operator-(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator --	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator--() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)--; } return *this; }$/;"	f	class:CPixelView
operator --	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator--(int DUMMY_ARG) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)--; } return *this; }$/;"	f	class:CPixelView
operator --	.\lib\FastLED\pixeltypes.h	/^    inline CRGB operator-- (int )  __attribute__((always_inline))$/;"	f	struct:CRGB
operator --	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator-- ()  __attribute__((always_inline))$/;"	f	struct:CRGB
operator --	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator operator--(int) {$/;"	f	struct:_Bit_const_iterator
operator --	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator& operator--() {$/;"	f	struct:_Bit_const_iterator
operator --	.\lib\avr-stl\include\stl_bvector.h	/^  iterator operator--(int) {$/;"	f	struct:_Bit_iterator
operator --	.\lib\avr-stl\include\stl_bvector.h	/^  iterator& operator--() {$/;"	f	struct:_Bit_iterator
operator --	.\lib\avr-stl\include\stl_deque.h	/^  _Self operator--(int) {$/;"	f	struct:_Deque_iterator
operator --	.\lib\avr-stl\include\stl_deque.h	/^  _Self& operator--() {$/;"	f	struct:_Deque_iterator
operator --	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:reverse_bidirectional_iterator
operator --	.\lib\avr-stl\include\stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:reverse_iterator
operator --	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:reverse_bidirectional_iterator
operator --	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:reverse_iterator
operator --	.\lib\avr-stl\include\stl_list.h	/^  _Self operator--(int) { $/;"	f	struct:_List_iterator
operator --	.\lib\avr-stl\include\stl_list.h	/^  _Self& operator--() { $/;"	f	struct:_List_iterator
operator --	.\lib\avr-stl\include\stl_tree.h	/^  _Self operator--(int) {$/;"	f	struct:_Rb_tree_iterator
operator --	.\lib\avr-stl\include\stl_tree.h	/^  _Self& operator--() { _M_decrement(); return *this; }$/;"	f	struct:_Rb_tree_iterator
operator -=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator-=(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) -= (*rhspixel); } return *this; }$/;"	f	class:CPixelView
operator -=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator-= (const CRGB& rhs )$/;"	f	struct:CRGB
operator -=	.\lib\avr-stl\include\stl_bvector.h	/^  const_iterator& operator-=(difference_type __i) {$/;"	f	struct:_Bit_const_iterator
operator -=	.\lib\avr-stl\include\stl_bvector.h	/^  iterator& operator-=(difference_type __i) {$/;"	f	struct:_Bit_iterator
operator -=	.\lib\avr-stl\include\stl_deque.h	/^  _Self& operator-=(difference_type __n) { return *this += -__n; }$/;"	f	struct:_Deque_iterator
operator -=	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator-=(_Distance __n) {$/;"	f	class:reverse_iterator
operator -=	.\lib\avr-stl\include\stl_iterator.h	/^  _Self& operator-=(difference_type __n) {$/;"	f	class:reverse_iterator
operator ->	.\lib\avr-stl\include\stl_deque.h	/^  pointer operator->() const { return _M_cur; }$/;"	f	struct:_Deque_iterator
operator ->	.\lib\avr-stl\include\stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Hashtable_const_iterator
operator ->	.\lib\avr-stl\include\stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Hashtable_iterator
operator ->	.\lib\avr-stl\include\stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:istream_iterator
operator ->	.\lib\avr-stl\include\stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:reverse_bidirectional_iterator
operator ->	.\lib\avr-stl\include\stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:reverse_iterator
operator ->	.\lib\avr-stl\include\stl_list.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_List_iterator
operator ->	.\lib\avr-stl\include\stl_slist.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Slist_iterator
operator ->	.\lib\avr-stl\include\stl_tree.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Rb_tree_iterator
operator /	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator\/( const CRGB& p1, uint8_t d)$/;"	f
operator /=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator\/=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) \/= d; } return *this; }$/;"	f	class:CPixelView
operator /=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator\/= (uint8_t d )$/;"	f	struct:CRGB
operator <	.\lib\FastLED\pixeltypes.h	/^inline __attribute__((always_inline)) bool operator< (const CRGB& lhs, const CRGB& rhs)$/;"	f
operator <	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator<(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base
operator <	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator<(const _Bit_reference& __x) const {$/;"	f	struct:_Bit_reference
operator <	.\lib\avr-stl\include\stl_bvector.h	/^operator<(const bit_vector& __x, const bit_vector& __y)$/;"	f
operator <	.\lib\avr-stl\include\stl_deque.h	/^  bool operator<(const _Self& __x) const {$/;"	f	struct:_Deque_iterator
operator <	.\lib\avr-stl\include\stl_deque.h	/^inline bool operator<(const deque<_Tp, _Alloc>& __x,$/;"	f
operator <	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator<(const reverse_iterator<_Iterator>& __x, $/;"	f
operator <	.\lib\avr-stl\include\stl_iterator.h	/^operator<(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator <	.\lib\avr-stl\include\stl_list.h	/^inline bool operator<(const list<_Tp,_Alloc>& __x,$/;"	f
operator <	.\lib\avr-stl\include\stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator <	.\lib\avr-stl\include\stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator <	.\lib\avr-stl\include\stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
operator <	.\lib\avr-stl\include\stl_pair.h	/^inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f
operator <	.\lib\avr-stl\include\stl_queue.h	/^operator<(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f
operator <	.\lib\avr-stl\include\stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	f
operator <	.\lib\avr-stl\include\stl_slist.h	/^operator<(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f
operator <	.\lib\avr-stl\include\stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f
operator <	.\lib\avr-stl\include\stl_tree.h	/^operator<(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
operator <	.\lib\avr-stl\include\stl_vector.h	/^operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f
operator <=	.\lib\FastLED\pixeltypes.h	/^inline __attribute__((always_inline)) bool operator<= (const CRGB& lhs, const CRGB& rhs)$/;"	f
operator <=	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator<=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base
operator <=	.\lib\avr-stl\include\stl_bvector.h	/^inline bool operator<=(const bit_vector& __x, const bit_vector& __y)$/;"	f
operator <=	.\lib\avr-stl\include\stl_deque.h	/^  bool operator<=(const _Self& __x) const { return !(__x < *this); }$/;"	f	struct:_Deque_iterator
operator <=	.\lib\avr-stl\include\stl_deque.h	/^inline bool operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f
operator <=	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator<=(const reverse_iterator<_Iterator>& __x, $/;"	f
operator <=	.\lib\avr-stl\include\stl_iterator.h	/^operator<=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator <=	.\lib\avr-stl\include\stl_list.h	/^inline bool operator<=(const list<_Tp,_Alloc>& __x,$/;"	f
operator <=	.\lib\avr-stl\include\stl_map.h	/^inline bool operator<=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator <=	.\lib\avr-stl\include\stl_multimap.h	/^inline bool operator<=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator <=	.\lib\avr-stl\include\stl_multiset.h	/^inline bool operator<=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
operator <=	.\lib\avr-stl\include\stl_pair.h	/^inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f
operator <=	.\lib\avr-stl\include\stl_queue.h	/^operator<=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f
operator <=	.\lib\avr-stl\include\stl_relops.h	/^inline bool operator<=(const _Tp& __x, const _Tp& __y) {$/;"	f
operator <=	.\lib\avr-stl\include\stl_set.h	/^inline bool operator<=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f
operator <=	.\lib\avr-stl\include\stl_slist.h	/^operator<=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f
operator <=	.\lib\avr-stl\include\stl_stack.h	/^bool operator<=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f
operator <=	.\lib\avr-stl\include\stl_tree.h	/^operator<=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
operator <=	.\lib\avr-stl\include\stl_vector.h	/^operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette16& operator=( const CHSVPalette16& rhs)$/;"	f	class:CHSVPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette16& operator=( const TProgmemHSVPalette16& rhs)$/;"	f	class:CHSVPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette256& operator=( const CHSVPalette16& rhs16)$/;"	f	class:CHSVPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette256& operator=( const CHSVPalette256& rhs)$/;"	f	class:CHSVPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette256& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CHSVPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette32& operator=( const CHSVPalette32& rhs)$/;"	f	class:CHSVPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CHSVPalette32& operator=( const TProgmemHSVPalette32& rhs)$/;"	f	class:CHSVPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& operator=( const CHSV rhs[16])$/;"	f	class:CRGBPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& operator=( const CHSVPalette16& rhs)$/;"	f	class:CRGBPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& operator=( const CRGB rhs[16])$/;"	f	class:CRGBPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& operator=( const CRGBPalette16& rhs)$/;"	f	class:CRGBPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette16& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette16
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( const CHSV rhs[256])$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( const CHSVPalette256& rhs)$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( const CRGB rhs[256])$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( const CRGBPalette256& rhs)$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette256& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette256
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const CHSV rhs[32])$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const CHSVPalette32& rhs)$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const CRGB rhs[32])$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const CRGBPalette32& rhs)$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\colorutils.h	/^    CRGBPalette32& operator=( const TProgmemRGBPalette32& rhs)$/;"	f	class:CRGBPalette32
operator =	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator=(const CPixelView & rhs) {$/;"	f	class:CPixelView
operator =	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator=(const PIXEL_TYPE & color) {$/;"	f	class:CPixelView
operator =	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))$/;"	f	struct:CRGB
operator =	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))$/;"	f	struct:CRGB
operator =	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB
operator =	.\lib\FastLED\pixeltypes.h	/^    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))$/;"	f	struct:CHSV
operator =	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_reference& operator=(bool __x)$/;"	f	struct:_Bit_reference
operator =	.\lib\avr-stl\include\stl_bvector.h	/^  _Bit_reference& operator=(const _Bit_reference& __x) $/;"	f	struct:_Bit_reference
operator =	.\lib\avr-stl\include\stl_bvector.h	/^  __VECTOR& operator=(const __VECTOR& __x) {$/;"	f	class:__BVECTOR
operator =	.\lib\avr-stl\include\stl_deque.h	/^  deque& operator= (const deque& __x) {$/;"	f	class:deque
operator =	.\lib\avr-stl\include\stl_hash_map.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator
operator =	.\lib\avr-stl\include\stl_hash_set.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator
operator =	.\lib\avr-stl\include\stl_hashtable.h	/^  hashtable& operator= (const hashtable& __ht)$/;"	f	class:hashtable
operator =	.\lib\avr-stl\include\stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:back_insert_iterator
operator =	.\lib\avr-stl\include\stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:front_insert_iterator
operator =	.\lib\avr-stl\include\stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator
operator =	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator<_Tp>& operator=(const _Tp& __value) { $/;"	f	class:ostream_iterator
operator =	.\lib\avr-stl\include\stl_iterator.h	/^  ostreambuf_iterator& operator=(char_type __c) {$/;"	f	class:ostreambuf_iterator
operator =	.\lib\avr-stl\include\stl_list.h	/^list<_Tp, _Alloc>& list<_Tp, _Alloc>::operator=(const list<_Tp, _Alloc>& __x)$/;"	f	class:list
operator =	.\lib\avr-stl\include\stl_map.h	/^  operator=(const map<_Key, _Tp, _Compare, _Alloc>& __x)$/;"	f	class:map
operator =	.\lib\avr-stl\include\stl_multimap.h	/^  operator=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) {$/;"	f	class:multimap
operator =	.\lib\avr-stl\include\stl_multiset.h	/^  operator=(const multiset<_Key,_Compare,_Alloc>& __x) {$/;"	f	class:multiset
operator =	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  raw_storage_iterator& operator=(const _Tp& __element) {$/;"	f	class:raw_storage_iterator
operator =	.\lib\avr-stl\include\stl_set.h	/^  set<_Key,_Compare,_Alloc>& operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:set
operator =	.\lib\avr-stl\include\stl_slist.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator
operator =	.\lib\avr-stl\include\stl_slist.h	/^slist<_Tp,_Alloc>& slist<_Tp,_Alloc>::operator=(const slist<_Tp,_Alloc>& __x)$/;"	f	class:slist
operator =	.\lib\avr-stl\include\stl_tempbuf.h	/^  void operator=(const _Temporary_buffer&) {}$/;"	f	class:_Temporary_buffer
operator =	.\lib\avr-stl\include\stl_tree.h	/^  ::operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)$/;"	f	class:_Rb_tree
operator =	.\lib\avr-stl\include\stl_vector.h	/^vector<_Tp,_Alloc>::operator=(const vector<_Tp, _Alloc>& __x)$/;"	f	class:vector
operator ==	.\lib\FastLED\colorutils.h	/^    bool operator==( const CHSVPalette16 rhs)$/;"	f	class:CHSVPalette16
operator ==	.\lib\FastLED\colorutils.h	/^    bool operator==( const CHSVPalette256 rhs)$/;"	f	class:CHSVPalette256
operator ==	.\lib\FastLED\colorutils.h	/^    bool operator==( const CHSVPalette32 rhs)$/;"	f	class:CHSVPalette32
operator ==	.\lib\FastLED\colorutils.h	/^    bool operator==( const CRGBPalette16 rhs)$/;"	f	class:CRGBPalette16
operator ==	.\lib\FastLED\colorutils.h	/^    bool operator==( const CRGBPalette256 rhs)$/;"	f	class:CRGBPalette256
operator ==	.\lib\FastLED\colorutils.h	/^    bool operator==( const CRGBPalette32 rhs)$/;"	f	class:CRGBPalette32
operator ==	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline bool operator==(pixelset_iterator_base & other) const { return leds == other.leds; } \/\/ && set==other.set; }$/;"	f	class:CPixelView::pixelset_iterator_base
operator ==	.\lib\FastLED\pixelset.h	/^  bool operator==(const CPixelView & rhs) const { return leds == rhs.leds && len == rhs.len && dir == rhs.dir; }$/;"	f	class:CPixelView
operator ==	.\lib\FastLED\pixeltypes.h	/^inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)$/;"	f
operator ==	.\lib\avr-stl\include\stl_alloc.h	/^inline bool operator==(const __default_alloc_template<__threads, __inst>&,$/;"	f
operator ==	.\lib\avr-stl\include\stl_alloc.h	/^inline bool operator==(const allocator<_T1>&, const allocator<_T2>&) $/;"	f
operator ==	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator==(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base
operator ==	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator==(const _Bit_reference& __x) const$/;"	f	struct:_Bit_reference
operator ==	.\lib\avr-stl\include\stl_bvector.h	/^operator==(const bit_vector& __x, const bit_vector& __y)$/;"	f
operator ==	.\lib\avr-stl\include\stl_deque.h	/^  bool operator==(const _Self& __x) const { return _M_cur == __x._M_cur; }$/;"	f	struct:_Deque_iterator
operator ==	.\lib\avr-stl\include\stl_deque.h	/^inline bool operator==(const deque<_Tp, _Alloc>& __x,$/;"	f
operator ==	.\lib\avr-stl\include\stl_hash_map.h	/^operator==(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f
operator ==	.\lib\avr-stl\include\stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f
operator ==	.\lib\avr-stl\include\stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f
operator ==	.\lib\avr-stl\include\stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f
operator ==	.\lib\avr-stl\include\stl_hashtable.h	/^  bool operator==(const const_iterator& __it) const $/;"	f	struct:_Hashtable_const_iterator
operator ==	.\lib\avr-stl\include\stl_hashtable.h	/^  bool operator==(const iterator& __it) const$/;"	f	struct:_Hashtable_iterator
operator ==	.\lib\avr-stl\include\stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f
operator ==	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator==($/;"	f
operator ==	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Distance>& __x,$/;"	f
operator ==	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f
operator ==	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator==(const reverse_iterator<_Iterator>& __x, $/;"	f
operator ==	.\lib\avr-stl\include\stl_iterator.h	/^operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f
operator ==	.\lib\avr-stl\include\stl_iterator.h	/^operator==(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator ==	.\lib\avr-stl\include\stl_list.h	/^  bool operator==(const _List_iterator_base& __x) const {$/;"	f	struct:_List_iterator_base
operator ==	.\lib\avr-stl\include\stl_list.h	/^operator==(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)$/;"	f
operator ==	.\lib\avr-stl\include\stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator ==	.\lib\avr-stl\include\stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator ==	.\lib\avr-stl\include\stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
operator ==	.\lib\avr-stl\include\stl_pair.h	/^inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f
operator ==	.\lib\avr-stl\include\stl_queue.h	/^operator==(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f
operator ==	.\lib\avr-stl\include\stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	f
operator ==	.\lib\avr-stl\include\stl_slist.h	/^  bool operator==(const _Slist_iterator_base& __x) const {$/;"	f	struct:_Slist_iterator_base
operator ==	.\lib\avr-stl\include\stl_slist.h	/^operator==(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f
operator ==	.\lib\avr-stl\include\stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f
operator ==	.\lib\avr-stl\include\stl_tree.h	/^inline bool operator==(const _Rb_tree_base_iterator& __x,$/;"	f
operator ==	.\lib\avr-stl\include\stl_tree.h	/^operator==(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
operator ==	.\lib\avr-stl\include\stl_vector.h	/^operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f
operator >	.\lib\FastLED\pixeltypes.h	/^inline __attribute__((always_inline)) bool operator> (const CRGB& lhs, const CRGB& rhs)$/;"	f
operator >	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator>(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base
operator >	.\lib\avr-stl\include\stl_bvector.h	/^inline bool operator>(const bit_vector& __x, const bit_vector& __y)$/;"	f
operator >	.\lib\avr-stl\include\stl_deque.h	/^  bool operator>(const _Self& __x) const  { return __x < *this; }$/;"	f	struct:_Deque_iterator
operator >	.\lib\avr-stl\include\stl_deque.h	/^inline bool operator>(const deque<_Tp, _Alloc>& __x,$/;"	f
operator >	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator>(const reverse_iterator<_Iterator>& __x, $/;"	f
operator >	.\lib\avr-stl\include\stl_iterator.h	/^operator>(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator >	.\lib\avr-stl\include\stl_list.h	/^inline bool operator>(const list<_Tp,_Alloc>& __x,$/;"	f
operator >	.\lib\avr-stl\include\stl_map.h	/^inline bool operator>(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator >	.\lib\avr-stl\include\stl_multimap.h	/^inline bool operator>(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator >	.\lib\avr-stl\include\stl_multiset.h	/^inline bool operator>(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
operator >	.\lib\avr-stl\include\stl_pair.h	/^inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f
operator >	.\lib\avr-stl\include\stl_queue.h	/^operator>(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f
operator >	.\lib\avr-stl\include\stl_relops.h	/^inline bool operator>(const _Tp& __x, const _Tp& __y) {$/;"	f
operator >	.\lib\avr-stl\include\stl_set.h	/^inline bool operator>(const set<_Key,_Compare,_Alloc>& __x, $/;"	f
operator >	.\lib\avr-stl\include\stl_slist.h	/^operator>(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f
operator >	.\lib\avr-stl\include\stl_stack.h	/^bool operator>(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f
operator >	.\lib\avr-stl\include\stl_tree.h	/^operator>(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
operator >	.\lib\avr-stl\include\stl_vector.h	/^operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f
operator >=	.\lib\FastLED\pixeltypes.h	/^inline __attribute__((always_inline)) bool operator>= (const CRGB& lhs, const CRGB& rhs)$/;"	f
operator >=	.\lib\avr-stl\include\stl_bvector.h	/^  bool operator>=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base
operator >=	.\lib\avr-stl\include\stl_bvector.h	/^inline bool operator>=(const bit_vector& __x, const bit_vector& __y)$/;"	f
operator >=	.\lib\avr-stl\include\stl_deque.h	/^  bool operator>=(const _Self& __x) const { return !(*this < __x); }$/;"	f	struct:_Deque_iterator
operator >=	.\lib\avr-stl\include\stl_deque.h	/^inline bool operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f
operator >=	.\lib\avr-stl\include\stl_iterator.h	/^inline bool operator>=(const reverse_iterator<_Iterator>& __x, $/;"	f
operator >=	.\lib\avr-stl\include\stl_iterator.h	/^operator>=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
operator >=	.\lib\avr-stl\include\stl_list.h	/^inline bool operator>=(const list<_Tp,_Alloc>& __x,$/;"	f
operator >=	.\lib\avr-stl\include\stl_map.h	/^inline bool operator>=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator >=	.\lib\avr-stl\include\stl_multimap.h	/^inline bool operator>=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
operator >=	.\lib\avr-stl\include\stl_multiset.h	/^inline bool operator>=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
operator >=	.\lib\avr-stl\include\stl_pair.h	/^inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f
operator >=	.\lib\avr-stl\include\stl_queue.h	/^operator>=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f
operator >=	.\lib\avr-stl\include\stl_relops.h	/^inline bool operator>=(const _Tp& __x, const _Tp& __y) {$/;"	f
operator >=	.\lib\avr-stl\include\stl_set.h	/^inline bool operator>=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f
operator >=	.\lib\avr-stl\include\stl_slist.h	/^operator>=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f
operator >=	.\lib\avr-stl\include\stl_stack.h	/^bool operator>=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f
operator >=	.\lib\avr-stl\include\stl_tree.h	/^operator>=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
operator >=	.\lib\avr-stl\include\stl_vector.h	/^operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f
operator >>=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator>>=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) >>= d; } return *this; }$/;"	f	class:CPixelView
operator >>=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator>>= (uint8_t d)$/;"	f	struct:CRGB
operator CHSV*	.\lib\FastLED\colorutils.h	/^    operator CHSV*()$/;"	f	class:CHSVPalette16
operator CHSV*	.\lib\FastLED\colorutils.h	/^    operator CHSV*()$/;"	f	class:CHSVPalette256
operator CHSV*	.\lib\FastLED\colorutils.h	/^    operator CHSV*()$/;"	f	class:CHSVPalette32
operator CRGB*	.\lib\FastLED\colorutils.h	/^    operator CRGB*()$/;"	f	class:CRGBPalette16
operator CRGB*	.\lib\FastLED\colorutils.h	/^    operator CRGB*()$/;"	f	class:CRGBPalette256
operator CRGB*	.\lib\FastLED\colorutils.h	/^    operator CRGB*()$/;"	f	class:CRGBPalette32
operator PIXEL_TYPE*	.\lib\FastLED\pixelset.h	/^  inline operator PIXEL_TYPE* () const { return leds; }$/;"	f	class:CPixelView
operator []	.\lib\FastLED\FastLED.cpp	/^CLEDController & CFastLED::operator[](int x) {$/;"	f	class:CFastLED
operator []	.\lib\FastLED\colorutils.h	/^    inline CHSV& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CHSVPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline CHSV& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CHSVPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline CHSV& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CHSVPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CHSVPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CHSVPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CHSVPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline CRGB& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CRGBPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline CRGB& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CRGBPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline CRGB& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CRGBPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CRGBPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CRGBPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CRGBPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline const CHSV& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline const CHSV& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline const CHSV& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline const CRGB& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline const CRGB& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline const CRGB& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette32
operator []	.\lib\FastLED\colorutils.h	/^    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette16
operator []	.\lib\FastLED\colorutils.h	/^    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette256
operator []	.\lib\FastLED\colorutils.h	/^    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette32
operator []	.\lib\FastLED\controller.h	/^    CRGB &operator[](int x) { return m_Data[x]; }$/;"	f	class:CLEDController
operator []	.\lib\FastLED\pixelset.h	/^  inline PIXEL_TYPE & operator[](int x) const { if(dir & 0x80) { return leds[-x]; } else { return leds[x]; } }$/;"	f	class:CPixelView
operator []	.\lib\FastLED\pixeltypes.h	/^	inline uint8_t& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	struct:CRGB
operator []	.\lib\FastLED\pixeltypes.h	/^    inline const uint8_t& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	struct:CRGB
operator []	.\lib\avr-stl\include\stl_bvector.h	/^  const_reference operator[](difference_type __i) { $/;"	f	struct:_Bit_const_iterator
operator []	.\lib\avr-stl\include\stl_bvector.h	/^  const_reference operator[](size_type __n) const$/;"	f	class:__BVECTOR
operator []	.\lib\avr-stl\include\stl_bvector.h	/^  reference operator[](difference_type __i) { return *(*this + __i); }$/;"	f	struct:_Bit_iterator
operator []	.\lib\avr-stl\include\stl_bvector.h	/^  reference operator[](size_type __n)$/;"	f	class:__BVECTOR
operator []	.\lib\avr-stl\include\stl_deque.h	/^  const_reference operator[](size_type __n) const $/;"	f	class:deque
operator []	.\lib\avr-stl\include\stl_deque.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }$/;"	f	struct:_Deque_iterator
operator []	.\lib\avr-stl\include\stl_deque.h	/^  reference operator[](size_type __n)$/;"	f	class:deque
operator []	.\lib\avr-stl\include\stl_hash_map.h	/^  _Tp& operator[](const key_type& __key) {$/;"	f	class:hash_map
operator []	.\lib\avr-stl\include\stl_iterator.h	/^  _Reference operator[](_Distance __n) const { return *(*this + __n); }$/;"	f	class:reverse_iterator
operator []	.\lib\avr-stl\include\stl_iterator.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }  $/;"	f	class:reverse_iterator
operator []	.\lib\avr-stl\include\stl_map.h	/^  _Tp& operator[](const key_type& __k) {$/;"	f	class:map
operator []	.\lib\avr-stl\include\stl_vector.h	/^  const_reference operator[](size_type __n) const { return *(begin() + __n); }$/;"	f	class:vector
operator []	.\lib\avr-stl\include\stl_vector.h	/^  reference operator[](size_type __n) { return *(begin() + __n); }$/;"	f	class:vector
operator bool	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^BLESerial::operator bool() {$/;"	f	class:BLESerial
operator bool	.\lib\FastLED\lib8tion.h	/^    operator bool() { return ready(); }$/;"	f	class:CEveryNTimePeriods
operator bool	.\lib\FastLED\pixelset.h	/^  inline operator bool() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { if((*pixel)) return true; } return false; }$/;"	f	class:CPixelView
operator bool	.\lib\FastLED\pixeltypes.h	/^    inline operator bool() const __attribute__((always_inline))$/;"	f	struct:CRGB
operator bool	.\lib\avr-stl\include\stl_bvector.h	/^  operator bool() const { return !(!(*_M_p & _M_mask)); }$/;"	f	struct:_Bit_reference
operator new	.\lib\avr-stl\include\pnew.cpp	/^void* operator new(size_t size_,void *ptr_)$/;"	f
operator rgb24	.\lib\FastLED\pixeltypes.h	/^    operator rgb24() const {$/;"	f	struct:CRGB
operator |	.\lib\FastLED\pixeltypes.h	/^inline CRGB operator|( const CRGB& p1, const CRGB& p2)$/;"	f
operator |=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator|=(const CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) |= (*rhspixel); } return *this; }$/;"	f	class:CPixelView
operator |=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator|=(const PIXEL_TYPE & rhs) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) |= rhs; } return *this; }$/;"	f	class:CPixelView
operator |=	.\lib\FastLED\pixelset.h	/^  inline CPixelView & operator|=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) |= d; } return *this; }$/;"	f	class:CPixelView
operator |=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator|= (const CRGB& rhs )$/;"	f	struct:CRGB
operator |=	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& operator|= (uint8_t d )$/;"	f	struct:CRGB
ostream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator(ostream& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:ostream_iterator
ostream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator(ostream& __s, const char* __c) $/;"	f	class:ostream_iterator
ostream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:ostream_iterator
ostream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  ostream_iterator(ostream_type& __s, const _CharT* __c) $/;"	f	class:ostream_iterator
ostream_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class ostream_iterator {$/;"	c
ostream_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:ostreambuf_iterator
ostream_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:ostream_iterator
ostreambuf_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  ostreambuf_iterator(ostream_type& __o)$/;"	f	class:ostreambuf_iterator
ostreambuf_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf) {}$/;"	f	class:ostreambuf_iterator
ostreambuf_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class ostreambuf_iterator$/;"	c
other	.\lib\avr-stl\include\stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:__allocator::rebind
other	.\lib\avr-stl\include\stl_alloc.h	/^    typedef allocator<_Tp1> other;$/;"	t	struct:allocator::rebind
output_iterator	.\lib\avr-stl\include\stl_iterator_base.h	/^struct output_iterator {$/;"	s
output_iterator_tag	.\lib\avr-stl\include\stl_iterator_base.h	/^struct output_iterator_tag {};$/;"	s
p	.\lib\FastLED\noise.cpp	/^FL_PROGMEM static uint8_t const p[] = { 151,160,137,91,90,15,$/;"	v	file:
pSmartMatrix	.\lib\FastLED\FastLED.cpp	/^void *pSmartMatrix = NULL;$/;"	v
pad	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^  uint8_t pad;$/;"	m	struct:M0ClocklessData
pair	.\lib\avr-stl\include\stl_pair.h	/^  pair() : first(_T1()), second(_T2()) {}$/;"	f	struct:pair
pair	.\lib\avr-stl\include\stl_pair.h	/^  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}$/;"	f	struct:pair
pair	.\lib\avr-stl\include\stl_pair.h	/^  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}$/;"	f	struct:pair
pair	.\lib\avr-stl\include\stl_pair.h	/^struct pair {$/;"	s
partial_sort	.\lib\avr-stl\include\stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f
partial_sort_copy	.\lib\avr-stl\include\stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f
partial_sum	.\lib\avr-stl\include\stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f
partition	.\lib\avr-stl\include\stl_algo.h	/^inline _ForwardIter partition(_ForwardIter __first,$/;"	f
peek	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^int BLESerial::peek(void) {$/;"	f	class:BLESerial
pgm_read_byte	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	73;"	d
pgm_read_byte	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	73;"	d
pgm_read_byte_far	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	82;"	d
pgm_read_byte_far	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	82;"	d
pgm_read_byte_near	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	78;"	d
pgm_read_byte_near	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	78;"	d
pgm_read_dword	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	31;"	d
pgm_read_dword	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	75;"	d
pgm_read_dword	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	75;"	d
pgm_read_dword_far	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	84;"	d
pgm_read_dword_far	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	84;"	d
pgm_read_dword_near	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	32;"	d
pgm_read_dword_near	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	80;"	d
pgm_read_dword_near	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	80;"	d
pgm_read_float	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	76;"	d
pgm_read_float	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	76;"	d
pgm_read_float_far	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	85;"	d
pgm_read_float_far	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	85;"	d
pgm_read_float_near	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	81;"	d
pgm_read_float_near	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	81;"	d
pgm_read_word	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	74;"	d
pgm_read_word	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	74;"	d
pgm_read_word_far	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	83;"	d
pgm_read_word_far	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	83;"	d
pgm_read_word_near	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	79;"	d
pgm_read_word_near	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	79;"	d
pin	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    pin;           \/\/ Output pin number (-1 if not yet set)$/;"	m	class:Adafruit_NeoPixel
pinMask	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    pinMask;       \/\/ Output PORT bitmask$/;"	m	class:Adafruit_NeoPixel
pins	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	uint32_t pins[4];$/;"	m	struct:SPIState
pins	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	uint32_t pins[4];$/;"	m	struct:SPIState
pixels	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^   *pixels,        \/\/ Holds LED color values (3 or 4 bytes each)$/;"	m	class:Adafruit_NeoPixel
pixelset_iterator_base	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline pixelset_iterator_base(T * _leds, const char _dir) : leds(_leds), dir(_dir) {}$/;"	f	class:CPixelView::pixelset_iterator_base
pixelset_iterator_base	.\lib\FastLED\pixelset.h	/^    __attribute__((always_inline)) inline pixelset_iterator_base(const pixelset_iterator_base & rhs) : leds(rhs.leds), dir(rhs.dir) {}$/;"	f	class:CPixelView::pixelset_iterator_base
pixelset_iterator_base	.\lib\FastLED\pixelset.h	/^  class pixelset_iterator_base {$/;"	c	class:CPixelView
platforms	.\lib\FastLED\library.json	/^    "platforms": "atmelavr,atmelsam,freescalekinetis,nordicnrf51,nxplpc,ststm32,teensy,esp8266,esp32",$/;"	f
platforms	.\lib\I2Cdev\library.json	/^  "platforms": "atmelavr"$/;"	f
platforms	.\lib\RunningMedian\library.json	/^  "platforms": "*",$/;"	f
plus	.\lib\avr-stl\include\stl_function.h	/^struct plus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s
pocto	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  OctoWS2811  *pocto;$/;"	m	class:COctoWS2811Controller
pointer	.\lib\avr-stl\include\concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::pointer pointer;$/;"	t	struct:__pointer_type_definition_requirement_violation
pointer	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(pointer);$/;"	v
pointer	.\lib\avr-stl\include\stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	class:allocator
pointer	.\lib\avr-stl\include\stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	struct:__allocator
pointer	.\lib\avr-stl\include\stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:allocator
pointer	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	class:__BVECTOR
pointer	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	struct:_Bit_iterator
pointer	.\lib\avr-stl\include\stl_bvector.h	/^  typedef const bool*          pointer;$/;"	t	struct:_Bit_const_iterator
pointer	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Ptr pointer;$/;"	t	struct:_Deque_iterator
pointer	.\lib\avr-stl\include\stl_deque.h	/^  typedef value_type* pointer;$/;"	t	class:deque
pointer	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:hash_map
pointer	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:hash_multimap
pointer	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator
pointer	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:hash_multiset
pointer	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:hash_set
pointer	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator
pointer	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Val* pointer;$/;"	t	struct:_Hashtable_iterator
pointer	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef const _Val* pointer;$/;"	t	struct:_Hashtable_const_iterator
pointer	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef value_type*       pointer;$/;"	t	class:hashtable
pointer	.\lib\avr-stl\include\stl_iterator.h	/^          pointer;$/;"	t	class:reverse_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:reverse_bidirectional_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:reverse_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef const _Tp*                     pointer;$/;"	t	class:istream_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef const _Tp*          pointer;$/;"	t	class:istream_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                           pointer;$/;"	t	class:ostream_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:back_insert_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:front_insert_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator
pointer	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:ostream_iterator
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Pointer   pointer;$/;"	t	struct:iterator
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp*                        pointer;$/;"	t	struct:iterator_traits
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:bidirectional_iterator
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:random_access_iterator
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp*                 pointer;$/;"	t	struct:forward_iterator
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp*               pointer;$/;"	t	struct:input_iterator
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef const _Tp*                  pointer;$/;"	t	struct:iterator_traits
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef typename _Iterator::pointer           pointer;$/;"	t	struct:iterator_traits
pointer	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef void                pointer;$/;"	t	struct:output_iterator
pointer	.\lib\avr-stl\include\stl_list.h	/^  typedef _Ptr pointer;$/;"	t	struct:_List_iterator
pointer	.\lib\avr-stl\include\stl_list.h	/^  typedef value_type* pointer;$/;"	t	class:list
pointer	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:map
pointer	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:multimap
pointer	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:multiset
pointer	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  typedef void                pointer;$/;"	t	class:raw_storage_iterator
pointer	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:set
pointer	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Ptr             pointer;$/;"	t	struct:_Slist_iterator
pointer	.\lib\avr-stl\include\stl_slist.h	/^  typedef value_type*       pointer;$/;"	t	class:slist
pointer	.\lib\avr-stl\include\stl_slist.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator
pointer	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Ptr pointer;$/;"	t	struct:_Rb_tree_iterator
pointer	.\lib\avr-stl\include\stl_tree.h	/^  typedef value_type* pointer;$/;"	t	class:_Rb_tree
pointer	.\lib\avr-stl\include\stl_vector.h	/^  typedef value_type* pointer;$/;"	t	class:vector
pointer_to_binary_function	.\lib\avr-stl\include\stl_function.h	/^    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) $/;"	f	class:pointer_to_binary_function
pointer_to_binary_function	.\lib\avr-stl\include\stl_function.h	/^    pointer_to_binary_function() {}$/;"	f	class:pointer_to_binary_function
pointer_to_binary_function	.\lib\avr-stl\include\stl_function.h	/^class pointer_to_binary_function : $/;"	c
pointer_to_unary_function	.\lib\avr-stl\include\stl_function.h	/^  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}$/;"	f	class:pointer_to_unary_function
pointer_to_unary_function	.\lib\avr-stl\include\stl_function.h	/^  pointer_to_unary_function() {}$/;"	f	class:pointer_to_unary_function
pointer_to_unary_function	.\lib\avr-stl\include\stl_function.h	/^class pointer_to_unary_function : public unary_function<_Arg, _Result> {$/;"	c
poll	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^void BLESerial::poll() {$/;"	f	class:BLESerial
pop	.\lib\avr-stl\include\stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	f	class:queue
pop	.\lib\avr-stl\include\stl_queue.h	/^  void pop() {$/;"	f	class:priority_queue
pop	.\lib\avr-stl\include\stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	f	class:stack
pop_back	.\lib\avr-stl\include\stl_bvector.h	/^  void pop_back() { --_M_finish; }$/;"	f	class:__BVECTOR
pop_back	.\lib\avr-stl\include\stl_deque.h	/^  void pop_back() {$/;"	f	class:deque
pop_back	.\lib\avr-stl\include\stl_list.h	/^  void pop_back() { $/;"	f	class:list
pop_back	.\lib\avr-stl\include\stl_vector.h	/^  void pop_back() {$/;"	f	class:vector
pop_front	.\lib\avr-stl\include\stl_deque.h	/^  void pop_front() {$/;"	f	class:deque
pop_front	.\lib\avr-stl\include\stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	f	class:list
pop_front	.\lib\avr-stl\include\stl_slist.h	/^  void pop_front() {$/;"	f	class:slist
pop_heap	.\lib\avr-stl\include\stl_heap.h	/^inline void pop_heap(_RandomAccessIterator __first, $/;"	f
pop_heap	.\lib\avr-stl\include\stl_heap.h	/^pop_heap(_RandomAccessIterator __first,$/;"	f
port	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    *port;         \/\/ Output PORT register$/;"	m	class:Adafruit_NeoPixel
port	.\lib\FastLED\fastpin.h	/^	port_ptr_t  port() __attribute__ ((always_inline)) { return mPort; }$/;"	f	class:Pin
port	.\lib\FastLED\fastpin.h	/^	static port_ptr_t  port() __attribute__ ((always_inline)) { return NULL; }$/;"	f	class:FastPin
port	.\lib\FastLED\fastpin.h	/^	static port_ptr_t  port() __attribute__ ((always_inline)) { return sPort; }$/;"	f	class:FastPin
port	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static port_ptr_t port() __attribute__ ((always_inline)) { return &FL_NRF_GPIO->OUT; }$/;"	f	class:_ARMPIN
port	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static port_ptr_t port() __attribute__ ((always_inline)) { if(PIN<OUTPUT_PIN_LIMIT) { return &_GPB0._GPO;   }}$/;"	f	class:_ESPPIN
port	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static port_ptr_t port() __attribute__ ((always_inline)) { if(PIN<16) { return &_GPB._GPO; } else { return &GP16O; } }$/;"	f	class:_ESPPIN
port_ptr_t	.\lib\FastLED\fastpin.h	/^	typedef volatile RwReg * port_ptr_t;$/;"	t	class:FastPin
port_ptr_t	.\lib\FastLED\fastpin.h	/^	typedef volatile RwReg * port_ptr_t;$/;"	t	class:Pin
port_ptr_t	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ARMPIN
port_ptr_t	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ESPPIN
port_ptr_t	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ESPPIN
port_t	.\lib\FastLED\fastpin.h	/^	typedef RwReg port_t;$/;"	t	class:FastPin
port_t	.\lib\FastLED\fastpin.h	/^	typedef RwReg port_t;$/;"	t	class:Pin
port_t	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  typedef uint32_t port_t;$/;"	t	class:_ARMPIN
port_t	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  typedef uint32_t port_t;$/;"	t	class:_ESPPIN
port_t	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  typedef uint32_t port_t;$/;"	t	class:_ESPPIN
pos_type	.\lib\avr-stl\include\char_traits.h	/^  typedef char_traits_off_type pos_type;$/;"	t	class:__char_traits_base
pos_type	.\lib\avr-stl\include\char_traits.h	/^  typedef streampos pos_type;$/;"	t	class:__char_traits_base
postBlock	.\lib\FastLED\chipsets.h	/^		__attribute__((always_inline)) inline static void postBlock(int len) {$/;"	f	class:LPD8806Controller::LPD8806_ADJUST
postBlock	.\lib\FastLED\fastspi_types.h	/^  static __attribute__((always_inline)) inline void postBlock(int \/* len *\/) { }$/;"	f	class:DATA_NOP
power	.\lib\avr-stl\include\stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n)$/;"	f
power	.\lib\avr-stl\include\stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f
power_func	.\lib\FastLED\FastLED.h	/^typedef uint8_t (*power_func)(uint8_t scale, uint32_t data);$/;"	t
preStepFirstByteDithering	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline void preStepFirstByteDithering() {$/;"	f	struct:PixelController
predict	.\lib\RunningMedian\RunningMedian.cpp	/^float RunningMedian::predict(const uint8_t n)$/;"	f	class:RunningMedian
prev_permutation	.\lib\avr-stl\include\stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f
prev_permutation	.\lib\avr-stl\include\stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f
previous	.\lib\avr-stl\include\stl_slist.h	/^  const_iterator previous(const_iterator __pos) const {$/;"	f	class:slist
previous	.\lib\avr-stl\include\stl_slist.h	/^  iterator previous(const_iterator __pos) {$/;"	f	class:slist
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}$/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue() : c() {}$/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue(_InputIterator __first, $/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last) $/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue(const _Compare& __x, const _Sequence& __s) $/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last) $/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:priority_queue
priority_queue	.\lib\avr-stl\include\stl_queue.h	/^class priority_queue {$/;"	c
prog_char	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef char prog_char;$/;"	t
prog_char	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef char prog_char;$/;"	t
prog_int16_t	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef int16_t prog_int16_t;$/;"	t
prog_int16_t	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef int16_t prog_int16_t;$/;"	t
prog_int32_t	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef int32_t prog_int32_t;$/;"	t
prog_int32_t	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef int32_t prog_int32_t;$/;"	t
prog_int8_t	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef int8_t prog_int8_t;$/;"	t
prog_int8_t	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef int8_t prog_int8_t;$/;"	t
prog_uchar	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef unsigned char prog_uchar;$/;"	t
prog_uchar	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef unsigned char prog_uchar;$/;"	t
prog_uint16_t	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef uint16_t prog_uint16_t;$/;"	t
prog_uint16_t	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef uint16_t prog_uint16_t;$/;"	t
prog_uint32_t	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	/^typedef uint32_t prog_uint32_t;$/;"	t
prog_uint32_t	.\lib\FastLED\platforms\esp\32\led_sysdefs_esp32.h	/^typedef unsigned long prog_uint32_t;$/;"	t
prog_uint32_t	.\lib\FastLED\platforms\esp\8266\led_sysdefs_esp8266.h	/^typedef uint32_t prog_uint32_t;$/;"	t
prog_uint32_t	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef uint32_t prog_uint32_t;$/;"	t
prog_uint32_t	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef uint32_t prog_uint32_t;$/;"	t
prog_uint8_t	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef uint8_t prog_uint8_t;$/;"	t
prog_uint8_t	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef uint8_t prog_uint8_t;$/;"	t
prog_void	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	/^        typedef void prog_void;$/;"	t
prog_void	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	/^        typedef void prog_void;$/;"	t
project1st	.\lib\avr-stl\include\stl_function.h	/^struct project1st : public _Project1st<_Arg1, _Arg2> {};$/;"	s
project2nd	.\lib\avr-stl\include\stl_function.h	/^struct project2nd : public _Project2nd<_Arg1, _Arg2> {};$/;"	s
pserial	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  WS2812Serial *pserial;$/;"	m	class:CWS2812SerialController
ptr_fun	.\lib\avr-stl\include\stl_function.h	/^inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))$/;"	f
ptr_fun	.\lib\avr-stl\include\stl_function.h	/^ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {$/;"	f
ptr_reg32_t	.\lib\FastLED\fastpin.h	/^typedef volatile uint32_t * ptr_reg32_t;$/;"	t
ptwv	.\lib\I2Cdev\I2Cdev.cpp	/^    twi_Write_Vars *ptwv = 0;$/;"	v
push	.\lib\avr-stl\include\stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:queue
push	.\lib\avr-stl\include\stl_queue.h	/^  void push(const value_type& __x) {$/;"	f	class:priority_queue
push	.\lib\avr-stl\include\stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:stack
push_back	.\lib\avr-stl\include\stl_bvector.h	/^  void push_back(bool __x) {$/;"	f	class:__BVECTOR
push_back	.\lib\avr-stl\include\stl_deque.h	/^  void push_back() {$/;"	f	class:deque
push_back	.\lib\avr-stl\include\stl_deque.h	/^  void push_back(const value_type& __t) {$/;"	f	class:deque
push_back	.\lib\avr-stl\include\stl_list.h	/^  void push_back() {insert(end());}$/;"	f	class:list
push_back	.\lib\avr-stl\include\stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	f	class:list
push_back	.\lib\avr-stl\include\stl_vector.h	/^  void push_back() {$/;"	f	class:vector
push_back	.\lib\avr-stl\include\stl_vector.h	/^  void push_back(const _Tp& __x) {$/;"	f	class:vector
push_front	.\lib\avr-stl\include\stl_deque.h	/^  void push_front() {$/;"	f	class:deque
push_front	.\lib\avr-stl\include\stl_deque.h	/^  void push_front(const value_type& __t) {$/;"	f	class:deque
push_front	.\lib\avr-stl\include\stl_list.h	/^  void push_front() {insert(begin());}$/;"	f	class:list
push_front	.\lib\avr-stl\include\stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	f	class:list
push_front	.\lib\avr-stl\include\stl_slist.h	/^  void push_front() { __slist_make_link(&this->_M_head, _M_create_node()); }$/;"	f	class:slist
push_front	.\lib\avr-stl\include\stl_slist.h	/^  void push_front(const value_type& __x)   {$/;"	f	class:slist
push_heap	.\lib\avr-stl\include\stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f
push_heap	.\lib\avr-stl\include\stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f
q	.\lib\FastLED\lib8tion.h	/^  q(float fx) { i = fx; f = (fx-i) * (1<<F); }$/;"	f	class:q
q	.\lib\FastLED\lib8tion.h	/^  q(uint8_t _i, uint8_t _f) {i=_i; f=_f; }$/;"	f	class:q
q	.\lib\FastLED\lib8tion.h	/^template<class T, int F, int I> class q {$/;"	c
q124	.\lib\FastLED\lib8tion.h	/^typedef q<uint16_t, 12,4> q124;$/;"	t
q44	.\lib\FastLED\lib8tion.h	/^typedef q<uint8_t, 4,4> q44;$/;"	t
q62	.\lib\FastLED\lib8tion.h	/^typedef q<uint8_t, 6,2> q62;$/;"	t
q88	.\lib\FastLED\lib8tion.h	/^typedef q<uint16_t, 8,8> q88;$/;"	t
qadd7	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)$/;"	f
qadd8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)$/;"	f
qmul8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)$/;"	f
qsub8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)$/;"	f
quadwave8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t quadwave8(uint8_t in)$/;"	f
queue	.\lib\avr-stl\include\stl_queue.h	/^  explicit queue(const _Sequence& __c) : c(__c) {}$/;"	f	class:queue
queue	.\lib\avr-stl\include\stl_queue.h	/^  queue() : c() {}$/;"	f	class:queue
queue	.\lib\avr-stl\include\stl_queue.h	/^class queue {$/;"	c
r	.\lib\FastLED\colorutils.h	/^        uint8_t r;$/;"	m	struct:__anon27::__anon28
r	.\lib\FastLED\pixeltypes.h	/^                uint8_t r;$/;"	m	union:CRGB::__anon40::__anon41::__anon42
rOffset	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    rOffset,       \/\/ Index of red byte within each 3- or 4-byte pixel$/;"	m	class:Adafruit_NeoPixel
rand16seed	.\lib\FastLED\lib8tion.cpp	/^uint16_t rand16seed = RAND16_SEED;$/;"	v
random16	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint16_t random16( uint16_t lim)$/;"	f
random16	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)$/;"	f
random16	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint16_t random16()$/;"	f
random16_add_entropy	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC void random16_add_entropy( uint16_t entropy)$/;"	f
random16_get_seed	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint16_t random16_get_seed()$/;"	f
random16_set_seed	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC void random16_set_seed( uint16_t seed)$/;"	f
random8	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint8_t random8()$/;"	f
random8	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint8_t random8(uint8_t lim)$/;"	f
random8	.\lib\FastLED\lib8tion\random8.h	/^LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)$/;"	f
random_access_iterator	.\lib\avr-stl\include\stl_iterator_base.h	/^template <class _Tp, class _Distance> struct random_access_iterator {$/;"	s
random_access_iterator_tag	.\lib\avr-stl\include\stl_iterator_base.h	/^struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s
random_sample	.\lib\avr-stl\include\stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f
random_sample_n	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f
random_shuffle	.\lib\avr-stl\include\stl_algo.h	/^inline void random_shuffle(_RandomAccessIter __first,$/;"	f
random_shuffle	.\lib\avr-stl\include\stl_algo.h	/^void random_shuffle(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
raw	.\lib\FastLED\bitswap.h	/^  uint8_t raw;$/;"	m	union:__anon19
raw	.\lib\FastLED\pixeltypes.h	/^		uint8_t raw[3];$/;"	m	union:CHSV::__anon34
raw	.\lib\FastLED\pixeltypes.h	/^		uint8_t raw[3];$/;"	m	union:CRGB::__anon40
raw	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		uint32_t raw[3];$/;"	m	union:InlineBlockClocklessController::__anon46
raw	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		uint32_t raw[4];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon47
raw	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^    uint32_t raw[2];$/;"	m	union:COctoWS2811Controller::__anon48
raw	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		uint32_t raw[3];$/;"	m	union:InlineBlockClocklessController::__anon49
raw	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		uint32_t raw[4];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon50
raw	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^  uint32_t raw[2];$/;"	m	union:__anon52
raw	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^	uint32_t raw[2];$/;"	m	union:InlineBlockClocklessController::__anon53
raw	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^		uint32_t raw[2];$/;"	m	union:InlineBlockClocklessController::__anon54
raw_storage_iterator	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}$/;"	f	class:raw_storage_iterator
raw_storage_iterator	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^class raw_storage_iterator {$/;"	c
rawleds	.\lib\FastLED\pixelset.h	/^  CRGB rawleds[SIZE];$/;"	m	class:CRGBArray
rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  rb_tree(const _Compare& __comp = _Compare(),$/;"	f	struct:rb_tree
rb_tree	.\lib\avr-stl\include\stl_tree.h	/^struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>$/;"	s
rbegin	.\lib\avr-stl\include\stl_bvector.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:__BVECTOR
rbegin	.\lib\avr-stl\include\stl_bvector.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:__BVECTOR
rbegin	.\lib\avr-stl\include\stl_deque.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:deque
rbegin	.\lib\avr-stl\include\stl_deque.h	/^  reverse_iterator rbegin() { return reverse_iterator(_M_finish); }$/;"	f	class:deque
rbegin	.\lib\avr-stl\include\stl_list.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:list
rbegin	.\lib\avr-stl\include\stl_list.h	/^  reverse_iterator rbegin() $/;"	f	class:list
rbegin	.\lib\avr-stl\include\stl_map.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:map
rbegin	.\lib\avr-stl\include\stl_map.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:map
rbegin	.\lib\avr-stl\include\stl_multimap.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:multimap
rbegin	.\lib\avr-stl\include\stl_multimap.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:multimap
rbegin	.\lib\avr-stl\include\stl_multiset.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:multiset
rbegin	.\lib\avr-stl\include\stl_set.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:set
rbegin	.\lib\avr-stl\include\stl_tree.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:_Rb_tree
rbegin	.\lib\avr-stl\include\stl_tree.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:_Rb_tree
rbegin	.\lib\avr-stl\include\stl_vector.h	/^  const_reverse_iterator rbegin() const$/;"	f	class:vector
rbegin	.\lib\avr-stl\include\stl_vector.h	/^  reverse_iterator rbegin()$/;"	f	class:vector
read	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^int BLESerial::read(void) {$/;"	f	class:BLESerial
readBit	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readBitW	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readBits	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readBitsW	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readBuf	.\lib\I2Cdev\I2Cdev.cpp	/^    byte Fastwire::readBuf(byte device, byte address, byte *data, byte num) {$/;"	f	class:Fastwire
readByte	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readBytes	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readMemoryBlock	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {$/;"	f	class:MPU6050
readMemoryByte	.\lib\MPU6050\MPU6050.cpp	/^uint8_t MPU6050::readMemoryByte() {$/;"	f	class:MPU6050
readTimeout	.\lib\I2Cdev\I2Cdev.cpp	/^uint16_t I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;$/;"	m	class:I2Cdev	file:
readTimeout	.\lib\I2Cdev\I2Cdev.h	/^        static uint16_t readTimeout;$/;"	m	class:I2Cdev
readWord	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readWord(uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
readWords	.\lib\I2Cdev\I2Cdev.cpp	/^int8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t *data, uint16_t timeout) {$/;"	f	class:I2Cdev
ready	.\lib\FastLED\lib8tion.h	/^    bool ready() {$/;"	f	class:CEveryNTimePeriods
readyTransferBits	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	static inline void readyTransferBits(register uint32_t bits) {$/;"	f	class:SAMHardwareSPIOutput
reallocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void* reallocate(void* __p, size_t \/* old_sz *\/, size_t __new_sz)$/;"	f	class:__malloc_alloc_template
reallocate	.\lib\avr-stl\include\stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz)$/;"	f	class:debug_alloc
reallocate	.\lib\avr-stl\include\stl_alloc.h	/^__default_alloc_template<threads, inst>::reallocate(void* __p,$/;"	f	class:__default_alloc_template
rebind	.\lib\avr-stl\include\stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:allocator
rebind	.\lib\avr-stl\include\stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	struct:__allocator
receive	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::receive(void) {$/;"	f	class:TwoWire
red	.\lib\FastLED\pixeltypes.h	/^                uint8_t red;$/;"	m	union:CRGB::__anon40::__anon41::__anon42
reference	.\lib\avr-stl\include\concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::reference reference;$/;"	t	struct:__reference_type_definition_requirement_violation
reference	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(reference);$/;"	v
reference	.\lib\avr-stl\include\stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	class:allocator
reference	.\lib\avr-stl\include\stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	struct:__allocator
reference	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_reference  reference;$/;"	t	struct:_Bit_iterator
reference	.\lib\avr-stl\include\stl_bvector.h	/^  typedef _Bit_reference reference;$/;"	t	class:__BVECTOR
reference	.\lib\avr-stl\include\stl_bvector.h	/^  typedef bool                 reference;$/;"	t	struct:_Bit_const_iterator
reference	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Ref reference;$/;"	t	struct:_Deque_iterator
reference	.\lib\avr-stl\include\stl_deque.h	/^  typedef value_type& reference;$/;"	t	class:deque
reference	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:hash_map
reference	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:hash_multimap
reference	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef void                reference;$/;"	t	class:insert_iterator
reference	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:hash_multiset
reference	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:hash_set
reference	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef void                reference;$/;"	t	class:insert_iterator
reference	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Val& reference;$/;"	t	struct:_Hashtable_iterator
reference	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef const _Val& reference;$/;"	t	struct:_Hashtable_const_iterator
reference	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef value_type&       reference;$/;"	t	class:hashtable
reference	.\lib\avr-stl\include\stl_iterator.h	/^          reference;$/;"	t	class:reverse_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:reverse_bidirectional_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:reverse_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef const _Tp&                     reference;$/;"	t	class:istream_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef const _Tp&          reference;$/;"	t	class:istream_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                           reference;$/;"	t	class:ostream_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                reference;$/;"	t	class:back_insert_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                reference;$/;"	t	class:front_insert_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                reference;$/;"	t	class:insert_iterator
reference	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                reference;$/;"	t	class:ostream_iterator
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Reference reference;$/;"	t	struct:iterator
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp&                        reference;$/;"	t	struct:iterator_traits
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:bidirectional_iterator
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:random_access_iterator
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp&                 reference;$/;"	t	struct:forward_iterator
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp&               reference;$/;"	t	struct:input_iterator
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef const _Tp&                  reference;$/;"	t	struct:iterator_traits
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef typename _Iterator::reference         reference;$/;"	t	struct:iterator_traits
reference	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef void                reference;$/;"	t	struct:output_iterator
reference	.\lib\avr-stl\include\stl_list.h	/^  typedef _Ref reference;$/;"	t	struct:_List_iterator
reference	.\lib\avr-stl\include\stl_list.h	/^  typedef value_type& reference;$/;"	t	class:list
reference	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:map
reference	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:multimap
reference	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:multiset
reference	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:priority_queue
reference	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:queue
reference	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  typedef void                reference;$/;"	t	class:raw_storage_iterator
reference	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:set
reference	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Ref             reference;$/;"	t	struct:_Slist_iterator
reference	.\lib\avr-stl\include\stl_slist.h	/^  typedef value_type&       reference;$/;"	t	class:slist
reference	.\lib\avr-stl\include\stl_slist.h	/^  typedef void                reference;$/;"	t	class:insert_iterator
reference	.\lib\avr-stl\include\stl_stack.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:stack
reference	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Ref reference;$/;"	t	struct:_Rb_tree_iterator
reference	.\lib\avr-stl\include\stl_tree.h	/^  typedef value_type& reference;$/;"	t	class:_Rb_tree
reference	.\lib\avr-stl\include\stl_vector.h	/^  typedef value_type& reference;$/;"	t	class:vector
reg32_t	.\lib\FastLED\fastpin.h	/^typedef volatile uint32_t & reg32_t;$/;"	t
release	.\lib\FastLED\fastpin.h	/^	virtual void release() { lo(); }$/;"	f	class:Pin
release	.\lib\FastLED\fastspi_bitbang.h	/^	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } \/\/ FastPin<SELECT_PIN>::lo(); }$/;"	f	class:AVRSoftwareSPIOutput
release	.\lib\FastLED\fastspi_nop.h	/^	void release() { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
release	.\lib\FastLED\fastspi_ref.h	/^	void inline release() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->release(); } }$/;"	f	class:REFHardwareSPIOutput
release	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void inline release() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
release	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void inline release() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
release	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void inline release() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
release	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void release() { shouldWait(); restoreSPIData(); }$/;"	f	class:NRF51SPIOutput
release	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void inline release() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->release(); } }$/;"	f	class:SAMHardwareSPIOutput
release	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^		void release() {$/;"	f	class:AVRUSART0SPIOutput
release	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void release() {$/;"	f	class:AVRHardwareSPIOutput
release	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void release() {$/;"	f	class:AVRUSART1SPIOutput
remove	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter remove(_ForwardIter __first, _ForwardIter __last,$/;"	f
remove	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::remove(const _Tp& __value)$/;"	f	class:list
remove	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::remove(const _Tp& __val)$/;"	f	class:slist
remove_copy	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter remove_copy(_InputIter __first, _InputIter __last,$/;"	f
remove_copy_if	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter remove_copy_if(_InputIter __first, _InputIter __last,$/;"	f
remove_if	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter remove_if(_ForwardIter __first, _ForwardIter __last,$/;"	f
remove_if	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::remove_if(_Predicate __pred)$/;"	f	class:list
remove_if	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::remove_if(_Predicate __pred)$/;"	f	class:slist
rend	.\lib\avr-stl\include\stl_bvector.h	/^  const_reverse_iterator rend() const { $/;"	f	class:__BVECTOR
rend	.\lib\avr-stl\include\stl_bvector.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:__BVECTOR
rend	.\lib\avr-stl\include\stl_deque.h	/^  const_reverse_iterator rend() const $/;"	f	class:deque
rend	.\lib\avr-stl\include\stl_deque.h	/^  reverse_iterator rend() { return reverse_iterator(_M_start); }$/;"	f	class:deque
rend	.\lib\avr-stl\include\stl_list.h	/^  const_reverse_iterator rend() const$/;"	f	class:list
rend	.\lib\avr-stl\include\stl_list.h	/^  reverse_iterator rend()$/;"	f	class:list
rend	.\lib\avr-stl\include\stl_map.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:map
rend	.\lib\avr-stl\include\stl_map.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:map
rend	.\lib\avr-stl\include\stl_multimap.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:multimap
rend	.\lib\avr-stl\include\stl_multimap.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:multimap
rend	.\lib\avr-stl\include\stl_multiset.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:multiset
rend	.\lib\avr-stl\include\stl_set.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:set
rend	.\lib\avr-stl\include\stl_tree.h	/^  const_reverse_iterator rend() const { $/;"	f	class:_Rb_tree
rend	.\lib\avr-stl\include\stl_tree.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:_Rb_tree
rend	.\lib\avr-stl\include\stl_vector.h	/^  const_reverse_iterator rend() const$/;"	f	class:vector
rend	.\lib\avr-stl\include\stl_vector.h	/^  reverse_iterator rend()$/;"	f	class:vector
replace	.\lib\avr-stl\include\stl_algo.h	/^void replace(_ForwardIter __first, _ForwardIter __last,$/;"	f
replace_copy	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter replace_copy(_InputIter __first, _InputIter __last,$/;"	f
replace_copy_if	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter replace_copy_if(_InputIter __first, _InputIter __last,$/;"	f
replace_if	.\lib\avr-stl\include\stl_algo.h	/^void replace_if(_ForwardIter __first, _ForwardIter __last,$/;"	f
repository	.\lib\FastLED\library.json	/^    "repository": {$/;"	f
repository	.\lib\I2Cdev\library.json	/^  "repository":$/;"	f
repository	.\lib\RunningMedian\library.json	/^  "repository":$/;"	f
requestFrom	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::requestFrom(uint8_t address, int quantity, uint16_t timeout) {$/;"	f	class:TwoWire
requested_size	.\lib\avr-stl\include\stl_tempbuf.h	/^  ptrdiff_t requested_size() const { return _M_original_len; }$/;"	f	class:_Temporary_buffer
reserve	.\lib\avr-stl\include\stl_bvector.h	/^  void reserve(size_type __n) {$/;"	f	class:__BVECTOR
reserve	.\lib\avr-stl\include\stl_vector.h	/^  void reserve(size_type __n) {$/;"	f	class:vector
reset	.\lib\FastLED\lib8tion.h	/^    void reset() { mPrevTrigger = getTime(); };$/;"	f	class:CEveryNTimePeriods
reset	.\lib\I2Cdev\I2Cdev.cpp	/^    void Fastwire::reset() {$/;"	f	class:Fastwire
reset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::reset() {$/;"	f	class:MPU6050
resetAccelerometerPath	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetAccelerometerPath() {$/;"	f	class:MPU6050
resetDMP	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetDMP() {$/;"	f	class:MPU6050
resetFIFO	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetFIFO() {$/;"	f	class:MPU6050
resetGyroscopePath	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetGyroscopePath() {$/;"	f	class:MPU6050
resetI2CMaster	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetI2CMaster() {$/;"	f	class:MPU6050
resetSPI	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void resetSPI() { m_SPI->SPI_CR = SPI_CR_SWRST; }$/;"	f	class:SAMHardwareSPIOutput
resetSensors	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetSensors() {$/;"	f	class:MPU6050
resetTemperaturePath	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::resetTemperaturePath() {$/;"	f	class:MPU6050
resize	.\lib\avr-stl\include\stl_bvector.h	/^  void resize(size_type __new_size, bool __x = bool()) {$/;"	f	class:__BVECTOR
resize	.\lib\avr-stl\include\stl_deque.h	/^  void resize(size_type __new_size, const value_type& __x) {$/;"	f	class:deque
resize	.\lib\avr-stl\include\stl_deque.h	/^  void resize(size_type new_size) { resize(new_size, value_type()); }$/;"	f	class:deque
resize	.\lib\avr-stl\include\stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_map
resize	.\lib\avr-stl\include\stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_multimap
resize	.\lib\avr-stl\include\stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_multiset
resize	.\lib\avr-stl\include\stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_set
resize	.\lib\avr-stl\include\stl_hashtable.h	/^  ::resize(size_type __num_elements_hint)$/;"	f	class:hashtable
resize	.\lib\avr-stl\include\stl_list.h	/^  void resize(size_type __new_size) { this->resize(__new_size, _Tp()); }$/;"	f	class:list
resize	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::resize(size_type __new_size, const _Tp& __x)$/;"	f	class:list
resize	.\lib\avr-stl\include\stl_slist.h	/^  void resize(size_type new_size) { resize(new_size, _Tp()); }$/;"	f	class:slist
resize	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::resize(size_type __len, const _Tp& __x)$/;"	f	class:slist
resize	.\lib\avr-stl\include\stl_vector.h	/^  void resize(size_type __new_size) { resize(__new_size, _Tp()); }$/;"	f	class:vector
resize	.\lib\avr-stl\include\stl_vector.h	/^  void resize(size_type __new_size, const _Tp& __x) {$/;"	f	class:vector
restoreSPIData	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void restoreSPIData() {$/;"	f	class:NRF51SPIOutput
restore_spi_state	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void inline restore_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
restore_spi_state	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void inline restore_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
result_type	.\lib\avr-stl\include\stl_function.h	/^  typedef  _Result  result_type;$/;"	t	struct:_Constant_unary_fun
result_type	.\lib\avr-stl\include\stl_function.h	/^  typedef  _Result result_type;$/;"	t	struct:_Constant_binary_fun
result_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:_Constant_void_fun
result_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:binary_function
result_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:unary_function
return_temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^void return_temporary_buffer(_Tp* __p) {$/;"	f
reverse	.\lib\avr-stl\include\stl_algo.h	/^inline void reverse(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f
reverse	.\lib\avr-stl\include\stl_list.h	/^inline void list<_Tp, _Alloc>::reverse() $/;"	f	class:list
reverse	.\lib\avr-stl\include\stl_slist.h	/^  void reverse() { $/;"	f	class:slist
reverse_bidirectional_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)$/;"	f	class:reverse_bidirectional_iterator
reverse_bidirectional_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  reverse_bidirectional_iterator() {}$/;"	f	class:reverse_bidirectional_iterator
reverse_bidirectional_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class reverse_bidirectional_iterator {$/;"	c
reverse_copy	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter reverse_copy(_BidirectionalIter __first,$/;"	f
reverse_iterator	.\lib\avr-stl\include\container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(reverse_iterator);$/;"	v
reverse_iterator	.\lib\avr-stl\include\stl_bvector.h	/^          reverse_iterator;$/;"	t	class:__BVECTOR
reverse_iterator	.\lib\avr-stl\include\stl_bvector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:__BVECTOR
reverse_iterator	.\lib\avr-stl\include\stl_deque.h	/^          reverse_iterator; $/;"	t	class:deque
reverse_iterator	.\lib\avr-stl\include\stl_deque.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:deque
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  explicit reverse_iterator(_RandomAccessIterator __x) : current(__x) {}$/;"	f	class:reverse_iterator
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  explicit reverse_iterator(iterator_type __x) : current(__x) {}$/;"	f	class:reverse_iterator
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  reverse_iterator() {}$/;"	f	class:reverse_iterator
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  reverse_iterator(const _Self& __x) : current(__x.current) {}$/;"	f	class:reverse_iterator
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^  reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:reverse_iterator
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class reverse_iterator $/;"	c
reverse_iterator	.\lib\avr-stl\include\stl_iterator.h	/^class reverse_iterator {$/;"	c
reverse_iterator	.\lib\avr-stl\include\stl_list.h	/^          reverse_iterator; $/;"	t	class:list
reverse_iterator	.\lib\avr-stl\include\stl_list.h	/^  typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:list
reverse_iterator	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:map
reverse_iterator	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:multimap
reverse_iterator	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:multiset
reverse_iterator	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:set
reverse_iterator	.\lib\avr-stl\include\stl_tree.h	/^          reverse_iterator; $/;"	t	class:_Rb_tree
reverse_iterator	.\lib\avr-stl\include\stl_tree.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:_Rb_tree
reverse_iterator	.\lib\avr-stl\include\stl_vector.h	/^          reverse_iterator;$/;"	t	class:vector
reverse_iterator	.\lib\avr-stl\include\stl_vector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:vector
reversed	.\lib\FastLED\pixelset.h	/^  bool reversed() { return len < 0; }$/;"	f	class:CPixelView
rgb2hsv_approximate	.\lib\FastLED\hsv2rgb.cpp	/^CHSV rgb2hsv_approximate( const CRGB& rgb)$/;"	f
rotate	.\lib\MPU6050\helper_3dmath.h	/^        void rotate(Quaternion *q) {$/;"	f	class:VectorFloat
rotate	.\lib\MPU6050\helper_3dmath.h	/^        void rotate(Quaternion *q) {$/;"	f	class:VectorInt16
rotate	.\lib\avr-stl\include\stl_algo.h	/^inline _ForwardIter rotate(_ForwardIter __first, _ForwardIter __middle,$/;"	f
rotate_copy	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter rotate_copy(_ForwardIter __first, _ForwardIter __middle,$/;"	f
rotation	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  rotation;$/;"	m	class:GOFi2cOLED
rxBuffer	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::rxBuffer[NBWIRE_BUFFER_LENGTH];$/;"	m	class:TwoWire	file:
rxBuffer	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t rxBuffer[];$/;"	m	class:TwoWire
rxBufferIndex	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::rxBufferIndex = 0;$/;"	m	class:TwoWire	file:
rxBufferIndex	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t rxBufferIndex;$/;"	m	class:TwoWire
rxBufferLength	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::rxBufferLength = 0;$/;"	m	class:TwoWire	file:
rxBufferLength	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t rxBufferLength;$/;"	m	class:TwoWire
s	.\lib\FastLED\pixeltypes.h	/^		        uint8_t s; };$/;"	m	union:CHSV::__anon34::__anon35::__anon37
s	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^  uint32_t s[3];$/;"	m	struct:M0ClocklessData
sInPort	.\lib\FastLED\fastpin.h	/^	static volatile RoReg *sInPort;$/;"	m	class:FastPin
sInPort	.\lib\FastLED\fastpin.h	/^template<uint8_t PIN> volatile RoReg *FastPin<PIN>::sInPort;$/;"	m	class:FastPin
sPinMask	.\lib\FastLED\fastpin.h	/^	static RwReg sPinMask;$/;"	m	class:FastPin
sPinMask	.\lib\FastLED\fastpin.h	/^template<uint8_t PIN> RwReg FastPin<PIN>::sPinMask;$/;"	m	class:FastPin
sPort	.\lib\FastLED\fastpin.h	/^	static volatile RwReg *sPort;$/;"	m	class:FastPin
sPort	.\lib\FastLED\fastpin.h	/^template<uint8_t PIN> volatile RwReg *FastPin<PIN>::sPort;$/;"	m	class:FastPin
saccum114	.\lib\FastLED\lib8tion.h	/^typedef int32_t   saccum114;\/\/\/< no direct ANSI counterpart. 1 bit int, 14 bits fraction$/;"	t
saccum1516	.\lib\FastLED\lib8tion.h	/^typedef int32_t   saccum1516;\/\/\/< ANSI: signed         _Accum. 15 bits int, 16 bits fraction$/;"	t
saccum78	.\lib\FastLED\lib8tion.h	/^typedef int16_t   saccum78; \/\/\/< ANSI: signed   short _Accum.  7 bits int, 8 bits fraction$/;"	t
saccum87	.\lib\FastLED\colorutils.h	67;"	d
sat	.\lib\FastLED\pixeltypes.h	/^		        uint8_t sat;$/;"	m	union:CHSV::__anon34::__anon35::__anon37
saturation	.\lib\FastLED\pixeltypes.h	/^		        uint8_t saturation;$/;"	m	union:CHSV::__anon34::__anon35::__anon37
saveData	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  struct saveData {$/;"	s	class:NRF51SPIOutput
saveSPIData	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void saveSPIData() {$/;"	f	class:NRF51SPIOutput
save_spi_state	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void inline save_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
save_spi_state	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void inline save_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
sb_	.\lib\FastLED\lib8tion.h	/^        uint32_t sb_   :  1;$/;"	m	struct:__anon30::__anon32
sb_exphi7	.\lib\FastLED\lib8tion.h	/^        uint32_t sb_exphi7 : 8;$/;"	m	struct:__anon30::__anon33
sbi	.\lib\I2Cdev\I2Cdev.h	258;"	d
scale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & , uint8_t b, uint8_t scale) { return scale8(b, scale); }$/;"	f	struct:PixelController
scale	.\lib\FastLED\controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }$/;"	f	struct:PixelController
scale16	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )$/;"	f
scale16by8	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t scale16by8( uint16_t i, fract8 scale )$/;"	f
scale8	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)$/;"	f
scale8	.\lib\FastLED\pixeltypes.h	/^    inline CRGB scale8 (const CRGB & scaledown ) const$/;"	f	struct:CRGB
scale8_LEAVING_R1_DIRTY	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)$/;"	f
scale8_video	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)$/;"	f
scale8_video_LEAVING_R1_DIRTY	.\lib\FastLED\lib8tion\scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)$/;"	f
sck	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^    uint32_t sck;$/;"	m	struct:NRF51SPIOutput::saveData
search	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f
search_n	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f
second	.\lib\avr-stl\include\stl_pair.h	/^  _T2 second;$/;"	m	struct:pair
second_argument_type	.\lib\avr-stl\include\stl_function.h	/^  typedef  _Arg2   second_argument_type;$/;"	t	struct:_Constant_binary_fun
second_argument_type	.\lib\avr-stl\include\stl_function.h	/^  typedef _Arg2 second_argument_type;$/;"	t	struct:binary_function
second_type	.\lib\avr-stl\include\stl_pair.h	/^  typedef _T2 second_type;$/;"	t	struct:pair
seconds16	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint16_t seconds16()$/;"	f
sei	.\lib\FastLED\platforms\arm\d21\led_sysdefs_arm_d21.h	23;"	d
sei	.\lib\FastLED\platforms\arm\nrf51\led_sysdefs_arm_nrf51.h	44;"	d
sei	.\lib\FastLED\platforms\arm\sam\led_sysdefs_arm_sam.h	36;"	d
sei	.\lib\FastLED\platforms\arm\stm32\led_sysdefs_arm_stm32.h	27;"	d
select	.\lib\FastLED\fastpin.h	/^	virtual void select() { hi(); }$/;"	f	class:Pin
select	.\lib\FastLED\fastspi_bitbang.h	/^	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } \/\/ FastPin<SELECT_PIN>::hi(); }$/;"	f	class:AVRSoftwareSPIOutput
select	.\lib\FastLED\fastspi_nop.h	/^	void select() { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
select	.\lib\FastLED\fastspi_ref.h	/^	void inline select() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->select(); } }$/;"	f	class:REFHardwareSPIOutput
select	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void inline select() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
select	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void inline select() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
select	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void inline select() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
select	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void select() { saveSPIData(); init(); }$/;"	f	class:NRF51SPIOutput
select	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void inline select() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->select(); } }$/;"	f	class:SAMHardwareSPIOutput
select	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void select() {$/;"	f	class:AVRHardwareSPIOutput
select	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void select() {$/;"	f	class:AVRUSART0SPIOutput
select	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void select() {$/;"	f	class:AVRUSART1SPIOutput
select1st	.\lib\avr-stl\include\stl_function.h	/^template <class _Pair> struct select1st : public _Select1st<_Pair> {};$/;"	s
select2nd	.\lib\avr-stl\include\stl_function.h	/^template <class _Pair> struct select2nd : public _Select2nd<_Pair> {};$/;"	s
selectBasedOnHashBit	.\lib\FastLED\noise.cpp	/^static int8_t inline __attribute__((always_inline)) selectBasedOnHashBit(uint8_t hash, uint8_t bitnumber, int8_t a, int8_t b) {$/;"	f	file:
send	.\lib\I2Cdev\I2Cdev.cpp	/^    void TwoWire::send(uint8_t data) {$/;"	f	class:TwoWire
sendCommand	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::sendCommand(unsigned char command)$/;"	f	class:GOFi2cOLED
sendData	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::sendData(unsigned char Data)$/;"	f	class:GOFi2cOLED
set	.\lib\FastLED\fastpin.h	/^	inline static void set(register port_t val) __attribute__ ((always_inline)) { *sPort = val; }$/;"	f	class:FastPin
set	.\lib\FastLED\fastpin.h	/^	inline static void set(register port_t val) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
set	.\lib\FastLED\fastpin.h	/^	inline void set(register port_t val) __attribute__ ((always_inline)) { *mPort = val; }$/;"	f	class:Pin
set	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void set(register port_t val) __attribute__ ((always_inline)) { FL_NRF_GPIO->OUT = val; }$/;"	f	class:_ARMPIN
set	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void set(register port_t val) __attribute__ ((always_inline)) { if (PIN < OUTPUT_PIN_LIMIT){ _GPB0._GPO = val; }}$/;"	f	class:_ESPPIN
set	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void set(register port_t val) __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPO = val; } else { GP16O = val; }}$/;"	f	class:_ESPPIN
set	.\lib\avr-stl\include\stl_set.h	/^  explicit set(const _Compare& __comp,$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(_InputIterator __first, _InputIterator __last)$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(const set<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(const value_type* __first, $/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(const value_type* __first, const value_type* __last) $/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(const_iterator __first, const_iterator __last)$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^  set(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:set
set	.\lib\avr-stl\include\stl_set.h	/^class set {$/;"	c
setAccelFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setAccelFIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setAccelXSelfTest	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setAccelXSelfTest(bool enabled) {$/;"	f	class:MPU6050
setAccelYSelfTest	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setAccelYSelfTest(bool enabled) {$/;"	f	class:MPU6050
setAccelZSelfTest	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setAccelZSelfTest(bool enabled) {$/;"	f	class:MPU6050
setAccelerometerPowerOnDelay	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setAccelerometerPowerOnDelay(uint8_t delay) {$/;"	f	class:MPU6050
setActive	.\src\Entity.h	/^  virtual void setActive(int tick) {};$/;"	f	class:Entity
setActive	.\src\Trap.h	/^void Trap::setActive(int tick) {$/;"	f	class:Trap
setActiveColor	.\src\Trap.h	/^void Trap::setActiveColor(CRGB::HTMLColorCode color){$/;"	f	class:Trap
setAnimationSpeed	.\src\LightEffects.cpp	/^void LightEffects::setAnimationSpeed(uint8_t animationSpeed) {$/;"	f	class:LightEffects
setAuxVDDIOLevel	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setAuxVDDIOLevel(uint8_t level) {$/;"	f	class:MPU6050
setBrightness	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::setBrightness(uint8_t b) {$/;"	f	class:Adafruit_NeoPixel
setBrightness	.\lib\FastLED\FastLED.h	/^	void setBrightness(uint8_t scale) { m_Scale = scale; }$/;"	f	class:CFastLED
setBrightness	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setBrightness(unsigned char Brightness)$/;"	f	class:GOFi2cOLED
setBrightness	.\src\LightEffects.cpp	/^void LightEffects::setBrightness(uint16_t brightness) {$/;"	f	class:LightEffects
setChangesDirection	.\src\Enemy.h	/^void Enemy::setChangesDirection(bool changesDirection) {$/;"	f	class:Enemy
setClockOutputEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setClockOutputEnabled(bool enabled) {$/;"	f	class:MPU6050
setClockSource	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setClockSource(uint8_t source) {$/;"	f	class:MPU6050
setColor	.\src\Entity.h	/^void Entity::setColor(CRGB::HTMLColorCode color){$/;"	f	class:Entity
setColorCode	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& setColorCode (uint32_t colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB
setCorrection	.\lib\FastLED\FastLED.cpp	/^void CFastLED::setCorrection(const struct CRGB & correction) {$/;"	f	class:CFastLED
setCorrection	.\lib\FastLED\controller.h	/^    CLEDController & setCorrection(CRGB correction) { m_ColorCorrection = correction; return *this; }$/;"	f	class:CLEDController
setCorrection	.\lib\FastLED\controller.h	/^    CLEDController & setCorrection(LEDColorCorrection correction) { m_ColorCorrection = correction; return *this; }$/;"	f	class:CLEDController
setCursor	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setCursor(uint8_t x, uint8_t y) {$/;"	f	class:GOFi2cOLED
setDHPFMode	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setDHPFMode(uint8_t bandwidth) {$/;"	f	class:MPU6050
setDLPFMode	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setDLPFMode(uint8_t mode) {$/;"	f	class:MPU6050
setDMPConfig1	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setDMPConfig1(uint8_t config) {$/;"	f	class:MPU6050
setDMPConfig2	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setDMPConfig2(uint8_t config) {$/;"	f	class:MPU6050
setDMPEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setDMPEnabled(bool enabled) {$/;"	f	class:MPU6050
setDeviceID	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setDeviceID(uint8_t id) {$/;"	f	class:MPU6050
setDirection	.\src\Water.h	/^void Water::setDirection(bool dir) {$/;"	f	class:Water
setDither	.\lib\FastLED\FastLED.cpp	/^void CFastLED::setDither(uint8_t ditherMode)  {$/;"	f	class:CFastLED
setDither	.\lib\FastLED\controller.h	/^    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }$/;"	f	class:CLEDController
setExternalFrameSync	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setExternalFrameSync(uint8_t sync) {$/;"	f	class:MPU6050
setExternalShadowDelayEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setExternalShadowDelayEnabled(bool enabled) {$/;"	f	class:MPU6050
setFIFOByte	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFIFOByte(uint8_t data) {$/;"	f	class:MPU6050
setFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setFSyncInterruptEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFSyncInterruptEnabled(bool enabled) {$/;"	f	class:MPU6050
setFSyncInterruptLevel	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFSyncInterruptLevel(bool level) {$/;"	f	class:MPU6050
setFreefallDetectionCounterDecrement	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFreefallDetectionCounterDecrement(uint8_t decrement) {$/;"	f	class:MPU6050
setFreefallDetectionDuration	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFreefallDetectionDuration(uint8_t duration) {$/;"	f	class:MPU6050
setFreefallDetectionThreshold	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFreefallDetectionThreshold(uint8_t threshold) {$/;"	f	class:MPU6050
setFullScaleAccelRange	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFullScaleAccelRange(uint8_t range) {$/;"	f	class:MPU6050
setFullScaleGyroRange	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setFullScaleGyroRange(uint8_t range) {$/;"	f	class:MPU6050
setHSV	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& setHSV (uint8_t hue, uint8_t sat, uint8_t val) __attribute__((always_inline))$/;"	f	struct:CRGB
setHSV	.\lib\FastLED\pixeltypes.h	/^    inline CHSV& setHSV(uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))$/;"	f	struct:CHSV
setHorizontalMode	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setHorizontalMode()$/;"	f	class:GOFi2cOLED
setHorizontalScrollProperties	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setHorizontalScrollProperties(bool direction,unsigned char startPage, unsigned char endPage, unsigned char scrollSpeed)$/;"	f	class:GOFi2cOLED
setHue	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& setHue (uint8_t hue) __attribute__((always_inline))$/;"	f	struct:CRGB
setI2CBypassEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setI2CBypassEnabled(bool enabled) {$/;"	f	class:MPU6050
setI2CMasterModeEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setI2CMasterModeEnabled(bool enabled) {$/;"	f	class:MPU6050
setInactiveColor	.\src\Trap.h	/^void Trap::setInactiveColor(CRGB::HTMLColorCode color){$/;"	f	class:Trap
setInput	.\lib\FastLED\fastpin.h	/^	inline static void setInput() { _init(); pinMode(PIN, INPUT); }$/;"	f	class:FastPin
setInput	.\lib\FastLED\fastpin.h	/^	inline static void setInput() { }$/;"	f	class:FastPin
setInput	.\lib\FastLED\fastpin.h	/^	inline void setInput() { \/* TODO: Set pin input *\/ }$/;"	f	class:Pin
setInput	.\lib\FastLED\fastpin.h	/^	inline void setInput() { pinMode(mPin, INPUT); }$/;"	f	class:Pin
setInput	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void setInput() { FL_NRF_GPIO->DIRCLR = _MASK; }$/;"	f	class:_ARMPIN
setInput	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void setInput() { pinMode(PIN, INPUT); }$/;"	f	class:_ESPPIN
setInput	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void setInput() { pinMode(PIN, INPUT); }$/;"	f	class:_ESPPIN
setIntDMPEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntDMPEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntDataReadyEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntDataReadyEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntEnabled(uint8_t enabled) {$/;"	f	class:MPU6050
setIntFIFOBufferOverflowEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntFIFOBufferOverflowEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntFreefallEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntFreefallEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntI2CMasterEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntI2CMasterEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntMotionEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntMotionEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntPLLReadyEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntPLLReadyEnabled(bool enabled) {$/;"	f	class:MPU6050
setIntZeroMotionEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setIntZeroMotionEnabled(bool enabled) {$/;"	f	class:MPU6050
setInterruptDrive	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setInterruptDrive(bool drive) {$/;"	f	class:MPU6050
setInterruptLatch	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setInterruptLatch(bool latch) {$/;"	f	class:MPU6050
setInterruptLatchClear	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setInterruptLatchClear(bool clear) {$/;"	f	class:MPU6050
setInterruptMode	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setInterruptMode(bool mode) {$/;"	f	class:MPU6050
setInverseDisplay	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setInverseDisplay()$/;"	f	class:GOFi2cOLED
setLeds	.\lib\FastLED\controller.h	/^    CLEDController & setLeds(CRGB *data, int nLeds) {$/;"	f	class:CLEDController
setLives	.\src\Player.h	/^void Player::setLives(short lives){$/;"	f	class:Player
setMasterClockSpeed	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMasterClockSpeed(uint8_t speed) {$/;"	f	class:MPU6050
setMaxPowerInMilliWatts	.\lib\FastLED\FastLED.h	/^	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }$/;"	f	class:CFastLED
setMaxPowerInVoltsAndMilliamps	.\lib\FastLED\FastLED.h	/^	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }$/;"	f	class:CFastLED
setMaxRefreshRate	.\lib\FastLED\FastLED.cpp	/^void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {$/;"	f	class:CFastLED
setMemoryBank	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {$/;"	f	class:MPU6050
setMemoryStartAddress	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMemoryStartAddress(uint8_t address) {$/;"	f	class:MPU6050
setMotionDetectionCounterDecrement	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMotionDetectionCounterDecrement(uint8_t decrement) {$/;"	f	class:MPU6050
setMotionDetectionDuration	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMotionDetectionDuration(uint8_t duration) {$/;"	f	class:MPU6050
setMotionDetectionThreshold	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {$/;"	f	class:MPU6050
setMoves	.\src\Enemy.h	/^void Enemy::setMoves(bool moves) {$/;"	f	class:Enemy
setMultiMasterEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setMultiMasterEnabled(bool enabled) {$/;"	f	class:MPU6050
setNormalDisplay	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setNormalDisplay()$/;"	f	class:GOFi2cOLED
setOTPBankValid	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setOTPBankValid(bool enabled) {$/;"	f	class:MPU6050
setOutput	.\lib\FastLED\fastpin.h	/^	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }$/;"	f	class:FastPin
setOutput	.\lib\FastLED\fastpin.h	/^	inline static void setOutput() { }$/;"	f	class:FastPin
setOutput	.\lib\FastLED\fastpin.h	/^	inline void setOutput() { \/* TODO: Set pin output *\/ }$/;"	f	class:Pin
setOutput	.\lib\FastLED\fastpin.h	/^	inline void setOutput() { pinMode(mPin, OUTPUT); }$/;"	f	class:Pin
setOutput	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void setOutput() { FL_NRF_GPIO->DIRSET = _MASK; }$/;"	f	class:_ARMPIN
setOutput	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void setOutput() { pinMode(PIN, OUTPUT); }$/;"	f	class:_ESPPIN
setOutput	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void setOutput() { pinMode(PIN, OUTPUT); }$/;"	f	class:_ESPPIN
setPageMode	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setPageMode()$/;"	f	class:GOFi2cOLED
setParity	.\lib\FastLED\pixeltypes.h	/^    inline void setParity( uint8_t parity)$/;"	f	struct:CRGB
setPeriod	.\lib\FastLED\lib8tion.h	/^    void setPeriod( timeType period) { mPeriod = period; };$/;"	f	class:CEveryNTimePeriods
setPin	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::setPin(uint8_t p) {$/;"	f	class:Adafruit_NeoPixel
setPin	.\lib\FastLED\fastpin.h	/^	void setPin(int pin) { mPin = pin; _init(); }$/;"	f	class:Pin
setPixelColor	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::setPixelColor($/;"	f	class:Adafruit_NeoPixel
setPixelColor	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {$/;"	f	class:Adafruit_NeoPixel
setPosition	.\src\Entity.h	/^void Entity::setPosition(int position){$/;"	f	class:Entity
setRGB	.\lib\FastLED\pixeltypes.h	/^	inline CRGB& setRGB (uint8_t nr, uint8_t ng, uint8_t nb) __attribute__((always_inline))$/;"	f	struct:CRGB
setRate	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setRate(uint8_t rate) {$/;"	f	class:MPU6050
setRotation	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setRotation(uint8_t x) {$/;"	f	class:GOFi2cOLED
setSPIRate	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void setSPIRate() {$/;"	f	class:ARMHardwareSPIOutput
setSPIRate	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void setSPIRate() {$/;"	f	class:ARMHardwareSPIOutput
setSPIRate	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void setSPIRate() {$/;"	f	class:ARMHardwareSPIOutput
setSPIRate	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void setSPIRate() {$/;"	f	class:AVRHardwareSPIOutput
setSPIRate	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void setSPIRate() {$/;"	f	class:AVRUSART0SPIOutput
setSPIRate	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void setSPIRate() {$/;"	f	class:AVRUSART1SPIOutput
setSelect	.\lib\FastLED\fastspi_bitbang.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRSoftwareSPIOutput
setSelect	.\lib\FastLED\fastspi_nop.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect;  }$/;"	f	class:NOPSPIOutput
setSelect	.\lib\FastLED\fastspi_ref.h	/^	void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput
setSelect	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
setSelect	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
setSelect	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
setSelect	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:NRF51SPIOutput
setSelect	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:SAMHardwareSPIOutput
setSelect	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRHardwareSPIOutput
setSelect	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART0SPIOutput
setSelect	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART1SPIOutput
setSize	.\src\Lava.h	/^void Trap::setSize(short size) {$/;"	f	class:Trap
setSize	.\src\Trap.h	/^void Trap::setSize(short size) {$/;"	f	class:Trap
setSize	.\src\Water.h	/^void Water::setSize(uint8_t size) {$/;"	f	class:Water
setSlave0FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave0FIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setSlave1FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave1FIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setSlave2FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave2FIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setSlave3FIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave3FIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setSlave4Address	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4Address(uint8_t address) {$/;"	f	class:MPU6050
setSlave4Enabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4Enabled(bool enabled) {$/;"	f	class:MPU6050
setSlave4InterruptEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4InterruptEnabled(bool enabled) {$/;"	f	class:MPU6050
setSlave4MasterDelay	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4MasterDelay(uint8_t delay) {$/;"	f	class:MPU6050
setSlave4OutputByte	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4OutputByte(uint8_t data) {$/;"	f	class:MPU6050
setSlave4Register	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4Register(uint8_t reg) {$/;"	f	class:MPU6050
setSlave4WriteMode	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlave4WriteMode(bool mode) {$/;"	f	class:MPU6050
setSlaveAddress	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {$/;"	f	class:MPU6050
setSlaveDataLength	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveDataLength(uint8_t num, uint8_t length) {$/;"	f	class:MPU6050
setSlaveDelayEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveDelayEnabled(uint8_t num, bool enabled) {$/;"	f	class:MPU6050
setSlaveEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveEnabled(uint8_t num, bool enabled) {$/;"	f	class:MPU6050
setSlaveOutputByte	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveOutputByte(uint8_t num, uint8_t data) {$/;"	f	class:MPU6050
setSlaveReadWriteTransitionEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveReadWriteTransitionEnabled(bool enabled) {$/;"	f	class:MPU6050
setSlaveRegister	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveRegister(uint8_t num, uint8_t reg) {$/;"	f	class:MPU6050
setSlaveWordByteSwap	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveWordByteSwap(uint8_t num, bool enabled) {$/;"	f	class:MPU6050
setSlaveWordGroupOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveWordGroupOffset(uint8_t num, bool enabled) {$/;"	f	class:MPU6050
setSlaveWriteMode	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSlaveWriteMode(uint8_t num, bool mode) {$/;"	f	class:MPU6050
setSleepEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setSleepEnabled(bool enabled) {$/;"	f	class:MPU6050
setSpawnColor	.\src\SpawnPoint.h	/^void SpawnPoint::setSpawnColor(CRGB::HTMLColorCode color){$/;"	f	class:SpawnPoint
setSpawnSpeed	.\src\SpawnPoint.h	/^void SpawnPoint::setSpawnSpeed(short speed) {$/;"	f	class:SpawnPoint
setStandbyXAccelEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setStandbyXAccelEnabled(bool enabled) {$/;"	f	class:MPU6050
setStandbyXGyroEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setStandbyXGyroEnabled(bool enabled) {$/;"	f	class:MPU6050
setStandbyYAccelEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setStandbyYAccelEnabled(bool enabled) {$/;"	f	class:MPU6050
setStandbyYGyroEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setStandbyYGyroEnabled(bool enabled) {$/;"	f	class:MPU6050
setStandbyZAccelEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setStandbyZAccelEnabled(bool enabled) {$/;"	f	class:MPU6050
setStandbyZGyroEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setStandbyZGyroEnabled(bool enabled) {$/;"	f	class:MPU6050
setTempFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setTempFIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setTempSensorEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setTempSensorEnabled(bool enabled) {$/;"	f	class:MPU6050
setTemperature	.\lib\FastLED\FastLED.cpp	/^void CFastLED::setTemperature(const struct CRGB & temp) {$/;"	f	class:CFastLED
setTemperature	.\lib\FastLED\controller.h	/^    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return *this; }$/;"	f	class:CLEDController
setTemperature	.\lib\FastLED\controller.h	/^    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }$/;"	f	class:CLEDController
setTextColor	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^ void GOFi2cOLED::setTextColor(uint8_t c, uint8_t b) {$/;"	f	class:GOFi2cOLED
setTextColor	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setTextColor(uint8_t c) {$/;"	f	class:GOFi2cOLED
setTextSize	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setTextSize(uint8_t s) {$/;"	f	class:GOFi2cOLED
setTextWrap	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setTextWrap(boolean w) {$/;"	f	class:GOFi2cOLED
setVerticalMode	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^void GOFi2cOLED::setVerticalMode()$/;"	f	class:GOFi2cOLED
setWaitForExternalSensorEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setWaitForExternalSensorEnabled(bool enabled) {$/;"	f	class:MPU6050
setWakeCycleEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setWakeCycleEnabled(bool enabled) {$/;"	f	class:MPU6050
setWakeFrequency	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setWakeFrequency(uint8_t frequency) {$/;"	f	class:MPU6050
setXAccelOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setXAccelOffset(int16_t offset) {$/;"	f	class:MPU6050
setXFineGain	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setXFineGain(int8_t gain) {$/;"	f	class:MPU6050
setXGyroFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setXGyroFIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setXGyroOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setXGyroOffset(int16_t offset) {$/;"	f	class:MPU6050
setXGyroOffsetTC	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setXGyroOffsetTC(int8_t offset) {$/;"	f	class:MPU6050
setYAccelOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setYAccelOffset(int16_t offset) {$/;"	f	class:MPU6050
setYFineGain	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setYFineGain(int8_t gain) {$/;"	f	class:MPU6050
setYGyroFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setYGyroFIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setYGyroOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setYGyroOffset(int16_t offset) {$/;"	f	class:MPU6050
setYGyroOffsetTC	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setYGyroOffsetTC(int8_t offset) {$/;"	f	class:MPU6050
setZAccelOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZAccelOffset(int16_t offset) {$/;"	f	class:MPU6050
setZFineGain	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZFineGain(int8_t gain) {$/;"	f	class:MPU6050
setZGyroFIFOEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZGyroFIFOEnabled(bool enabled) {$/;"	f	class:MPU6050
setZGyroOffset	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZGyroOffset(int16_t offset) {$/;"	f	class:MPU6050
setZGyroOffsetTC	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZGyroOffsetTC(int8_t offset) {$/;"	f	class:MPU6050
setZeroMotionDetectionDuration	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {$/;"	f	class:MPU6050
setZeroMotionDetectionThreshold	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {$/;"	f	class:MPU6050
set_difference	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
set_intersection	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
set_max_power_in_milliwatts	.\lib\FastLED\power_mgt.cpp	/^void set_max_power_in_milliwatts( uint32_t powerInmW)$/;"	f
set_max_power_in_volts_and_milliamps	.\lib\FastLED\power_mgt.cpp	/^void set_max_power_in_volts_and_milliamps( uint8_t volts, uint32_t milliamps)$/;"	f
set_max_power_indicator_LED	.\lib\FastLED\power_mgt.cpp	/^void set_max_power_indicator_LED( uint8_t pinNumber)$/;"	f
set_symmetric_difference	.\lib\avr-stl\include\stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
set_union	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
setup	.\lib\I2Cdev\I2Cdev.cpp	/^    void Fastwire::setup(int khz, boolean pullup) {$/;"	f	class:Fastwire
sfract15	.\lib\FastLED\lib8tion.h	/^typedef int16_t   sfract15; \/\/\/< ANSI: signed         _Fract$/;"	t
sfract15ToFloat	.\lib\FastLED\lib8tion.h	/^LIB8STATIC float sfract15ToFloat( sfract15 y)$/;"	f
sfract7	.\lib\FastLED\lib8tion.h	/^typedef int8_t    sfract7;  \/\/\/< ANSI: signed   short _Fract$/;"	t
shorts	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		uint16_t shorts[6];$/;"	m	union:InlineBlockClocklessController::__anon46
shorts	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		uint16_t shorts[8];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon47
shorts	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		uint16_t shorts[6];$/;"	m	union:InlineBlockClocklessController::__anon49
shorts	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		uint16_t shorts[8];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon50
shorts	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^	uint16_t shorts[4];$/;"	m	union:InlineBlockClocklessController::__anon53
shorts	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^		uint16_t shorts[4];$/;"	m	union:InlineBlockClocklessController::__anon54
shouldWait	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  static bool shouldWait(bool wait = false) __attribute__((always_inline)) __attribute__((always_inline)) {$/;"	f	class:NRF51SPIOutput
shouldWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {$/;"	f	class:AVRHardwareSPIOutput
shouldWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {$/;"	f	class:AVRUSART0SPIOutput
shouldWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {$/;"	f	class:AVRUSART1SPIOutput
show	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::show(void) {$/;"	f	class:Adafruit_NeoPixel
show	.\lib\FastLED\FastLED.cpp	/^void CFastLED::show(uint8_t scale) {$/;"	f	class:CFastLED
show	.\lib\FastLED\FastLED.h	/^	void show() { show(m_Scale); }$/;"	f	class:CFastLED
show	.\lib\FastLED\controller.h	/^    void show(const struct CRGB *data, int nLeds, uint8_t brightness) {$/;"	f	class:CLEDController
show	.\lib\FastLED\controller.h	/^  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {$/;"	f	class:CPixelLEDController
show	.\src\LightEffects.cpp	/^void LightEffects::show() {$/;"	f	class:LightEffects
showColor	.\lib\FastLED\FastLED.cpp	/^void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {$/;"	f	class:CFastLED
showColor	.\lib\FastLED\FastLED.h	/^	void showColor(const struct CRGB & color) { showColor(color, m_Scale); }$/;"	f	class:CFastLED
showColor	.\lib\FastLED\controller.h	/^    void showColor(const struct CRGB & data, uint8_t brightness=255) {$/;"	f	class:CLEDController
showColor	.\lib\FastLED\controller.h	/^    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {$/;"	f	class:CLEDController
showColor	.\lib\FastLED\controller.h	/^  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {$/;"	f	class:CPixelLEDController
showCrippleAnimation	.\src\LightEffects.cpp	/^void LightEffects::showCrippleAnimation(int center, uint16_t steps, CRGB::HTMLColorCode crippleColor, CRGB::HTMLColorCode bgColor) {$/;"	f	class:LightEffects
showLedData	.\lib\FastLED\platforms\arm\common\m0clockless.h	/^showLedData(volatile uint32_t *_port, uint32_t _bitmask, const uint8_t *_leds, uint32_t num_leds, struct M0ClocklessData *pData) {$/;"	f
showLeds	.\lib\FastLED\controller.h	/^    void showLeds(uint8_t brightness=255) {$/;"	f	class:CLEDController
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:APA102Controller
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:LPD8806Controller
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:P9813Controller
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:PixieController
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:SK9822Controller
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:SM16716Controller
showPixels	.\lib\FastLED\chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:WS2801Controller
showPixels	.\lib\FastLED\dmx.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:DMXSerialController
showPixels	.\lib\FastLED\dmx.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:DMXSimpleController
showPixels	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PMASK> & pixels) { $/;"	f	class:SixteenWayInlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) { $/;"	f	class:InlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\arm\k20\octows2811_controller.h	/^  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {$/;"	f	class:COctoWS2811Controller
showPixels	.\lib\FastLED\platforms\arm\k20\smartmatrix_t3.h	/^  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:CSmartMatrixController
showPixels	.\lib\FastLED\platforms\arm\k20\ws2812serial_controller.h	/^  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {$/;"	f	class:CWS2812SerialController
showPixels	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, LANE_MASK> & pixels) { $/;"	f	class:InlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PMASK> & pixels) { $/;"	f	class:SixteenWayInlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^  virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {$/;"	f	class:InlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {$/;"	f	class:InlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showPixels	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {$/;"	f	class:InlineBlockClocklessController
showPixels	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\d21\clockless_arm_d21.h	/^  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^		static uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, PMASK> &allpixels) {$/;"	f	class:SixteenWayInlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, LANE_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^		static uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, PMASK> &allpixels) {$/;"	f	class:SixteenWayInlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\kl26\clockless_arm_kl26.h	/^  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\nrf51\clockless_arm_nrf51.h	/^  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\avr\clockless_trinket.h	/^	static void \/*__attribute__((optimize("O0")))*\/  \/*__attribute__ ((always_inline))*\/  showRGBInternal(PixelController<RGB_ORDER> & pixels)  {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showRGBInternal	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^		static uint32_t ICACHE_RAM_ATTR showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController
showRGBInternal	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	static uint32_t ICACHE_RAM_ATTR showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController
showSnakeAnimation	.\src\LightEffects.cpp	/^void LightEffects::showSnakeAnimation(bool direction, CRGB::HTMLColorCode color) {$/;"	f	class:LightEffects
show_at_max_brightness_for_power	.\lib\FastLED\power_mgt.cpp	/^void show_at_max_brightness_for_power()$/;"	f
signbit	.\lib\FastLED\lib8tion.h	/^        uint32_t signbit:   1;$/;"	m	struct:__anon30::__anon31
simple_alloc	.\lib\avr-stl\include\stl_alloc.h	/^class simple_alloc {$/;"	c
sin16	.\lib\FastLED\lib8tion\trig8.h	18;"	d
sin16	.\lib\FastLED\lib8tion\trig8.h	20;"	d
sin16_C	.\lib\FastLED\lib8tion\trig8.h	/^LIB8STATIC int16_t sin16_C( uint16_t theta )$/;"	f
sin16_avr	.\lib\FastLED\lib8tion\trig8.h	/^LIB8STATIC int16_t sin16_avr( uint16_t theta )$/;"	f
sin8	.\lib\FastLED\lib8tion\trig8.h	144;"	d
sin8	.\lib\FastLED\lib8tion\trig8.h	146;"	d
sin8_C	.\lib\FastLED\lib8tion\trig8.h	/^LIB8STATIC uint8_t sin8_C( uint8_t theta)$/;"	f
sin8_avr	.\lib\FastLED\lib8tion\trig8.h	/^LIB8STATIC uint8_t  sin8_avr( uint8_t theta)$/;"	f
sine8	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^uint8_t Adafruit_NeoPixel::sine8(uint8_t x) const {$/;"	f	class:Adafruit_NeoPixel
single_client_alloc	.\lib\avr-stl\include\stl_alloc.h	/^typedef __default_alloc_template<false, 0> single_client_alloc;$/;"	t
single_client_alloc	.\lib\avr-stl\include\stl_alloc.h	/^typedef malloc_alloc single_client_alloc;$/;"	t
size	.\lib\FastLED\FastLED.h	/^	int size() { return (*this)[0].size(); }$/;"	f	class:CFastLED
size	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline int size() { return mLen; }$/;"	f	struct:PixelController
size	.\lib\FastLED\controller.h	/^    virtual int size() { return m_nLeds; }$/;"	f	class:CLEDController
size	.\lib\FastLED\pixelset.h	/^  int size() { return abs(len); }$/;"	f	class:CPixelView
size	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController
size	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController
size	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController
size	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController
size	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController
size	.\lib\avr-stl\include\stl_bvector.h	/^  size_type size() const { return size_type(end() - begin()); }$/;"	f	class:__BVECTOR
size	.\lib\avr-stl\include\stl_deque.h	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:deque
size	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_map
size	.\lib\avr-stl\include\stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_multimap
size	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_multiset
size	.\lib\avr-stl\include\stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_set
size	.\lib\avr-stl\include\stl_hashtable.h	/^  size_type size() const { return _M_num_elements; }$/;"	f	class:hashtable
size	.\lib\avr-stl\include\stl_list.h	/^  size_type size() const {$/;"	f	class:list
size	.\lib\avr-stl\include\stl_map.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:map
size	.\lib\avr-stl\include\stl_multimap.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:multimap
size	.\lib\avr-stl\include\stl_multiset.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:multiset
size	.\lib\avr-stl\include\stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:priority_queue
size	.\lib\avr-stl\include\stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:queue
size	.\lib\avr-stl\include\stl_set.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:set
size	.\lib\avr-stl\include\stl_slist.h	/^  size_type size() const { return __slist_size(this->_M_head._M_next); }$/;"	f	class:slist
size	.\lib\avr-stl\include\stl_stack.h	/^  size_type size() const { return c.size(); }$/;"	f	class:stack
size	.\lib\avr-stl\include\stl_tempbuf.h	/^  ptrdiff_t size() const { return _M_len; }$/;"	f	class:_Temporary_buffer
size	.\lib\avr-stl\include\stl_tree.h	/^  size_type size() const { return _M_node_count; }$/;"	f	class:_Rb_tree
size	.\lib\avr-stl\include\stl_vector.h	/^  size_type size() const$/;"	f	class:vector
size_type	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(size_type);$/;"	v
size_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:allocator
size_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef size_t     size_type;$/;"	t	class:allocator
size_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef size_t    size_type;$/;"	t	struct:__allocator
size_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef size_t size_type;$/;"	t	class:__BVECTOR
size_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef size_t size_type;$/;"	t	class:deque
size_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef size_t size_type;$/;"	t	struct:_Deque_iterator
size_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_map
size_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_multimap
size_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_multiset
size_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_set
size_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef size_t            size_type;$/;"	t	class:hashtable
size_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:_Hashtable_const_iterator
size_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:_Hashtable_iterator
size_type	.\lib\avr-stl\include\stl_list.h	/^  typedef size_t                     size_type;$/;"	t	struct:_List_iterator_base
size_type	.\lib\avr-stl\include\stl_list.h	/^  typedef size_t size_type;$/;"	t	class:list
size_type	.\lib\avr-stl\include\stl_map.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:map
size_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:multimap
size_type	.\lib\avr-stl\include\stl_multiset.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:multiset
size_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:priority_queue
size_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:queue
size_type	.\lib\avr-stl\include\stl_set.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:set
size_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef size_t               size_type;$/;"	t	struct:_Slist_iterator_base
size_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef size_t            size_type;$/;"	t	class:slist
size_type	.\lib\avr-stl\include\stl_stack.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:stack
size_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef size_t size_type;$/;"	t	class:_Rb_tree
size_type	.\lib\avr-stl\include\stl_vector.h	/^  typedef size_t size_type;$/;"	t	class:vector
slist	.\lib\avr-stl\include\stl_slist.h	/^  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^  explicit slist(size_type __n) : _Base(allocator_type())$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^  slist(_InputIterator __first, _InputIterator __last,$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^  slist(const slist& __x) : _Base(__x.get_allocator())$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^  slist(const value_type* __first, const value_type* __last,$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^  slist(const_iterator __first, const_iterator __last,$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^  slist(size_type __n, const value_type& __x,$/;"	f	class:slist
slist	.\lib\avr-stl\include\stl_slist.h	/^class slist : private _Slist_base<_Tp,_Alloc>$/;"	c
slowswap	.\lib\FastLED\bitswap.h	/^__attribute__((always_inline)) inline void slowswap(unsigned char *A, unsigned char *B) {$/;"	f
sort	.\lib\RunningMedian\RunningMedian.cpp	/^void RunningMedian::sort()$/;"	f	class:RunningMedian
sort	.\lib\avr-stl\include\stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f
sort	.\lib\avr-stl\include\stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f
sort	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::sort()$/;"	f	class:list
sort	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:list
sort	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::sort()$/;"	f	class:slist
sort	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:slist
sort_heap	.\lib\avr-stl\include\stl_heap.h	/^sort_heap(_RandomAccessIterator __first,$/;"	f
sort_heap	.\lib\avr-stl\include\stl_heap.h	/^void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f
spawns	.\src\SpawnPoint.h	/^bool SpawnPoint::spawns() {$/;"	f	class:SpawnPoint
splice	.\lib\avr-stl\include\stl_list.h	/^  void splice(iterator __position, list& __x) {$/;"	f	class:list
splice	.\lib\avr-stl\include\stl_list.h	/^  void splice(iterator __position, list&, iterator __first, iterator __last) {$/;"	f	class:list
splice	.\lib\avr-stl\include\stl_list.h	/^  void splice(iterator __position, list&, iterator __i) {$/;"	f	class:list
splice	.\lib\avr-stl\include\stl_slist.h	/^  void splice(iterator __pos, slist& __x) {$/;"	f	class:slist
splice	.\lib\avr-stl\include\stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __first, iterator __last)$/;"	f	class:slist
splice	.\lib\avr-stl\include\stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __i) {$/;"	f	class:slist
splice_after	.\lib\avr-stl\include\stl_slist.h	/^  void splice_after(iterator __pos, $/;"	f	class:slist
splice_after	.\lib\avr-stl\include\stl_slist.h	/^  void splice_after(iterator __pos, iterator __prev)$/;"	f	class:slist
splice_after	.\lib\avr-stl\include\stl_slist.h	/^  void splice_after(iterator __pos, slist& __x)$/;"	f	class:slist
sport	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static port_ptr_t sport() __attribute__ ((always_inline)) { if (PIN<OUTPUT_PIN_LIMIT) {return &_GPB0._GPOS; }}$/;"	f	class:_ESPPIN
sport	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static port_ptr_t sport() __attribute__ ((always_inline)) { return &_GPB._GPOS; } \/\/ there is no GP160 support for this$/;"	f	class:_ESPPIN
sqrt16	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC uint8_t sqrt16(uint16_t x)$/;"	f
squarewave8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t squarewave8( uint8_t in, uint8_t pulsewidth=128)$/;"	f
stable_partition	.\lib\avr-stl\include\stl_algo.h	/^inline _ForwardIter stable_partition(_ForwardIter __first,$/;"	f
stable_sort	.\lib\avr-stl\include\stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f
stack	.\lib\avr-stl\include\stl_stack.h	/^  explicit stack(const _Sequence& __s) : c(__s) {}$/;"	f	class:stack
stack	.\lib\avr-stl\include\stl_stack.h	/^  stack() : c() {}$/;"	f	class:stack
stack	.\lib\avr-stl\include\stl_stack.h	/^class stack {$/;"	c
startBoundary	.\lib\FastLED\chipsets.h	/^	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }$/;"	f	class:APA102Controller
startBoundary	.\lib\FastLED\chipsets.h	/^	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }$/;"	f	class:SK9822Controller
state_type	.\lib\avr-stl\include\char_traits.h	/^	typedef char state_type;$/;"	t	class:__char_traits_base
state_type	.\lib\avr-stl\include\char_traits.h	/^  typedef mbstate_t state_type;$/;"	t	class:__char_traits_base
static_assert	.\lib\FastLED\cpp_compat.h	8;"	d
stepAdvanceAndLoadAndScale0	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0() { stepDithering(); return advanceAndLoadAndScale<0>(*this); }$/;"	f	struct:PixelController
stepAdvanceAndLoadAndScale0	.\lib\FastLED\controller.h	/^        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0(int lane) { stepDithering(); return advanceAndLoadAndScale<0>(*this, lane); }$/;"	f	struct:PixelController
stepDithering	.\lib\FastLED\controller.h	/^         __attribute__((always_inline)) inline void stepDithering() {$/;"	f	struct:PixelController
stop	.\lib\FastLED\fastspi_bitbang.h	/^	static void stop() { }$/;"	f	class:AVRSoftwareSPIOutput
stop	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void stop() {$/;"	f	class:AVRUSART0SPIOutput
stop	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void stop() {$/;"	f	class:AVRUSART1SPIOutput
stop	.\lib\I2Cdev\I2Cdev.cpp	/^    byte Fastwire::stop() {$/;"	f	class:Fastwire
str	.\lib\FastLED\FastLED.h	8;"	d
strcat_P	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	70;"	d
strcat_P	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	70;"	d
strcmp_P	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	71;"	d
strcmp_P	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	71;"	d
strcpy_P	.\lib\MPU6050\MPU6050_6Axis_MotionApps20.h	69;"	d
strcpy_P	.\lib\MPU6050\MPU6050_9Axis_MotionApps41.h	69;"	d
streambuf_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:istreambuf_iterator
streambuf_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:ostreambuf_iterator
string	.\lib\avr-stl\include\stl_string_fwd.h	/^typedef basic_string<char>    string;$/;"	t
strobe	.\lib\FastLED\fastpin.h	/^	inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:FastPin
strobe	.\lib\FastLED\fastpin.h	/^	inline static void strobe() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
strobe	.\lib\FastLED\fastpin.h	/^	inline void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:Pin
strobe	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:_ARMPIN
strobe	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:_ESPPIN
strobe	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:_ESPPIN
sub4	.\lib\FastLED\bitswap.h	/^} sub4;$/;"	t	typeref:struct:__anon21
sub8	.\lib\FastLED\lib8tion\math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t sub8( uint8_t i, uint8_t j)$/;"	f
subFromRGB	.\lib\FastLED\pixelset.h	/^  inline CPixelView & subFromRGB(uint8_t inc) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) -= inc; } return *this; }$/;"	f	class:CPixelView
subtractFromRGB	.\lib\FastLED\pixeltypes.h	/^    inline CRGB& subtractFromRGB(uint8_t d )$/;"	f	struct:CRGB
subtractive_rng	.\lib\avr-stl\include\stl_function.h	/^  subtractive_rng() { _M_initialize(161803398u); }$/;"	f	class:subtractive_rng
subtractive_rng	.\lib\avr-stl\include\stl_function.h	/^  subtractive_rng() { _M_initialize(16180u); }$/;"	f	class:subtractive_rng
subtractive_rng	.\lib\avr-stl\include\stl_function.h	/^  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }$/;"	f	class:subtractive_rng
subtractive_rng	.\lib\avr-stl\include\stl_function.h	/^class subtractive_rng : public unary_function<unsigned int, unsigned int> {$/;"	c
swap	.\lib\GOFi2cOLED\GOFi2cOLED.h	100;"	d
swap	.\lib\avr-stl\include\stl_algobase.h	/^inline void swap(_Tp& __a, _Tp& __b) {$/;"	f
swap	.\lib\avr-stl\include\stl_bvector.h	/^  void swap(__BVECTOR& __x) {$/;"	f	class:__BVECTOR
swap	.\lib\avr-stl\include\stl_bvector.h	/^inline void swap(_Bit_reference __x, _Bit_reference __y)$/;"	f
swap	.\lib\avr-stl\include\stl_bvector.h	/^inline void swap(bit_vector& __x, bit_vector& __y) {$/;"	f
swap	.\lib\avr-stl\include\stl_deque.h	/^  void swap(deque& __x) {$/;"	f	class:deque
swap	.\lib\avr-stl\include\stl_deque.h	/^inline void swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y) {$/;"	f
swap	.\lib\avr-stl\include\stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_map
swap	.\lib\avr-stl\include\stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_multimap
swap	.\lib\avr-stl\include\stl_hash_map.h	/^swap(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f
swap	.\lib\avr-stl\include\stl_hash_map.h	/^swap(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f
swap	.\lib\avr-stl\include\stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	f	class:hash_multiset
swap	.\lib\avr-stl\include\stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_set
swap	.\lib\avr-stl\include\stl_hash_set.h	/^swap(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f
swap	.\lib\avr-stl\include\stl_hash_set.h	/^swap(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f
swap	.\lib\avr-stl\include\stl_hashtable.h	/^  void swap(hashtable& __ht)$/;"	f	class:hashtable
swap	.\lib\avr-stl\include\stl_hashtable.h	/^inline void swap(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1,$/;"	f
swap	.\lib\avr-stl\include\stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	f	class:list
swap	.\lib\avr-stl\include\stl_list.h	/^swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f
swap	.\lib\avr-stl\include\stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:map
swap	.\lib\avr-stl\include\stl_map.h	/^inline void swap(map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
swap	.\lib\avr-stl\include\stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:multimap
swap	.\lib\avr-stl\include\stl_multimap.h	/^inline void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f
swap	.\lib\avr-stl\include\stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:multiset
swap	.\lib\avr-stl\include\stl_multiset.h	/^inline void swap(multiset<_Key,_Compare,_Alloc>& __x, $/;"	f
swap	.\lib\avr-stl\include\stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:set
swap	.\lib\avr-stl\include\stl_set.h	/^inline void swap(set<_Key,_Compare,_Alloc>& __x, $/;"	f
swap	.\lib\avr-stl\include\stl_slist.h	/^  void swap(slist& __x)$/;"	f	class:slist
swap	.\lib\avr-stl\include\stl_slist.h	/^inline void swap(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y) {$/;"	f
swap	.\lib\avr-stl\include\stl_tree.h	/^  void swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t) {$/;"	f	class:_Rb_tree
swap	.\lib\avr-stl\include\stl_tree.h	/^swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f
swap	.\lib\avr-stl\include\stl_vector.h	/^  void swap(vector<_Tp, _Alloc>& __x) {$/;"	f	class:vector
swap	.\lib\avr-stl\include\stl_vector.h	/^inline void swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f
swap_ranges	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter2 swap_ranges(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f
swapbits8	.\lib\FastLED\bitswap.h	/^__attribute__((always_inline)) inline void swapbits8(bitswap_type in, bitswap_type & out) {$/;"	f
switchSPIEnabled	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::switchSPIEnabled(bool enabled) {$/;"	f	class:MPU6050
temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:temporary_buffer
temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>$/;"	s
test1abs	.\lib\FastLED\lib8tion.cpp	/^void test1abs( int8_t i)$/;"	f
testConnection	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::testConnection() {$/;"	f	class:MPU6050
testabs	.\lib\FastLED\lib8tion.cpp	/^void testabs()$/;"	f
testmul8	.\lib\FastLED\lib8tion.cpp	/^void testmul8()$/;"	f
testnscale8x3	.\lib\FastLED\lib8tion.cpp	/^void testnscale8x3()$/;"	f
testqadd8	.\lib\FastLED\lib8tion.cpp	/^void testqadd8()$/;"	f
testscale8	.\lib\FastLED\lib8tion.cpp	/^void testscale8()$/;"	f
textbgcolor	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  textcolor, textbgcolor;$/;"	m	class:GOFi2cOLED
textcolor	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  textcolor, textbgcolor;$/;"	m	class:GOFi2cOLED
textsize	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^uint8_t  textsize;$/;"	m	class:GOFi2cOLED
this_dummy_member_must_be_first	.\lib\avr-stl\include\type_traits.h	/^   typedef __true_type     this_dummy_member_must_be_first;$/;"	t	struct:__type_traits
to_char_type	.\lib\avr-stl\include\char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:__char_traits_base
to_char_type	.\lib\avr-stl\include\char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:char_traits
to_int_type	.\lib\avr-stl\include\char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:__char_traits_base
to_int_type	.\lib\avr-stl\include\char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:char_traits
toggle	.\lib\FastLED\fastpin.h	/^	inline static void toggle() __attribute__ ((always_inline)) { *sInPort = sPinMask; }$/;"	f	class:FastPin
toggle	.\lib\FastLED\fastpin.h	/^	inline static void toggle() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin
toggle	.\lib\FastLED\fastpin.h	/^	inline void toggle() __attribute__ ((always_inline)) { *mInPort = mPinMask; }$/;"	f	class:Pin
toggle	.\lib\FastLED\platforms\arm\nrf51\fastpin_arm_nrf51.h	/^  inline static void toggle() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUT ^= _MASK; }$/;"	f	class:_ARMPIN
toggle	.\lib\FastLED\platforms\esp\32\fastpin_esp32.h	/^  inline static void toggle() __attribute__ ((always_inline)) { if (PIN < OUTPUT_PIN_LIMIT){ _GPB0._GPO = MASK; } }$/;"	f	class:_ESPPIN
toggle	.\lib\FastLED\platforms\esp\8266\fastpin_esp8266.h	/^  inline static void toggle() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPO ^= MASK; } else { GP16O ^= MASK; } }$/;"	f	class:_ESPPIN
toneAC	.\lib\toneAC\toneAC.cpp	/^void toneAC(unsigned long frequency, uint8_t volume, unsigned long length, uint8_t background) {$/;"	f
toneAC_h	.\lib\toneAC\toneAC.h	74;"	d
top	.\lib\avr-stl\include\stl_queue.h	/^  const_reference top() const { return c.front(); }$/;"	f	class:priority_queue
top	.\lib\avr-stl\include\stl_stack.h	/^  const_reference top() const { return c.back(); }$/;"	f	class:stack
top	.\lib\avr-stl\include\stl_stack.h	/^  reference top() { return c.back(); }$/;"	f	class:stack
traits_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:istreambuf_iterator
traits_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:ostreambuf_iterator
traits_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:istream_iterator
traits_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:ostream_iterator
transfer	.\lib\avr-stl\include\stl_list.h	/^  void transfer(iterator __position, iterator __first, iterator __last) {$/;"	f	class:list
transform	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter transform(_InputIter __first, _InputIter __last,$/;"	f
transform	.\lib\avr-stl\include\stl_algo.h	/^_OutputIter transform(_InputIter1 __first1, _InputIter1 __last1,$/;"	f
transpose8	.\lib\FastLED\bitswap.h	/^__attribute__((always_inline)) inline void transpose8(unsigned char *A, unsigned char *B) {$/;"	f
transpose8x1	.\lib\FastLED\bitswap.h	/^__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {$/;"	f
transpose8x1_MSB	.\lib\FastLED\bitswap.h	/^__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {$/;"	f
transpose8x1_noinline	.\lib\FastLED\bitswap.cpp	/^void transpose8x1_noinline(unsigned char *A, unsigned char *B) {$/;"	f
trigger	.\lib\FastLED\lib8tion.h	/^    void trigger() { mPrevTrigger = getTime() - mPeriod; };$/;"	f	class:CEveryNTimePeriods
triwave8	.\lib\FastLED\lib8tion.h	/^LIB8STATIC uint8_t triwave8(uint8_t in)$/;"	f
true	.\lib\avr-stl\include\stl_config.h	453;"	d
twi_Done	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_Done;$/;"	v	file:
twi_Finish	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_Finish(byte bRetVal) {$/;"	f
twi_Return_Value	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_Return_Value;$/;"	v	file:
twi_Write_Vars	.\lib\I2Cdev\I2Cdev.cpp	/^    } twi_Write_Vars;$/;"	t	typeref:struct:__anon55	file:
twi_cbendTransmissionDone	.\lib\I2Cdev\I2Cdev.cpp	/^    void (*twi_cbendTransmissionDone)(int);$/;"	v
twi_cbreadFromDone	.\lib\I2Cdev\I2Cdev.cpp	/^    void (*twi_cbreadFromDone)(int);$/;"	v
twi_error	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_error;$/;"	v	file:
twi_init	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_init() {$/;"	f
twi_masterBuffer	.\lib\I2Cdev\I2Cdev.cpp	/^    static uint8_t twi_masterBuffer[TWI_BUFFER_LENGTH];$/;"	v	file:
twi_masterBufferIndex	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_masterBufferIndex;$/;"	v	file:
twi_masterBufferLength	.\lib\I2Cdev\I2Cdev.cpp	/^    static uint8_t twi_masterBufferLength;$/;"	v	file:
twi_read00	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_read00() {$/;"	f
twi_read01	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_read01() {$/;"	f
twi_readFrom	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_readFrom(uint8_t address, uint8_t* data, uint8_t length) {$/;"	f
twi_releaseBus	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_releaseBus(void) {$/;"	f
twi_reply	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_reply(uint8_t ack) {$/;"	f
twi_rxBuffer	.\lib\I2Cdev\I2Cdev.cpp	/^    static uint8_t twi_rxBuffer[TWI_BUFFER_LENGTH];$/;"	v	file:
twi_rxBufferIndex	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_rxBufferIndex;$/;"	v	file:
twi_slarw	.\lib\I2Cdev\I2Cdev.cpp	/^    static uint8_t twi_slarw;$/;"	v	file:
twi_state	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_state;$/;"	v	file:
twi_stop	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_stop(void) {$/;"	f
twi_transmitting	.\lib\I2Cdev\I2Cdev.cpp	/^    static volatile uint8_t twi_transmitting;$/;"	v	file:
twi_write00	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_write00() {$/;"	f
twi_write01	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_write01() {$/;"	f
twi_writeTo	.\lib\I2Cdev\I2Cdev.cpp	/^    void twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait) {$/;"	f
twii_CopyFromBuf	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_CopyFromBuf(uint8_t *pData, uint8_t ucLength) {$/;"	f
twii_CopyToBuf	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_CopyToBuf(uint8_t* pData, uint8_t ucLength) {$/;"	f
twii_InitBuffer	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_InitBuffer(uint8_t ucPos, uint8_t ucLength) {$/;"	f
twii_SetError	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_SetError(uint8_t ucError) {$/;"	f
twii_SetSlaRW	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_SetSlaRW(uint8_t ucSlaRW) {$/;"	f
twii_SetStart	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_SetStart() {$/;"	f
twii_SetState	.\lib\I2Cdev\I2Cdev.cpp	/^    void twii_SetState(uint8_t ucState) {$/;"	f
twii_WaitForDone	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t twii_WaitForDone(uint16_t timeout) {$/;"	f
txAddress	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::txAddress = 0;$/;"	m	class:TwoWire	file:
txAddress	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t txAddress;$/;"	m	class:TwoWire
txBuffer	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::txBuffer[NBWIRE_BUFFER_LENGTH];$/;"	m	class:TwoWire	file:
txBuffer	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t txBuffer[];$/;"	m	class:TwoWire
txBufferIndex	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::txBufferIndex = 0;$/;"	m	class:TwoWire	file:
txBufferIndex	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t txBufferIndex;$/;"	m	class:TwoWire
txBufferLength	.\lib\I2Cdev\I2Cdev.cpp	/^    uint8_t TwoWire::txBufferLength = 0;$/;"	m	class:TwoWire	file:
txBufferLength	.\lib\I2Cdev\I2Cdev.h	/^            static uint8_t txBufferLength;$/;"	m	class:TwoWire
type	.\lib\FastLED\library.json	/^        "type": "git",$/;"	f
type	.\lib\I2Cdev\library.json	/^    "type": "git",$/;"	f
type	.\lib\RunningMedian\library.json	/^    "type": "git",$/;"	f
typename	.\lib\avr-stl\include\stl_config.h	458;"	d
unary_compose	.\lib\avr-stl\include\stl_function.h	/^  unary_compose(const _Operation1& __x, const _Operation2& __y) $/;"	f	class:unary_compose
unary_compose	.\lib\avr-stl\include\stl_function.h	/^class unary_compose$/;"	c
unary_function	.\lib\avr-stl\include\stl_function.h	/^struct unary_function {$/;"	s
unary_negate	.\lib\avr-stl\include\stl_function.h	/^  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:unary_negate
unary_negate	.\lib\avr-stl\include\stl_function.h	/^class unary_negate$/;"	c
uninitialized_copy	.\lib\avr-stl\include\stl_uninitialized.h	/^  uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f
uninitialized_copy	.\lib\avr-stl\include\stl_uninitialized.h	/^inline char* uninitialized_copy(const char* __first, const char* __last,$/;"	f
uninitialized_copy	.\lib\avr-stl\include\stl_uninitialized.h	/^uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f
uninitialized_copy_n	.\lib\avr-stl\include\stl_uninitialized.h	/^uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f
uninitialized_fill	.\lib\avr-stl\include\stl_uninitialized.h	/^inline void uninitialized_fill(_ForwardIter __first,$/;"	f
uninitialized_fill_n	.\lib\avr-stl\include\stl_uninitialized.h	/^uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)$/;"	f
unique	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last) {$/;"	f
unique	.\lib\avr-stl\include\stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last,$/;"	f
unique	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::unique()$/;"	f	class:list
unique	.\lib\avr-stl\include\stl_list.h	/^void list<_Tp, _Alloc>::unique(_BinaryPredicate __binary_pred)$/;"	f	class:list
unique	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::unique()$/;"	f	class:slist
unique	.\lib\avr-stl\include\stl_slist.h	/^void slist<_Tp,_Alloc>::unique(_BinaryPredicate __pred)$/;"	f	class:slist
unique_copy	.\lib\avr-stl\include\stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f
updateLength	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::updateLength(uint16_t n) {$/;"	f	class:Adafruit_NeoPixel
updateType	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^void Adafruit_NeoPixel::updateType(neoPixelType t) {$/;"	f	class:Adafruit_NeoPixel
update_ctar0	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static inline void update_ctar0(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
update_ctar0	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static inline void update_ctar0(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
update_ctar1	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static inline void update_ctar1(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
update_ctar1	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static inline void update_ctar1(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
update_ctars	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
update_ctars	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
upper_bound	.\lib\avr-stl\include\stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f
upper_bound	.\lib\avr-stl\include\stl_map.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:map
upper_bound	.\lib\avr-stl\include\stl_map.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:map
upper_bound	.\lib\avr-stl\include\stl_multimap.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:multimap
upper_bound	.\lib\avr-stl\include\stl_multimap.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:multimap
upper_bound	.\lib\avr-stl\include\stl_multiset.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:multiset
upper_bound	.\lib\avr-stl\include\stl_set.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:set
upper_bound	.\lib\avr-stl\include\stl_tree.h	/^  ::upper_bound(const _Key& __k) const$/;"	f	class:_Rb_tree
upper_bound	.\lib\avr-stl\include\stl_tree.h	/^  ::upper_bound(const _Key& __k)$/;"	f	class:_Rb_tree
url	.\lib\FastLED\library.json	/^            "url": "https:\/\/github.com\/focalintent",$/;"	f
url	.\lib\FastLED\library.json	/^            "url": "https:\/\/github.com\/kriegsman",$/;"	f
url	.\lib\FastLED\library.json	/^        "url": "https:\/\/github.com\/FastLED\/FastLED.git"$/;"	f
url	.\lib\I2Cdev\library.json	/^    "url": "https:\/\/github.com\/jrowberg\/i2cdevlib.git"$/;"	f
url	.\lib\RunningMedian\library.json	/^    "url": "https:\/\/github.com\/RobTillaart\/Arduino.git"$/;"	f
user_onReceive	.\lib\I2Cdev\I2Cdev.cpp	/^    void (*TwoWire::user_onReceive)(int);$/;"	v
user_onReceive	.\lib\I2Cdev\I2Cdev.h	/^            static void (*user_onReceive)(int);$/;"	m	class:TwoWire
user_onRequest	.\lib\I2Cdev\I2Cdev.cpp	/^    void (*TwoWire::user_onRequest)(void);$/;"	v
user_onRequest	.\lib\I2Cdev\I2Cdev.h	/^            static void (*user_onRequest)(void);$/;"	m	class:TwoWire
v	.\lib\FastLED\pixeltypes.h	/^		        uint8_t v; };$/;"	m	union:CHSV::__anon34::__anon35::__anon38
val	.\lib\FastLED\pixeltypes.h	/^		        uint8_t val;$/;"	m	union:CHSV::__anon34::__anon35::__anon38
validpin	.\lib\FastLED\fastpin.h	/^	constexpr static bool validpin() { return false; }$/;"	f	class:FastPin
value	.\lib\FastLED\pixeltypes.h	/^		        uint8_t value;$/;"	m	union:CHSV::__anon34::__anon35::__anon38
value	.\lib\avr-stl\include\stl_function.h	/^  typename _Operation::first_argument_type value;$/;"	m	class:binder1st
value	.\lib\avr-stl\include\stl_function.h	/^  typename _Operation::second_argument_type value;$/;"	m	class:binder2nd
value_comp	.\lib\avr-stl\include\stl_map.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:map
value_comp	.\lib\avr-stl\include\stl_multimap.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:multimap
value_comp	.\lib\avr-stl\include\stl_multiset.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:multiset
value_comp	.\lib\avr-stl\include\stl_set.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:set
value_compare	.\lib\avr-stl\include\stl_map.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:map::value_compare
value_compare	.\lib\avr-stl\include\stl_map.h	/^  class value_compare$/;"	c	class:map
value_compare	.\lib\avr-stl\include\stl_multimap.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:multimap::value_compare
value_compare	.\lib\avr-stl\include\stl_multimap.h	/^  class value_compare : public binary_function<value_type, value_type, bool> {$/;"	c	class:multimap
value_compare	.\lib\avr-stl\include\stl_multiset.h	/^  typedef _Compare value_compare;$/;"	t	class:multiset
value_compare	.\lib\avr-stl\include\stl_set.h	/^  typedef _Compare value_compare;$/;"	t	class:set
value_type	.\lib\avr-stl\include\concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::value_type value_type;$/;"	t	struct:__value_type_type_definition_requirement_violation
value_type	.\lib\avr-stl\include\concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(value_type);$/;"	v
value_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	class:allocator
value_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	struct:__allocator
value_type	.\lib\avr-stl\include\stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:allocator
value_type	.\lib\avr-stl\include\stl_bvector.h	/^  typedef bool value_type;$/;"	t	class:__BVECTOR
value_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Tp value_type;$/;"	t	class:deque
value_type	.\lib\avr-stl\include\stl_deque.h	/^  typedef _Tp value_type;$/;"	t	struct:_Deque_iterator
value_type	.\lib\avr-stl\include\stl_deque.h	/^inline _Tp* value_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) { return 0; }$/;"	f
value_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_map
value_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_multimap
value_type	.\lib\avr-stl\include\stl_hash_map.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator
value_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_multiset
value_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_set
value_type	.\lib\avr-stl\include\stl_hash_set.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator
value_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	class:hashtable
value_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:_Hashtable_const_iterator
value_type	.\lib\avr-stl\include\stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:_Hashtable_iterator
value_type	.\lib\avr-stl\include\stl_hashtable.h	/^value_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_hashtable.h	/^value_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator.h	/^          value_type;$/;"	t	class:reverse_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Tp                            value_type;$/;"	t	class:istream_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:reverse_bidirectional_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:reverse_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef _Tp                 value_type;$/;"	t	class:istream_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                           value_type;$/;"	t	class:ostream_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:back_insert_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:front_insert_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:ostream_iterator
value_type	.\lib\avr-stl\include\stl_iterator.h	/^inline _Tp* value_type(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator.h	/^value_type(const istream_iterator<_Tp, _Dist>&) { return (_Tp*) 0; }$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator.h	/^value_type(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp,$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp                         value_type;$/;"	t	struct:iterator_traits
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:bidirectional_iterator
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:random_access_iterator
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp                  value_type;$/;"	t	struct:forward_iterator
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp                value_type;$/;"	t	struct:input_iterator
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef _Tp        value_type;$/;"	t	struct:iterator
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef typename _Iterator::value_type        value_type;$/;"	t	struct:iterator_traits
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^  typedef void                value_type;$/;"	t	struct:output_iterator
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Tp* value_type(const _Tp*) { return (_Tp*)(0); }$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Tp* value_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Tp* value_type(const forward_iterator<_Tp, _Distance>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Tp* value_type(const input_iterator<_Tp, _Distance>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^inline _Tp* value_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_iterator_base.h	/^value_type(const _Iter& __i) { return __value_type(__i); }$/;"	f
value_type	.\lib\avr-stl\include\stl_list.h	/^  typedef _Tp value_type;$/;"	t	class:list
value_type	.\lib\avr-stl\include\stl_list.h	/^  typedef _Tp value_type;$/;"	t	struct:_List_iterator
value_type	.\lib\avr-stl\include\stl_list.h	/^value_type(const _List_iterator<_Tp, _Ref, _Ptr>&)$/;"	f
value_type	.\lib\avr-stl\include\stl_map.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:map
value_type	.\lib\avr-stl\include\stl_multimap.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:multimap
value_type	.\lib\avr-stl\include\stl_multiset.h	/^  typedef _Key     value_type;$/;"	t	class:multiset
value_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:priority_queue
value_type	.\lib\avr-stl\include\stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:queue
value_type	.\lib\avr-stl\include\stl_raw_storage_iter.h	/^  typedef void                value_type;$/;"	t	class:raw_storage_iterator
value_type	.\lib\avr-stl\include\stl_set.h	/^  typedef _Key     value_type;$/;"	t	class:set
value_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Tp                value_type;$/;"	t	class:slist
value_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef _Tp              value_type;$/;"	t	struct:_Slist_iterator
value_type	.\lib\avr-stl\include\stl_slist.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator
value_type	.\lib\avr-stl\include\stl_slist.h	/^inline _Tp* value_type(const _Slist_iterator<_Tp, _Ref, _Ptr>&) {$/;"	f
value_type	.\lib\avr-stl\include\stl_stack.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:stack
value_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Value value_type;$/;"	t	class:_Rb_tree
value_type	.\lib\avr-stl\include\stl_tree.h	/^  typedef _Value value_type;$/;"	t	struct:_Rb_tree_iterator
value_type	.\lib\avr-stl\include\stl_tree.h	/^inline _Value* value_type(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&) {$/;"	f
value_type	.\lib\avr-stl\include\stl_vector.h	/^  typedef _Tp value_type;$/;"	t	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^  explicit vector(const allocator_type& __a = allocator_type())$/;"	f	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^  explicit vector(size_type __n)$/;"	f	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^  vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^  vector(const _Tp* __first, const _Tp* __last,$/;"	f	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^  vector(const vector<_Tp, _Alloc>& __x) $/;"	f	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^  vector(size_type __n, const _Tp& __value,$/;"	f	class:vector
vector	.\lib\avr-stl\include\stl_vector.h	/^class vector : protected _Vector_base<_Tp, _Alloc> $/;"	c
version	.\lib\FastLED\library.json	/^    "version": "3.1.6",$/;"	f
version	.\lib\RunningMedian\library.json	/^  "version":"0.1.14",$/;"	f
w	.\lib\MPU6050\helper_3dmath.h	/^        float w;$/;"	m	class:Quaternion
wOffset	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.h	/^    wOffset;       \/\/ Index of white byte (same as rOffset if no white)$/;"	m	class:Adafruit_NeoPixel
wait	.\lib\FastLED\fastled_delay.h	/^	void wait() {$/;"	f	class:CMinWait
wait	.\lib\FastLED\fastspi_bitbang.h	/^	static void wait() __attribute__((always_inline)) { }$/;"	f	class:AVRSoftwareSPIOutput
wait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }$/;"	f	class:ARMHardwareSPIOutput
wait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }$/;"	f	class:ARMHardwareSPIOutput
wait	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  static void wait() __attribute__((always_inline)) { while(!(SPIX.S & SPI_S_SPTEF));  }$/;"	f	class:ARMHardwareSPIOutput
wait	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  static void wait() __attribute__((always_inline)){ if(shouldWait()) { while(NRF_SPI0->EVENTS_READY==0); } NRF_SPI0->INTENCLR; }$/;"	f	class:NRF51SPIOutput
wait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) { if(shouldWait()) { while(!(SPSR & (1<<SPIF))); } }$/;"	f	class:AVRHardwareSPIOutput
wait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) {$/;"	f	class:AVRUSART0SPIOutput
wait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) {$/;"	f	class:AVRUSART1SPIOutput
wait	.\lib\I2Cdev\I2Cdev.cpp	/^        uint8_t wait;$/;"	m	struct:__anon55	file:
wait1	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void wait1() __attribute__((always_inline)) { while( (SPIX.SR & 0xF000) >= 0x2000);  }$/;"	f	class:ARMHardwareSPIOutput
wait1	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void wait1() __attribute__((always_inline)) { while( (SPIX.SR & 0xF000) >= 0x2000);  }$/;"	f	class:ARMHardwareSPIOutput
waitForEmpty	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	static inline void waitForEmpty() { while ((m_SPI->SPI_SR & SPI_SR_TDRE) == 0); }$/;"	f	class:SAMHardwareSPIOutput
waitFully	.\lib\FastLED\fastspi_bitbang.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRSoftwareSPIOutput
waitFully	.\lib\FastLED\fastspi_ref.h	/^	static void waitFully() { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput
waitFully	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void waitFully() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
waitFully	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void waitFully() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput
waitFully	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void waitFully() { wait(); }$/;"	f	class:ARMHardwareSPIOutput
waitFully	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  static void waitFully() __attribute__((always_inline)){ if(shouldWait()) { while(NRF_SPI0->EVENTS_READY==0); } NRF_SPI0->INTENCLR; }$/;"	f	class:NRF51SPIOutput
waitFully	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void waitFully() { while((m_SPI->SPI_SR & SPI_SR_TXEMPTY) == 0); }$/;"	f	class:SAMHardwareSPIOutput
waitFully	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRHardwareSPIOutput
waitFully	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRUSART0SPIOutput
waitFully	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRUSART1SPIOutput
waitInt	.\lib\I2Cdev\I2Cdev.cpp	/^    boolean Fastwire::waitInt() {$/;"	f	class:Fastwire
width	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^uint8_t GOFi2cOLED::width(void) { $/;"	f	class:GOFi2cOLED
word	.\lib\FastLED\bitswap.h	/^  uint32_t word[2];$/;"	m	union:__anon22
wrap	.\lib\GOFi2cOLED\GOFi2cOLED.h	/^boolean  wrap; \/\/ If set, 'wrap' text at right edge of display$/;"	m	class:GOFi2cOLED
wrap	.\src\LightEffects.cpp	/^uint16_t LightEffects::wrap(uint16_t step) {$/;"	f	class:LightEffects
write	.\lib\Adafruit_NeoPixel\examples\StrandtestBLE\BLESerial.cpp	/^size_t BLESerial::write(uint8_t byte) {$/;"	f	class:BLESerial
write	.\lib\GOFi2cOLED\GOFi2cOLED.cpp	/^size_t GOFi2cOLED::write(uint8_t c) {$/;"	f	class:GOFi2cOLED
write	.\lib\I2Cdev\I2Cdev.cpp	/^    byte Fastwire::write(byte value) {$/;"	f	class:Fastwire
writeBit	.\lib\FastLED\fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin) {$/;"	f	class:AVRSoftwareSPIOutput
writeBit	.\lib\FastLED\fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin,$/;"	f	class:AVRSoftwareSPIOutput
writeBit	.\lib\FastLED\fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, data_ptr_t clockdatapin,$/;"	f	class:AVRSoftwareSPIOutput
writeBit	.\lib\FastLED\fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {$/;"	f	class:AVRSoftwareSPIOutput
writeBit	.\lib\FastLED\fastspi_nop.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writeBit	.\lib\FastLED\fastspi_ref.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput
writeBit	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:ARMHardwareSPIOutput
writeBit	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:ARMHardwareSPIOutput
writeBit	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  template <uint8_t BIT> inline static void writeBit(uint8_t b) { \/* TODO *\/ }$/;"	f	class:ARMHardwareSPIOutput
writeBit	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:NRF51SPIOutput
writeBit	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	template <uint8_t BIT> inline void writeBit(uint8_t b) {$/;"	f	class:SAMHardwareSPIOutput
writeBit	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:AVRHardwareSPIOutput
writeBit	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:AVRUSART0SPIOutput
writeBit	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:AVRUSART1SPIOutput
writeBit	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {$/;"	f	class:I2Cdev
writeBitW	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t data) {$/;"	f	class:I2Cdev
writeBits	.\lib\FastLED\platforms\arm\k20\clockless_arm_k20.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {$/;"	f	class:ClocklessController
writeBits	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER, LANES, PORT_MASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:InlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\arm\k20\clockless_block_arm_k20.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER,LANES, PMASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:SixteenWayInlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\arm\k66\clockless_arm_k66.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {$/;"	f	class:ClocklessController
writeBits	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER, LANES, LANE_MASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:InlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\arm\k66\clockless_block_arm_k66.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER,LANES, PMASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:SixteenWayInlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\arm\sam\clockless_arm_sam.h	/^	template<int BITS>  __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register uint8_t & b) {$/;"	f	class:ClocklessController
writeBits	.\lib\FastLED\platforms\arm\sam\clockless_block_arm_sam.h	/^  template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, Lines & b3, PixelController<RGB_ORDER,LANES, PORT_MASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:InlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	template<int BITS> static inline void writeBits(uint16_t w) {$/;"	f	class:SAMHardwareSPIOutput
writeBits	.\lib\FastLED\platforms\arm\stm32\clockless_arm_stm32.h	/^  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {$/;"	f	class:ClocklessController
writeBits	.\lib\FastLED\platforms\esp\32\clockless_block_esp32.h	/^    template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register Lines & b, PixelController<RGB_ORDER, LANES, PORT_MASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:InlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\esp\32\clockless_esp32.h	/^    template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register uint32_t b) {$/;"	f	class:ClocklessController
writeBits	.\lib\FastLED\platforms\esp\8266\clockless_block_esp8266.h	/^  template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register Lines & b, PixelController<RGB_ORDER, LANES, PORT_MASK> &pixels) { \/\/ , register uint32_t & b2)  {$/;"	f	class:InlineBlockClocklessController
writeBits	.\lib\FastLED\platforms\esp\8266\clockless_esp8266.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register uint32_t b)  {$/;"	f	class:ClocklessController
writeBits	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {$/;"	f	class:I2Cdev
writeBitsW	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t data) {$/;"	f	class:I2Cdev
writeBoundary	.\lib\FastLED\chipsets.h	/^	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }$/;"	f	class:P9813Controller
writeBuf	.\lib\I2Cdev\I2Cdev.cpp	/^    byte Fastwire::writeBuf(byte device, byte address, byte *data, byte num) {$/;"	f	class:Fastwire
writeByte	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:AVRSoftwareSPIOutput
writeByte	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeByte(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin)  {$/;"	f	class:AVRSoftwareSPIOutput
writeByte	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeByte(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin,$/;"	f	class:AVRSoftwareSPIOutput
writeByte	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeByte(uint8_t b, data_ptr_t datapin,$/;"	f	class:AVRSoftwareSPIOutput
writeByte	.\lib\FastLED\fastspi_nop.h	/^	void writeByte(uint8_t b) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writeByte	.\lib\FastLED\fastspi_ref.h	/^	static void writeByte(uint8_t b) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput
writeByte	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^		static void writeByte(uint8_t b) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write
writeByte	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeByte	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^		static void writeByte(uint8_t b) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write
writeByte	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeByte	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.DL = b; }$/;"	f	class:ARMHardwareSPIOutput
writeByte	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); NRF_SPI0->TXD = b; NRF_SPI0->INTENCLR; shouldWait(true); }$/;"	f	class:NRF51SPIOutput
writeByte	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:SAMHardwareSPIOutput
writeByte	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPDR=b;  shouldWait(true); }$/;"	f	class:AVRHardwareSPIOutput
writeByte	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); UDR0=b;  shouldWait(true); }$/;"	f	class:AVRUSART0SPIOutput
writeByte	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); UDR1=b;  shouldWait(true); }$/;"	f	class:AVRUSART1SPIOutput
writeByte	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {$/;"	f	class:I2Cdev
writeByteCont	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeByteCont(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;  sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeByteCont	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeByteCont(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeByteContNoWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeByteContNoWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeByteContNoWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeByteContNoWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeByteContPostWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeByteContPostWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;  sei(); wait(); }$/;"	f	class:ARMHardwareSPIOutput
writeByteContPostWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeByteContPostWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;wait(); }$/;"	f	class:ARMHardwareSPIOutput
writeByteNoWait	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }$/;"	f	class:AVRSoftwareSPIOutput
writeByteNoWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeByteNoWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeByteNoWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPDR=b; shouldWait(true); }$/;"	f	class:AVRHardwareSPIOutput
writeByteNoWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { UDR0=b; shouldWait(true); }$/;"	f	class:AVRUSART0SPIOutput
writeByteNoWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { UDR1=b; shouldWait(true); }$/;"	f	class:AVRUSART1SPIOutput
writeBytePostWait	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }$/;"	f	class:AVRSoftwareSPIOutput
writeBytePostWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF);SPIX.SR |= SPI_SR_TCF; sei(); wait(); }$/;"	f	class:ARMHardwareSPIOutput
writeBytePostWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF);SPIX.SR |= SPI_SR_TCF; wait(); }$/;"	f	class:ARMHardwareSPIOutput
writeBytePostWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPDR=b; shouldWait(true); wait(); }$/;"	f	class:AVRHardwareSPIOutput
writeBytePostWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { UDR0=b; shouldWait(true); wait(); }$/;"	f	class:AVRUSART0SPIOutput
writeBytePostWait	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { UDR1=b; shouldWait(true); wait(); }$/;"	f	class:AVRUSART1SPIOutput
writeBytes	.\lib\FastLED\fastspi_bitbang.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:AVRSoftwareSPIOutput
writeBytes	.\lib\FastLED\fastspi_bitbang.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRSoftwareSPIOutput
writeBytes	.\lib\FastLED\fastspi_nop.h	/^	void writeBytes(uint8_t *data, int len) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writeBytes	.\lib\FastLED\fastspi_ref.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:REFHardwareSPIOutput
writeBytes	.\lib\FastLED\fastspi_ref.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:REFHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ARMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ARMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ARMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  template<class D> void writeBytes(uint8_t *data, int len) {$/;"	f	class:NRF51SPIOutput
writeBytes	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void writeBytes(uint8_t *data, int len) {$/;"	f	class:NRF51SPIOutput
writeBytes	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:SAMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:SAMHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:AVRHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:AVRUSART0SPIOutput
writeBytes	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <class D> void writeBytes(register uint8_t *data, int len) {$/;"	f	class:AVRUSART1SPIOutput
writeBytes	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRHardwareSPIOutput
writeBytes	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRUSART0SPIOutput
writeBytes	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRUSART1SPIOutput
writeBytes	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {$/;"	f	class:I2Cdev
writeBytesValue	.\lib\FastLED\fastspi_bitbang.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRSoftwareSPIOutput
writeBytesValue	.\lib\FastLED\fastspi_nop.h	/^	void writeBytesValue(uint8_t value, int len) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writeBytesValue	.\lib\FastLED\fastspi_ref.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:REFHardwareSPIOutput
writeBytesValue	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytesValue	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytesValue	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytesValue	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  void writeBytesValue(uint8_t value, int len) {$/;"	f	class:NRF51SPIOutput
writeBytesValue	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:SAMHardwareSPIOutput
writeBytesValue	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRHardwareSPIOutput
writeBytesValue	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRUSART0SPIOutput
writeBytesValue	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRUSART1SPIOutput
writeBytesValueRaw	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRSoftwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\fastspi_nop.h	/^	static void writeBytesValueRaw(uint8_t value, int len) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writeBytesValueRaw	.\lib\FastLED\fastspi_ref.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:REFHardwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  static void writeBytesValueRaw(uint8_t value, int len) { while(len--) { writeByte(value);  } }$/;"	f	class:NRF51SPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:SAMHardwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRHardwareSPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRUSART0SPIOutput
writeBytesValueRaw	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRUSART1SPIOutput
writeDMPConfigurationSet	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {$/;"	f	class:MPU6050
writeHeader	.\lib\FastLED\chipsets.h	/^	void writeHeader() {$/;"	f	class:SM16716Controller
writeLed	.\lib\FastLED\chipsets.h	/^	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {$/;"	f	class:APA102Controller
writeLed	.\lib\FastLED\chipsets.h	/^	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {$/;"	f	class:SK9822Controller
writeLed	.\lib\FastLED\chipsets.h	/^	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {$/;"	f	class:P9813Controller
writeMemoryBlock	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {$/;"	f	class:MPU6050
writeMemoryByte	.\lib\MPU6050\MPU6050.cpp	/^void MPU6050::writeMemoryByte(uint8_t data) {$/;"	f	class:MPU6050
writePixels	.\lib\FastLED\fastspi_bitbang.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER>  __attribute__((noinline)) void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:AVRSoftwareSPIOutput
writePixels	.\lib\FastLED\fastspi_nop.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writePixels	.\lib\FastLED\fastspi_ref.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:REFHardwareSPIOutput
writePixels	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ARMHardwareSPIOutput
writePixels	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ARMHardwareSPIOutput
writePixels	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ARMHardwareSPIOutput
writePixels	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:NRF51SPIOutput
writePixels	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:SAMHardwareSPIOutput
writePixels	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:AVRHardwareSPIOutput
writePixels	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:AVRUSART0SPIOutput
writePixels	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {$/;"	f	class:AVRUSART1SPIOutput
writeProgDMPConfigurationSet	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {$/;"	f	class:MPU6050
writeProgMemoryBlock	.\lib\MPU6050\MPU6050.cpp	/^bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {$/;"	f	class:MPU6050
writeWord	.\lib\FastLED\fastspi_bitbang.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }$/;"	f	class:AVRSoftwareSPIOutput
writeWord	.\lib\FastLED\fastspi_nop.h	/^	void writeWord(uint16_t w) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput
writeWord	.\lib\FastLED\fastspi_ref.h	/^	static void writeWord(uint16_t w) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput
writeWord	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^		static void writeWord(uint16_t w) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write
writeWord	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeWord	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^		static void writeWord(uint16_t w) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write
writeWord	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeWord	.\lib\FastLED\platforms\arm\kl26\fastspi_arm_kl26.h	/^  static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w & 0xFF); }$/;"	f	class:ARMHardwareSPIOutput
writeWord	.\lib\FastLED\platforms\arm\nrf51\fastspi_arm_nrf51.h	/^  static void writeWord(uint16_t w) __attribute__((always_inline)){ writeByte(w>>8); writeByte(w & 0xFF);  }$/;"	f	class:NRF51SPIOutput
writeWord	.\lib\FastLED\platforms\arm\sam\fastspi_arm_sam.h	/^	static void writeWord(uint16_t w) {$/;"	f	class:SAMHardwareSPIOutput
writeWord	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }$/;"	f	class:AVRHardwareSPIOutput
writeWord	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }$/;"	f	class:AVRUSART0SPIOutput
writeWord	.\lib\FastLED\platforms\avr\fastspi_avr.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }$/;"	f	class:AVRUSART1SPIOutput
writeWord	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {$/;"	f	class:I2Cdev
writeWordCont	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeWordCont(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeWordCont	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeWordCont(uint16_t w) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeWordContNoWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeWordContNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;  sei();}$/;"	f	class:ARMHardwareSPIOutput
writeWordContNoWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeWordContNoWait(uint16_t w) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeWordNoWait	.\lib\FastLED\platforms\arm\k20\fastspi_arm_k20.h	/^	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }$/;"	f	class:ARMHardwareSPIOutput
writeWordNoWait	.\lib\FastLED\platforms\arm\k66\fastspi_arm_k66.h	/^	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}$/;"	f	class:ARMHardwareSPIOutput
writeWords	.\lib\I2Cdev\I2Cdev.cpp	/^bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {$/;"	f	class:I2Cdev
wstring	.\lib\avr-stl\include\stl_string_fwd.h	/^typedef basic_string<wchar_t> wstring;$/;"	t
x	.\lib\MPU6050\helper_3dmath.h	/^        float x;$/;"	m	class:Quaternion
x	.\lib\MPU6050\helper_3dmath.h	/^        float x;$/;"	m	class:VectorFloat
x	.\lib\MPU6050\helper_3dmath.h	/^        int16_t x;$/;"	m	class:VectorInt16
xstr	.\lib\FastLED\FastLED.h	7;"	d
y	.\lib\MPU6050\helper_3dmath.h	/^        float y;$/;"	m	class:Quaternion
y	.\lib\MPU6050\helper_3dmath.h	/^        float y;$/;"	m	class:VectorFloat
y	.\lib\MPU6050\helper_3dmath.h	/^        int16_t y;$/;"	m	class:VectorInt16
yield	.\lib\FastLED\FastLED.cpp	/^extern "C" void yield(void) { }$/;"	f
z	.\lib\MPU6050\helper_3dmath.h	/^        float z;$/;"	m	class:Quaternion
z	.\lib\MPU6050\helper_3dmath.h	/^        float z;$/;"	m	class:VectorFloat
z	.\lib\MPU6050\helper_3dmath.h	/^        int16_t z;$/;"	m	class:VectorInt16
~Adafruit_NeoPixel	.\lib\Adafruit_NeoPixel\Adafruit_NeoPixel.cpp	/^Adafruit_NeoPixel::~Adafruit_NeoPixel() {$/;"	f	class:Adafruit_NeoPixel
~RunningMedian	.\lib\RunningMedian\RunningMedian.cpp	/^RunningMedian::~RunningMedian()$/;"	f	class:RunningMedian
~_Bvector_base	.\lib\avr-stl\include\stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	f	class:_Bvector_base
~_Bvector_base	.\lib\avr-stl\include\stl_bvector.h	/^  ~_Bvector_base() { _M_deallocate(); }$/;"	f	class:_Bvector_base
~_Deque_base	.\lib\avr-stl\include\stl_deque.h	/^_Deque_base<_Tp,_Alloc>::~_Deque_base() {$/;"	f	class:_Deque_base
~_List_base	.\lib\avr-stl\include\stl_list.h	/^  ~_List_base() {$/;"	f	class:_List_base
~_Lock	.\lib\avr-stl\include\stl_alloc.h	/^            ~_Lock() { __NODE_ALLOCATOR_UNLOCK; }$/;"	f	class:__default_alloc_template::_Lock
~_Rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  ~_Rb_tree() { clear(); }$/;"	f	class:_Rb_tree
~_Rb_tree_base	.\lib\avr-stl\include\stl_tree.h	/^  ~_Rb_tree_base() { _M_put_node(_Base::_M_header); }$/;"	f	struct:_Rb_tree_base
~_Rb_tree_base	.\lib\avr-stl\include\stl_tree.h	/^  ~_Rb_tree_base() { _M_put_node(_M_header); }$/;"	f	struct:_Rb_tree_base
~_Slist_base	.\lib\avr-stl\include\stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&_M_head, 0); }$/;"	f	struct:_Slist_base
~_Slist_base	.\lib\avr-stl\include\stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&this->_M_head, 0); }$/;"	f	struct:_Slist_base
~_Temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  ~_Temporary_buffer() {  $/;"	f	class:_Temporary_buffer
~_Vector_base	.\lib\avr-stl\include\stl_vector.h	/^  ~_Vector_base() { _M_deallocate(_Base::_M_start, _Base::_M_end_of_storage - _Base::_M_start); }$/;"	f	struct:_Vector_base
~__VECTOR	.\lib\avr-stl\include\stl_bvector.h	/^  ~__VECTOR() { }$/;"	f	class:__BVECTOR
~deque	.\lib\avr-stl\include\stl_deque.h	/^  ~deque() { destroy(_M_start, _M_finish); }$/;"	f	class:deque
~hashtable	.\lib\avr-stl\include\stl_hashtable.h	/^  ~hashtable() { clear(); }$/;"	f	class:hashtable
~list	.\lib\avr-stl\include\stl_list.h	/^  ~list() { }$/;"	f	class:list
~rb_tree	.\lib\avr-stl\include\stl_tree.h	/^  ~rb_tree() {}$/;"	f	struct:rb_tree
~slist	.\lib\avr-stl\include\stl_slist.h	/^  ~slist() {}$/;"	f	class:slist
~temporary_buffer	.\lib\avr-stl\include\stl_tempbuf.h	/^  ~temporary_buffer() {}$/;"	f	struct:temporary_buffer
~vector	.\lib\avr-stl\include\stl_vector.h	/^  ~vector() { destroy(_M_start, _M_finish); }$/;"	f	class:vector
